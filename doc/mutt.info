This is mutt.info, produced by makeinfo version 6.8 from mutt.texi.

INFO-DIR-SECTION Email-software
START-INFO-DIR-ENTRY
* The Mutt E-Mail Client: (mutt).   Text based mail reader
END-INFO-DIR-ENTRY


File: mutt.info,  Node: Top,  Next: Introduction,  Up: (dir)

The Mutt E-Mail Client
**********************

* Menu:

* Introduction::
* Getting Started::
* Configuration::
* Advanced Usage::
* Mutt's MIME Support::
* Optional Features::
* Security Considerations::
* Performance Tuning::
* Reference::
* Miscellany: Miscellany <1>.

— The Detailed Node Listing —

Introduction

* Mutt Home Page::
* Mailing Lists::
* Getting Mutt::
* Mutt Online Resources::
* Contributing to Mutt::
* Typographical Conventions::
* Copyright::

Getting Started

* Core Concepts::
* Screens and Menus::
* Moving Around in Menus::
* Editing Input Fields::
* Reading Mail::
* Sending Mail::
* Forwarding and Bouncing Mail::
* Postponing Mail::
* Encryption and Signing::

Configuration

* Location of Initialization Files::
* Starter Muttrc::
* Syntax of Initialization Files::
* Address Groups::
* Defining/Using Aliases::
* Changing the Default Key Bindings::
* Changing the current working directory::
* Defining Aliases for Character Sets::
* Setting Variables Based Upon Mailbox::
* Keyboard Macros::
* Using Color and Mono Video Attributes::
* Message Header Display::
* Alternative Addresses::
* Mailing Lists: Mailing Lists <1>.
* Using Multiple Spool Mailboxes::
* Monitoring Incoming Mail::
* User-Defined Headers::
* Specify Default Save Mailbox::
* Specify Default Fcc; Mailbox When Composing::
* Specify Default Save Filename and Default Fcc; Mailbox at Once::
* Change Settings Based Upon Message Recipients::
* Change Settings Before Formatting a Message::
* Choosing the Cryptographic Key of the Recipient::
* Dynamically Changing $index_format using Patterns::
* Adding Key Sequences to the Keyboard Buffer::
* Executing Functions::
* Message Scoring::
* Spam Detection::
* Setting and Querying Variables::
* Reading Initialization Commands From Another File::
* Removing Hooks::
* Format Strings::
* Control allowed header fields in a mailto; URL::

Advanced Usage

* Character Set Handling::
* Regular Expressions::
* Patterns; Searching, Limiting and Tagging: Patterns; Searching; Limiting and Tagging.
* Marking Messages::
* Using Tags::
* Using Hooks::
* Managing the Environment::
* External Address Queries::
* Mailbox Formats::
* Mailbox Shortcuts::
* Handling Mailing Lists::
* Display Munging::
* New Mail Detection::
* Editing Threads::
* Delivery Status Notification (DSN) Support: Delivery Status Notification [DSN] Support.
* Start a WWW Browser on URLs::
* Echoing Text::
* Message Composition Flow::
* Batch Composition Flow::
* Using MuttLisp (EXPERIMENTAL): Using MuttLisp [EXPERIMENTAL].
* Miscellany::

Mutt’s MIME Support

* Using MIME in Mutt::
* MIME Type Configuration with mime.types: MIME Type Configuration with mime_types.
* MIME Viewer Configuration with Mailcap::
* MIME Autoview::
* MIME Multipart/Alternative::
* Attachment Searching and Counting::
* MIME Lookup::

Optional Features

* General Notes::
* SSL/TLS Support::
* POP3 Support::
* IMAP Support::
* SMTP Support::
* OAUTHBEARER Support::
* Managing Multiple Accounts::
* Local Caching::
* Exact Address Generation::
* Sending Anonymous Messages via Mixmaster::
* Sidebar: Sidebar <1>.
* Compressed Folders Feature::
* Autocrypt::

Security Considerations

* Passwords::
* Temporary Files::
* Information Leaks::
* External Applications::

Performance Tuning

* Reading and Writing Mailboxes::
* Reading Messages from Remote Folders::
* Searching and Limiting::

Reference

* Command-Line Options::
* Configuration Commands::
* Configuration Variables::
* Functions: Functions <1>.

Miscellany

* Acknowledgements::
* About This Document::



File: mutt.info,  Node: Introduction,  Next: Getting Started,  Prev: Top,  Up: Top

1 Introduction
**************

*Mutt* is a small but very powerful text-based MIME mail client.  Mutt
is highly configurable, and is well suited to the mail power user with
advanced features like key bindings, keyboard macros, mail threading,
regular expression searches and a powerful pattern matching language for
selecting groups of messages.

* Menu:

* Mutt Home Page::
* Mailing Lists::
* Getting Mutt::
* Mutt Online Resources::
* Contributing to Mutt::
* Typographical Conventions::
* Copyright::


File: mutt.info,  Node: Mutt Home Page,  Next: Mailing Lists,  Up: Introduction

1.1 Mutt Home Page
==================

The official homepage can be found at http://www.mutt.org/
(http://www.mutt.org/).


File: mutt.info,  Node: Mailing Lists,  Next: Getting Mutt,  Prev: Mutt Home Page,  Up: Introduction

1.2 Mailing Lists
=================

To subscribe to one of the following mailing lists, send a message with
the word _subscribe_ in the body to _list-name_‘-request@mutt.org’.

   • <mutt-announce-request@mutt.org> — low traffic list for
     announcements

   • <mutt-users-request@mutt.org> — help, bug reports and feature
     requests

   • <mutt-dev-request@mutt.org> — development mailing list

   All messages posted to _mutt-announce_ are automatically forwarded to
_mutt-users_, so you do not need to be subscribed to both lists.


File: mutt.info,  Node: Getting Mutt,  Next: Mutt Online Resources,  Prev: Mailing Lists,  Up: Introduction

1.3 Getting Mutt
================

Mutt releases can be downloaded from ftp://ftp.mutt.org/pub/mutt/
(ftp://ftp.mutt.org/pub/mutt/).  For a list of mirror sites, please
refer to http://www.mutt.org/download.html
(http://www.mutt.org/download.html).

   For version control access, please refer to the Mutt development site
(https://gitlab.com/muttmua/mutt).


File: mutt.info,  Node: Mutt Online Resources,  Next: Contributing to Mutt,  Prev: Getting Mutt,  Up: Introduction

1.4 Mutt Online Resources
=========================

Bug Tracking System
     The official Mutt bug tracking system can be found at
     https://gitlab.com/muttmua/mutt/issues
     (https://gitlab.com/muttmua/mutt/issues)

Wiki
     An (unofficial) wiki can be found at
     https://gitlab.com/muttmua/mutt/wikis/home
     (https://gitlab.com/muttmua/mutt/wikis/home).

IRC
     For the IRC user community, visit channel _#mutt_ on
     irc.libera.chat (https://libera.chat/).

USENET
     For USENET, see the newsgroup comp.mail.mutt (news:comp.mail.mutt).


File: mutt.info,  Node: Contributing to Mutt,  Next: Typographical Conventions,  Prev: Mutt Online Resources,  Up: Introduction

1.5 Contributing to Mutt
========================

There are various ways to contribute to the Mutt project.

   Especially for new users it may be helpful to meet other new and
experienced users to chat about Mutt, talk about problems and share
tricks.

   Since translations of Mutt into other languages are highly
appreciated, the Mutt developers always look for skilled translators
that help improve and continue to maintain stale translations.

   For contributing code patches for new features and bug fixes, please
refer to the developer pages at https://gitlab.com/muttmua/mutt
(https://gitlab.com/muttmua/mutt) for more details.


File: mutt.info,  Node: Typographical Conventions,  Next: Copyright,  Prev: Contributing to Mutt,  Up: Introduction

1.6 Typographical Conventions
=============================

This section lists typographical conventions followed throughout this
manual.  See table *note Typographical conventions for special terms::
for typographical conventions for special terms.


   *Typographical conventions for special terms*

Item                                 Refers to...
‘printf(3)’                          UNIX manual pages, execute ‘man 3
                                     printf’
‘<PageUp>’                           named keys
‘<create-alias>’                     named Mutt function
‘^G’                                 Control+G key combination
$mail_check                          Mutt configuration option
‘$HOME’                              environment variable

   Examples are presented as:


     mutt -v

   Within command synopsis, curly brackets (‘{}’) denote a set of
options of which one is mandatory, square brackets (‘[]’) denote
optional arguments, three dots denote that the argument may be repeated
arbitrary times.


File: mutt.info,  Node: Copyright,  Prev: Typographical Conventions,  Up: Introduction

1.7 Copyright
=============

Mutt is Copyright © 1996-2023 Michael R. Elkins <me@mutt.org> and
others.

   This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by the
Free Software Foundation; either version 2 of the License, or (at your
option) any later version.

   This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
Public License for more details.

   You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software Foundation,
Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.


File: mutt.info,  Node: Getting Started,  Next: Configuration,  Prev: Introduction,  Up: Top

2 Getting Started
*****************

This section is intended as a brief overview of how to use Mutt.  There
are many other features which are described elsewhere in the manual.
There is even more information available in the Mutt FAQ and various web
pages.  See the Mutt homepage (http://www.mutt.org/) for more details.

   The keybindings described in this section are the defaults as
distributed.  Your local system administrator may have altered the
defaults for your site.  You can always type ‘?’ in any menu to display
the current bindings.

   The first thing you need to do is invoke Mutt, simply by typing
‘mutt’ at the command line.  There are various command-line options, see
either the Mutt man page or the reference (*note Command-Line
Options::).

* Menu:

* Core Concepts::
* Screens and Menus::
* Moving Around in Menus::
* Editing Input Fields::
* Reading Mail::
* Sending Mail::
* Forwarding and Bouncing Mail::
* Postponing Mail::
* Encryption and Signing::


File: mutt.info,  Node: Core Concepts,  Next: Screens and Menus,  Up: Getting Started

2.1 Core Concepts
=================

Mutt is a text-based application which interacts with users through
different menus which are mostly line-/entry-based or page-based.  A
line-based menu is the so-called ‘index’ menu (listing all messages of
the currently opened folder) or the ‘alias’ menu (allowing you to select
recipients from a list).  Examples for page-based menus are the ‘pager’
(showing one message at a time) or the ‘help’ menu listing all available
key bindings.

   The user interface consists of a context sensitive help line at the
top, the menu’s contents followed by a context sensitive status line and
finally the command line.  The command line is used to display
informational and error messages as well as for prompts and for entering
interactive commands.

   Mutt is configured through variables which, if the user wants to
permanently use a non-default value, are written to configuration files.
Mutt supports a rich config file syntax to make even complex
configuration files readable and commentable.

   Because Mutt allows for customizing almost all key bindings, there
are so-called ‘functions’ which can be executed manually (using the
command line) or in macros.  Macros allow the user to bind a sequence of
commands to a single key or a short key sequence instead of repeating a
sequence of actions over and over.

   Many commands (such as saving or copying a message to another folder)
can be applied to a single message or a set of messages (so-called
‘tagged’ messages).  To help selecting messages, Mutt provides a rich
set of message patterns (such as recipients, sender, body contents, date
sent/received, etc.)  which can be combined into complex expressions
using the boolean _and_ and _or_ operations as well as negating.  These
patterns can also be used to (for example) search for messages or to
limit the index to show only matching messages.

   Mutt supports a ‘hook’ concept which allows the user to execute
arbitrary configuration commands and functions in certain situations
such as entering a folder, starting a new message or replying to an
existing one.  These hooks can be used to highly customize Mutt’s
behavior including managing multiple identities, customizing the display
for a folder or even implementing auto-archiving based on a per-folder
basis and much more.

   Besides an interactive mode, Mutt can also be used as a command-line
tool to send messages.  It also supports a ‘mailx(1)’-compatible
interface, see *note Command line options:: for a complete list of
command-line options.


File: mutt.info,  Node: Screens and Menus,  Next: Moving Around in Menus,  Prev: Core Concepts,  Up: Getting Started

2.2 Screens and Menus
=====================

* Menu:

* Index::
* Pager::
* File Browser::
* Sidebar::
* Help::
* Compose Menu::
* Alias Menu::
* Attachment Menu::
* List Menu::


File: mutt.info,  Node: Index,  Next: Pager,  Up: Screens and Menus

2.2.1 Index
-----------

The index is the screen that you usually see first when you start Mutt.
It gives an overview over your emails in the currently opened mailbox.
By default, this is your system mailbox.  The information you see in the
index is a list of emails, each with its number on the left, its flags
(new email, important email, email that has been forwarded or replied
to, tagged email, ...), the date when email was sent, its sender, the
email size, and the subject.  Additionally, the index also shows thread
hierarchies: when you reply to an email, and the other person replies
back, you can see the other person’s email in a "sub-tree" below.  This
is especially useful for personal email between a group of people or
when you’ve subscribed to mailing lists.


File: mutt.info,  Node: Pager,  Next: File Browser,  Prev: Index,  Up: Screens and Menus

2.2.2 Pager
-----------

The pager is responsible for showing the email content.  On the top of
the pager you have an overview over the most important email headers
like the sender, the recipient, the subject, and much more information.
How much information you actually see depends on your configuration,
which we’ll describe below.

   Below the headers, you see the email body which usually contains the
message.  If the email contains any attachments, you will see more
information about them below the email body, or, if the attachments are
text files, you can view them directly in the pager.

   To give the user a good overview, it is possible to configure Mutt to
show different things in the pager with different colors.  Virtually
everything that can be described with a regular expression can be
colored, e.g.  URLs, email addresses or smileys.


File: mutt.info,  Node: File Browser,  Next: Sidebar,  Prev: Pager,  Up: Screens and Menus

2.2.3 File Browser
------------------

The file browser is the interface to the local or remote file system.
When selecting a mailbox to open, the browser allows custom sorting of
items, limiting the items shown by a regular expression and a freely
adjustable format of what to display in which way.  It also allows for
easy navigation through the file system when selecting file(s) to attach
to a message, select multiple files to attach and many more.

   Some mail systems can nest mail folders inside other mail folders.
The normal open entry commands in mutt will open the mail folder and you
can’t see the sub-folders.  If you instead use the ‘<descend-directory>’
function it will go into the directory and not open it as a mail
directory.


File: mutt.info,  Node: Sidebar,  Next: Help,  Prev: File Browser,  Up: Screens and Menus

2.2.4 Sidebar
-------------

The Sidebar shows a list of all your mailboxes.  The list can be turned
on and off, it can be themed and the list style can be configured.


File: mutt.info,  Node: Help,  Next: Compose Menu,  Prev: Sidebar,  Up: Screens and Menus

2.2.5 Help
----------

The help screen is meant to offer a quick help to the user.  It lists
the current configuration of key bindings and their associated commands
including a short description, and currently unbound functions that
still need to be associated with a key binding (or alternatively, they
can be called via the Mutt command prompt).


File: mutt.info,  Node: Compose Menu,  Next: Alias Menu,  Prev: Help,  Up: Screens and Menus

2.2.6 Compose Menu
------------------

The compose menu features a split screen containing the information
which really matter before actually sending a message by mail: who gets
the message as what (recipients and who gets what kind of copy).
Additionally, users may set security options like deciding whether to
sign, encrypt or sign and encrypt a message with/for what keys.  Also,
it’s used to attach messages, to re-edit any attachment including the
message itself.


File: mutt.info,  Node: Alias Menu,  Next: Attachment Menu,  Prev: Compose Menu,  Up: Screens and Menus

2.2.7 Alias Menu
----------------

The alias menu is used to help users finding the recipients of messages.
For users who need to contact many people, there’s no need to remember
addresses or names completely because it allows for searching, too.  The
alias mechanism and thus the alias menu also features grouping several
addresses by a shorter nickname, the actual alias, so that users don’t
have to select each single recipient manually.


File: mutt.info,  Node: Attachment Menu,  Next: List Menu,  Prev: Alias Menu,  Up: Screens and Menus

2.2.8 Attachment Menu
---------------------

As will be later discussed in detail, Mutt features a good and stable
MIME implementation, that is, it supports sending and receiving messages
of arbitrary MIME types.  The attachment menu displays a message’s
structure in detail: what content parts are attached to which parent
part (which gives a true tree structure), which type is of what type and
what size.  Single parts may saved, deleted or modified to offer great
and easy access to message’s internals.


File: mutt.info,  Node: List Menu,  Prev: Attachment Menu,  Up: Screens and Menus

2.2.9 List Menu
---------------

The list menu assists with operations on mailing lists.  RFC 2369
defines several interactions with mailing lists and list memberships
that can be specified within the email message: subscribe, unsubscribe,
contact the list owner, etc.  When you invoke the list menu, these
interactions are made accessible as menu options.


File: mutt.info,  Node: Moving Around in Menus,  Next: Editing Input Fields,  Prev: Screens and Menus,  Up: Getting Started

2.3 Moving Around in Menus
==========================

The most important navigation keys common to line- or entry-based menus
are shown in *note Most common navigation keys in entry-based menus::
and in *note Most common navigation keys in page-based menus:: for
page-based menus.


   *Most common navigation keys in entry-based menus*

Key                      Function                 Description
j or <Down>              ‘<next-entry>’           move to the next entry
k or <Up>                ‘<previous-entry>’       move to the previous
                                                  entry
z or <PageDn>            ‘<page-down>’            go to the next page
Z or <PageUp>            ‘<page-up>’              go to the previous
                                                  page
= or <Home>              ‘<first-entry>’          jump to the first
                                                  entry
* or <End>               ‘<last-entry>’           jump to the last entry
q                        ‘<quit>’                 exit the current menu
?                        ‘<help>’                 list all keybindings
                                                  for the current menu


   *Most common navigation keys in page-based menus*

Key                      Function                 Description
J or <Return>            ‘<next-line>’            scroll down one line
<Backspace>              ‘<previous-line>’        scroll up one line
K, <Space> or <PageDn>   ‘<next-page>’            move to the next page
- or <PageUp>            ‘<previous-page>’        move the previous page
<Home>                   ‘<top>’                  move to the top
<End>                    ‘<bottom>’               move to the bottom


File: mutt.info,  Node: Editing Input Fields,  Next: Reading Mail,  Prev: Moving Around in Menus,  Up: Getting Started

2.4 Editing Input Fields
========================

* Menu:

* Introduction: Introduction <1>.
* History::


File: mutt.info,  Node: Introduction <1>,  Next: History,  Up: Editing Input Fields

2.4.1 Introduction
------------------

Mutt has a built-in line editor for inputting text, e.g.  email
addresses or filenames.  The keys used to manipulate text input are very
similar to those of Emacs.  See *note Most common line editor keys:: for
a full reference of available functions, their default key bindings, and
short descriptions.


   *Most common line editor keys*

Key                      Function                 Description
^A or <Home>             ‘<bol>’                  move to the start of
                                                  the line
^B or <Left>             ‘<backward-char>’        move back one char
Esc B                    ‘<backward-word>’        move back one word
^D or <Delete>           ‘<delete-char>’          delete the char under
                                                  the cursor
^E or <End>              ‘<eol>’                  move to the end of the
                                                  line
^F or <Right>            ‘<forward-char>’         move forward one char
Esc F                    ‘<forward-word>’         move forward one word
<Tab>                    ‘<complete>’             complete filename,
                                                  alias, or label
^T                       ‘<complete-query>’       complete address with
                                                  query
^K                       ‘<kill-eol>’             delete to the end of
                                                  the line
Esc d                    ‘<kill-eow>’             delete to the end of
                                                  the word
^W                       ‘<kill-word>’            kill the word in front
                                                  of the cursor
^U                       ‘<kill-line>’            delete entire line
^V                       ‘<quote-char>’           quote the next typed
                                                  key
<Up>                     ‘<history-up>’           recall previous string
                                                  from history
<Down>                   ‘<history-down>’         recall next string
                                                  from history
^R                       ‘<history-search>’       use current input to
                                                  search history
<BackSpace>              ‘<backspace>’            kill the char in front
                                                  of the cursor
Esc u                    ‘<upcase-word>’          convert word to upper
                                                  case
Esc l                    ‘<downcase-word>’        convert word to lower
                                                  case
Esc c                    ‘<capitalize-word>’      capitalize the word
^G                       n/a                      abort
<Return>                 n/a                      finish editing

   ‘^G’ is the generic ‘abort’ key in Mutt.  In addition to the line
editor, it can also be used to abort prompts.  Generally, typing ‘^G’ at
a confirmation prompt or line editor should abort the entire action.

   You can remap the _editor_ functions using the ‘bind’ (*note Changing
the Default Key Bindings::) command.  For example, to make the <Delete>
key delete the character in front of the cursor rather than under, you
could use:


     bind editor <delete> backspace


File: mutt.info,  Node: History,  Prev: Introduction <1>,  Up: Editing Input Fields

2.4.2 History
-------------

Mutt maintains a history for the built-in editor.  The number of items
is controlled by the $history (*note history::) variable and can be made
persistent using an external file specified using $history_file (*note
history_file::) and $save_history (*note save_history::).  You may cycle
through them at an editor prompt by using the ‘<history-up>’ and/or
‘<history-down>’ commands.  Mutt will remember the currently entered
text as you cycle through history, and will wrap around to the initial
entry line.

   Mutt maintains several distinct history lists, one for each of the
following categories:

   • ‘.muttrc’ commands

   • addresses and aliases

   • shell commands

   • filenames

   • mailboxes

   • patterns

   • everything else

   Mutt automatically filters out consecutively repeated items from the
history.  If $history_remove_dups (*note history_remove_dups::) is set,
all repeated items are removed from the history.  It also mimics the
behavior of some shells by ignoring items starting with a space.  The
latter feature can be useful in macros to not clobber the history’s
valuable entries with unwanted entries.


File: mutt.info,  Node: Reading Mail,  Next: Sending Mail,  Prev: Editing Input Fields,  Up: Getting Started

2.5 Reading Mail
================

Similar to many other mail clients, there are two modes in which mail is
read in Mutt.  The first is a list of messages in the mailbox, which is
called the ‘index’ menu in Mutt.  The second mode is the display of the
message contents.  This is called the ‘pager.’

   The next few sections describe the functions provided in each of
these modes.

* Menu:

* The Message Index::
* The Pager::
* Threaded Mode::
* Miscellaneous Functions::


File: mutt.info,  Node: The Message Index,  Next: The Pager,  Up: Reading Mail

2.5.1 The Message Index
-----------------------

Common keys used to navigate through and manage messages in the index
are shown in *note Most common message index keys::.  How messages are
presented in the index menu can be customized using the $index_format
(*note index_format::) variable.


   *Most common message index keys*

Key                                  Description
c                                    change to a different mailbox
Esc c                                change to a folder in read-only
                                     mode
C                                    copy the current message to
                                     another mailbox
Esc C                                decode a message and copy it to a
                                     folder
Esc s                                decode a message and save it to a
                                     folder
D                                    delete messages matching a pattern
d                                    delete the current message
F                                    mark as important
l                                    show messages matching a pattern
N                                    mark message as new
o                                    change the current sort method
O                                    reverse sort the mailbox
q                                    save changes and exit
s                                    save-message
T                                    tag messages matching a pattern
t                                    toggle the tag on a message
Esc t                                toggle tag on entire message
                                     thread
U                                    undelete messages matching a
                                     pattern
u                                    undelete-message
v                                    view-attachments
x                                    abort changes and exit
<Return>                             display-message
<Tab>                                jump to the next new or unread
                                     message
@                                    show the author’s full e-mail
                                     address
$                                    save changes to mailbox
/                                    search
Esc /                                search-reverse
^L                                   clear and redraw the screen
^T                                   untag messages matching a pattern

   In addition to who sent the message and the subject, a short summary
of the disposition of each message is printed beside the message number.
Zero or more of the ‘flags’ in *note Message status flags:: may appear,
some of which can be turned on or off using these functions:
‘<set-flag>’ and ‘<clear-flag>’ bound by default to ‘w’ and ‘W’
respectively.

   Furthermore, the flags in *note Message recipient flags:: reflect who
the message is addressed to.  They can be customized with the $to_chars
(*note to_chars::) variable.


   *Message status flags*

Flag                                 Description
D                                    message is deleted (is marked for
                                     deletion)
d                                    message has attachments marked for
                                     deletion
K                                    contains a PGP public key
N                                    message is new
O                                    message is old
P                                    message is PGP encrypted
r                                    message has been replied to
S                                    message is signed, and the
                                     signature is successfully verified
s                                    message is signed
!                                    message is flagged
*                                    message is tagged
n                                    thread contains new messages (only
                                     if collapsed)
o                                    thread contains old messages (only
                                     if collapsed)


   *Message recipient flags*

Flag                                 Description
+                                    message is to you and you only
T                                    message is to you, but also to or
                                     CC’ed to others
C                                    message is CC’ed to you
F                                    message is from you
L                                    message is sent to a subscribed
                                     mailing list


File: mutt.info,  Node: The Pager,  Next: Threaded Mode,  Prev: The Message Index,  Up: Reading Mail

2.5.2 The Pager
---------------

By default, Mutt uses its built-in pager to display the contents of
messages (an external pager such as ‘less(1)’ can be configured, see
$pager (*note pager::) variable).  The pager is very similar to the Unix
program ‘less(1)’ though not nearly as featureful.


   *Most common pager keys*

Key                                  Description
<Return>                             go down one line
<Space>                              display the next page (or next
                                     message if at the end of a
                                     message)
-                                    go back to the previous page
n                                    search for next match
S                                    skip beyond quoted text
T                                    toggle display of quoted text
?                                    show keybindings
/                                    regular expression search
Esc /                                backward regular expression search
\                                    toggle highlighting of search
                                     matches
^                                    jump to the top of the message

   In addition to key bindings in *note Most common pager keys::, many
of the functions from the index menu are also available in the pager,
such as ‘<delete-message>’ or ‘<copy-message>’ (this is one advantage
over using an external pager to view messages).

   Also, the internal pager supports a couple other advanced features.
For one, it will accept and translate the ‘standard’ nroff sequences for
bold and underline.  These sequences are a series of either the letter,
backspace (‘^H’), the letter again for bold or the letter, backspace,
‘_’ for denoting underline.  Mutt will attempt to display these in bold
and underline respectively if your terminal supports them.  If not, you
can use the bold and underline color (*note Using Color and Mono Video
Attributes::) objects to specify a ‘color’ or mono attribute for them.

   Additionally, the internal pager supports the ANSI escape sequences
for character attributes.  Mutt translates them into the correct color
and character settings.  The sequences Mutt supports are:


     \e[Ps;Ps;..Ps;m

   where _Ps_ can be one of the codes shown in *note ANSI escape
sequences::.


   *ANSI escape sequences*

Escape code                          Description
0                                    All attributes off
1                                    Bold on
4                                    Underline on
5                                    Blink on
7                                    Reverse video on
3_<color>_                           Foreground color is _<color>_ (see
                                     *note Color sequences::)
4_<color>_                           Background color is _<color>_ (see
                                     *note Color sequences::)
38;5;_<color>_                       Foreground color is an 8-bit
                                     _<color>_
48;5;_<color>_                       Background color is an 8-bit
                                     _<color>_


   *Color sequences*

Color code                           Color
0                                    Black
1                                    Red
2                                    Green
3                                    Yellow
4                                    Blue
5                                    Magenta
6                                    Cyan
7                                    White

   Mutt uses these attributes for handling ‘text/enriched’ messages, and
they can also be used by an external autoview (*note MIME Autoview::)
script for highlighting purposes.

     *Note*

     If you change the colors for your display, for example by changing
     the color associated with color2 for your xterm, then that color
     will be used instead of green.

     *Note*

     Note that the search commands in the pager take regular
     expressions, which are not quite the same as the more complex
     patterns (*note Patterns; Searching; Limiting and Tagging::) used
     by the search command in the index.  This is because patterns are
     used to select messages by criteria whereas the pager already
     displays a selected message.


File: mutt.info,  Node: Threaded Mode,  Next: Miscellaneous Functions,  Prev: The Pager,  Up: Reading Mail

2.5.3 Threaded Mode
-------------------

So-called ‘threads’ provide a hierarchy of messages where replies are
linked to their parent message(s).  This organizational form is
extremely useful in mailing lists where different parts of the
discussion diverge.  Mutt displays threads as a tree structure.

   In Mutt, when a mailbox is sorted (*note sort::) by _threads_, there
are a few additional functions available in the _index_ and _pager_
modes as shown in *note Most common thread mode keys::.


   *Most common thread mode keys*

Key                      Function                 Description
^D                       ‘<delete-thread>’        delete all messages in
                                                  the current thread
^U                       ‘<undelete-thread>’      undelete all messages
                                                  in the current thread
^N                       ‘<next-thread>’          jump to the start of
                                                  the next thread
^P                       ‘<previous-thread>’      jump to the start of
                                                  the previous thread
^R                       ‘<read-thread>’          mark the current
                                                  thread as read
Esc d                    ‘<delete-subthread>’     delete all messages in
                                                  the current subthread
Esc u                    ‘<undelete-subthread>’   undelete all messages
                                                  in the current
                                                  subthread
Esc n                    ‘<next-subthread>’       jump to the start of
                                                  the next subthread
Esc p                    ‘<previous-subthread>’   jump to the start of
                                                  the previous subthread
Esc r                    ‘<read-subthread>’       mark the current
                                                  subthread as read
Esc t                    ‘<tag-thread>’           toggle the tag on the
                                                  current thread
Esc v                    ‘<collapse-thread>’      toggle collapse for
                                                  the current thread
Esc V                    ‘<collapse-all>’         toggle collapse for
                                                  all threads
P                        ‘<parent-message>’       jump to parent message
                                                  in thread

   In the _index_, the subject of threaded children messages will be
prepended with thread tree characters.  By default, the subject itself
will not be duplicated unless $hide_thread_subject (*note
hide_thread_subject::) is unset.  Special characters will be added to
the thread tree as detailed in *note Special Thread Characters::.


   *Special Thread Characters*

Character                Description              Notes
&                        hidden message           see $hide_limited
                                                  (*note hide_limited::)
                                                  and $hide_top_limited
                                                  (*note hide_top_limited::)
?                        missing message          see $hide_missing
                                                  (*note hide_missing::)
                                                  and $hide_top_missing
                                                  (*note hide_top_missing::)
*                        pseudo thread            see $strict_threads
                                                  (*note strict_threads::);
                                                  not displayed when
                                                  $narrow_tree
                                                  (*note narrow_tree::)
                                                  is set
=                        duplicate thread         see $duplicate_threads
                                                  (*note duplicate_threads::);
                                                  not displayed when
                                                  $narrow_tree
                                                  (*note narrow_tree::)
                                                  is set

   Collapsing a thread displays only the first message in the thread and
hides the others.  This is useful when threads contain so many messages
that you can only see a handful of threads on the screen.  See %M in
$index_format (*note index_format::).  For example, you could use
‘%?M?(#%03M)&(%4l)?’ in $index_format (*note index_format::) to
optionally display the number of hidden messages if the thread is
collapsed.  The ‘%?<char>?<if-part>&<else-part>?’ syntax is explained in
detail in format string conditionals (*note Conditionals::).

   Technically, every reply should contain a list of its parent messages
in the thread tree, but not all do.  In these cases, Mutt groups them by
subject which can be controlled using the $strict_threads (*note
strict_threads::) variable.


File: mutt.info,  Node: Miscellaneous Functions,  Prev: Threaded Mode,  Up: Reading Mail

2.5.4 Miscellaneous Functions
-----------------------------

In addition, the _index_ and _pager_ menus have these interesting
functions:

‘<check-stats>’
     Calculate statistics for all monitored mailboxes declared using the
     ‘mailboxes’ command.  It will calculate statistics despite
     $mail_check_stats (*note mail_check_stats::) being unset.

‘<create-alias>’(default: a)
     Creates a new alias based upon the current message (or prompts for
     a new one).  Once editing is complete, an ‘alias’ (*note
     Defining/Using Aliases::) command is added to the file specified by
     the $alias_file (*note alias_file::) variable for future use

          *Note*

          Mutt does not read the $alias_file (*note alias_file::) upon
          startup so you must explicitly ‘source’ (*note Reading
          Initialization Commands From Another File::) the file.

‘<check-traditional-pgp>’(default: Esc P)
     This function will search the current message for content signed or
     encrypted with PGP the ‘traditional’ way, that is, without proper
     MIME tagging.  Technically, this function will temporarily change
     the MIME content types of the body parts containing PGP data; this
     is similar to the ‘<edit-type>’ (*note edit-type::) function’s
     effect.

‘<edit>’(default: e)
     This command (available in the index and pager) allows you to edit
     the raw current message as it’s present in the mail folder.  After
     you have finished editing, the changed message will be appended to
     the current folder, and the original message will be marked for
     deletion; if the message is unchanged it won’t be replaced.

‘<edit-type>’(default: ^E on the attachment menu, and in the pager and index menus; ^T on the compose menu)
     This command is used to temporarily edit an attachment’s content
     type to fix, for instance, bogus character set parameters.  When
     invoked from the index or from the pager, you’ll have the
     opportunity to edit the top-level attachment’s content type.  On
     the attachment menu (*note The Attachment Menu::), you can change
     any attachment’s content type.  These changes are not persistent,
     and get lost upon changing folders.

     Note that this command is also available on the compose menu (*note
     The Compose Menu::).  There, it’s used to fine-tune the properties
     of attachments you are going to send.

‘<enter-command>’(default: ‘:’)
     This command is used to execute any command you would normally put
     in a configuration file.  A common use is to check the settings of
     variables, or in conjunction with macros (*note Keyboard Macros::)
     to change settings on the fly.

‘<extract-keys>’(default: ^K)
     This command extracts PGP public keys from the current or tagged
     message(s) and adds them to your PGP public key ring.

‘<forget-passphrase>’(default: ^F)
     This command wipes the passphrase(s) from memory.  It is useful, if
     you misspelled the passphrase.

‘<list-reply>’(default: L)
     Reply to the current or tagged message(s) by extracting any
     addresses which match the regular expressions given by the ‘lists’
     or ‘subscribe’ (*note Mailing Lists <1>::) commands, but also honor
     any ‘Mail-Followup-To’ header(s) if the $honor_followup_to (*note
     honor_followup_to::) configuration variable is set.  In addition,
     the ‘List-Post’ header field is examined for ‘mailto:’ URLs
     specifying a mailing list address.  Using this when replying to
     messages posted to mailing lists helps avoid duplicate copies being
     sent to the author of the message you are replying to.

‘<pipe-message>’(default: |)
     Asks for an external Unix command and pipes the current or tagged
     message(s) to it.  The variables $pipe_decode (*note
     pipe_decode::), $pipe_decode_weed (*note pipe_decode_weed::),
     $pipe_split (*note pipe_split::), $pipe_sep (*note pipe_sep::) and
     $wait_key (*note wait_key::) control the exact behavior of this
     function.

‘<resend-message>’(default: Esc e)
     Mutt takes the current message as a template for a new message.
     This function is best described as "recall from arbitrary folders".
     It can conveniently be used to forward MIME messages while
     preserving the original mail structure.  Note that the amount of
     headers included here depends on the value of the $weed (*note
     weed::) variable.

     This function is also available from the attachment menu.  You can
     use this to easily resend a message which was included with a
     bounce message as a ‘message/rfc822’ body part.

‘<shell-escape>’(default: !)
     Asks for an external Unix command and executes it.  The $wait_key
     (*note wait_key::) can be used to control whether Mutt will wait
     for a key to be pressed when the command returns (presumably to let
     the user read the output of the command), based on the return
     status of the named command.  If no command is given, an
     interactive shell is executed.

‘<skip-headers>’(default: H)
     This function will skip past the headers of the current message.

‘<skip-quoted>’(default: S)
     This function will go to the next line of non-quoted text which
     comes after a line of quoted text in the internal pager.

‘<toggle-quoted>’(default: T)
     The pager uses the $quote_regexp (*note quote_regexp::) variable to
     detect quoted text when displaying the body of the message.  This
     function toggles the display of the quoted material in the message.
     It is particularly useful when being interested in just the
     response and there is a large amount of quoted text in the way.


File: mutt.info,  Node: Sending Mail,  Next: Forwarding and Bouncing Mail,  Prev: Reading Mail,  Up: Getting Started

2.6 Sending Mail
================

* Menu:

* Introduction: Introduction <2>.
* Editing the Message Header::
* Sending Cryptographically Signed/Encrypted Messages::
* Sending Format=Flowed Messages::
* Background Editing::


File: mutt.info,  Node: Introduction <2>,  Next: Editing the Message Header,  Up: Sending Mail

2.6.1 Introduction
------------------

The bindings shown in *note Most common mail sending keys:: are
available in the _index_ and _pager_ to start a new message.


   *Most common mail sending keys*

Key                      Function                 Description
m                        ‘<mail>’                 compose a new message
r                        ‘<reply>’                reply to sender
g                        ‘<group-reply>’          reply to all
                                                  recipients
                         ‘<group-chat-reply>’     reply to all
                                                  recipients preserving
                                                  To/Cc
L                        ‘<list-reply>’           reply to mailing list
                                                  address
f                        ‘<forward>’              forward message
b                        ‘<bounce>’               bounce (remail)
                                                  message
Esc k                    ‘<mail-key>’             mail a PGP public key
                                                  to someone

   _Bouncing_ a message sends the message as-is to the recipient you
specify.  _Forwarding_ a message allows you to add comments or modify
the message you are forwarding.  These items are discussed in greater
detail in the next section ‘Forwarding and Bouncing Mail (*note
Forwarding and Bouncing Mail::).’

   Mutt will then enter the _compose_ menu and prompt you for the
recipients to place on the ‘To:’ header field when you hit ‘m’ to start
a new message.  Next, it will ask you for the ‘Subject:’ field for the
message, providing a default if you are replying to or forwarding a
message.  You again have the chance to adjust recipients, subject, and
security settings right before actually sending the message.  See also
$askcc (*note askcc::), $askbcc (*note askbcc::), $autoedit (*note
autoedit::), $bounce (*note bounce::), $fast_reply (*note fast_reply::),
and $include (*note include::) for changing how and if Mutt asks these
questions.

   When replying, Mutt fills these fields with proper values depending
on the reply type.  The types of replying supported are:

Simple reply
     Reply to the author directly.

Group reply
     Reply to the author; cc all other recipients; consults ‘alternates’
     (*note Alternative Addresses::) and excludes you.

Group Chat reply
     Reply to the author and other recipients in the To list; cc other
     recipients in the Cc list; consults ‘alternates’ (*note Alternative
     Addresses::) and excludes you.

List reply
     Reply to all mailing list addresses found, either specified via
     configuration or auto-detected.  See *note Mailing Lists: Mailing
     Lists <1>. for details.

   After getting recipients for new messages, forwards or replies, Mutt
will then automatically start your $editor (*note editor::) on the
message body.  If the $edit_headers (*note edit_headers::) variable is
set, the headers will be at the top of the message in your editor; the
message body should start on a new line after the existing blank line at
the end of headers.  Any messages you are replying to will be added in
sort order to the message, with appropriate $attribution (*note
attribution::), $indent_string (*note indent_string::) and
$post_indent_string (*note post_indent_string::).  When forwarding a
message, if the $mime_forward (*note mime_forward::) variable is unset,
a copy of the forwarded message will be included.  If you have specified
a $signature (*note signature::), it will be appended to the message.

   Once you have finished editing the body of your mail message, you are
returned to the _compose_ menu providing the functions shown in *note
Most common compose menu keys:: to modify, send or postpone the message.


   *Most common compose menu keys*

Key                      Function                 Description
a                        ‘<attach-file>’          attach a file
A                        ‘<attach-message>’       attach message(s) to
                                                  the message
Esc k                    ‘<attach-key>’           attach a PGP public
                                                  key
d                        ‘<edit-description>’     edit description on
                                                  attachment
D                        ‘<detach-file>’          detach a file
t                        ‘<edit-to>’              edit the To field
Esc f                    ‘<edit-from>’            edit the From field
r                        ‘<edit-reply-to>’        edit the Reply-To
                                                  field
c                        ‘<edit-cc>’              edit the Cc field
b                        ‘<edit-bcc>’             edit the Bcc field
y                        ‘<send-message>’         send the message
s                        ‘<edit-subject>’         edit the Subject
S                        ‘<smime-menu>’           select S/MIME options
f                        ‘<edit-fcc>’             specify an ‘Fcc’
                                                  mailbox
p                        ‘<pgp-menu>’             select PGP options
P                        ‘<postpone-message>’     postpone this message
                                                  until later
q                        ‘<quit>’                 quit (abort) sending
                                                  the message
w                        ‘<write-fcc>’            write the message to a
                                                  folder
i                        ‘<ispell>’               check spelling (if
                                                  available on your
                                                  system)
^F                       ‘<forget-passphrase>’    wipe passphrase(s)
                                                  from memory

   The compose menu is also used to edit the attachments for a message
which can be either files or other messages.  The ‘<attach-message>’
function to will prompt you for a folder to attach messages from.  You
can now tag messages in that folder and they will be attached to the
message you are sending.

     *Note*

     Note that certain operations like composing a new mail, replying,
     forwarding, etc.  are not permitted when you are in that folder.
     The %r in $status_format (*note status_format::) will change to a
     ‘A’ to indicate that you are in attach-message mode.

   After exiting the compose menu via ‘<send-message>’, the message will
be sent.  If configured and enabled, this can happen via mixmaster
(*note Sending Anonymous Messages via Mixmaster::) or $smtp_url (*note
SMTP Support::).  Otherwise $sendmail (*note sendmail::) will be
invoked.  Prior to version 1.13, Mutt enabled $write_bcc (*note
write_bcc::) by default, assuming the MTA would automatically remove a
‘Bcc:’ header as part of delivery.  Starting with 1.13, the option is
unset by default, but no longer affects the fcc copy of the message.


File: mutt.info,  Node: Editing the Message Header,  Next: Sending Cryptographically Signed/Encrypted Messages,  Prev: Introduction <2>,  Up: Sending Mail

2.6.2 Editing the Message Header
--------------------------------

When editing the header because of $edit_headers (*note edit_headers::)
being set, there are a several pseudo headers available which will not
be included in sent messages but trigger special Mutt behavior.

* Menu:

* Fcc; Pseudo Header::
* Attach; Pseudo Header::
* Pgp; Pseudo Header::
* In-Reply-To; Header::


File: mutt.info,  Node: Fcc; Pseudo Header,  Next: Attach; Pseudo Header,  Up: Editing the Message Header

2.6.2.1 Fcc: Pseudo Header
..........................

If you specify

   ‘Fcc:’ _filename_

   as a header, Mutt will pick up _filename_ just as if you had used the
‘<edit-fcc>’ function in the _compose_ menu.  It can later be changed
from the compose menu.


File: mutt.info,  Node: Attach; Pseudo Header,  Next: Pgp; Pseudo Header,  Prev: Fcc; Pseudo Header,  Up: Editing the Message Header

2.6.2.2 Attach: Pseudo Header
.............................

You can also attach files to your message by specifying

   ‘Attach:’ _filename_ [ _description_ ]

   where _filename_ is the file to attach and _description_ is an
optional string to use as the description of the attached file.  Spaces
in filenames have to be escaped using backslash (‘\’).  The file can be
removed as well as more added from the compose menu.


File: mutt.info,  Node: Pgp; Pseudo Header,  Next: In-Reply-To; Header,  Prev: Attach; Pseudo Header,  Up: Editing the Message Header

2.6.2.3 Pgp: Pseudo Header
..........................

If you want to use PGP, you can specify

   ‘Pgp:’ [ ‘E’ | ‘S’ | ‘S’_<id>_ ]

   ‘E’ selects encryption, ‘S’ selects signing and ‘S<id>’ selects
signing with the given key, setting $pgp_sign_as (*note pgp_sign_as::)
for the duration of the message composition session.  The selection can
later be changed in the compose menu.


File: mutt.info,  Node: In-Reply-To; Header,  Prev: Pgp; Pseudo Header,  Up: Editing the Message Header

2.6.2.4 In-Reply-To: Header
...........................

When replying to messages, the _In-Reply-To:_ header contains the
Message-Id of the message(s) you reply to.  If you remove or modify its
value, Mutt will not generate a _References:_ field, which allows you to
create a new message thread, for example to create a new message to a
mailing list without having to enter the mailing list’s address.

   If you intend to start a new thread by replying, please make really
sure you remove the _In-Reply-To:_ header in your editor.  Otherwise,
though you’ll produce a technically valid reply, some netiquette
guardians will be annoyed by this so-called ‘thread hijacking’.


File: mutt.info,  Node: Sending Cryptographically Signed/Encrypted Messages,  Next: Sending Format=Flowed Messages,  Prev: Editing the Message Header,  Up: Sending Mail

2.6.3 Sending Cryptographically Signed/Encrypted Messages
---------------------------------------------------------

If you have told Mutt to PGP or S/MIME encrypt a message, it will guide
you through a key selection process when you try to send the message.
Mutt will not ask you any questions about keys which have a certified
user ID matching one of the message recipients’ mail addresses.
However, there may be situations in which there are several keys, weakly
certified user ID fields, or where no matching keys can be found.

   In these cases, you are dropped into a menu with a list of keys from
which you can select one.  When you quit this menu, or Mutt can’t find
any matching keys, you are prompted for a user ID. You can, as usually,
abort this prompt using ‘^G’.  When you do so, Mutt will return to the
compose screen.

   Once you have successfully finished the key selection, the message
will be encrypted using the selected public keys when sent out.

   To ensure you can view encrypted messages you have sent, you may wish
to set $pgp_self_encrypt (*note pgp_self_encrypt::) and $pgp_default_key
(*note pgp_default_key::) for PGP, or $smime_self_encrypt (*note
smime_self_encrypt::) and $smime_default_key (*note smime_default_key::)
for S/MIME.

   Most fields of the entries in the key selection menu (see also
$pgp_entry_format (*note pgp_entry_format::)) have obvious meanings.
But some explanations on the capabilities, flags, and validity fields
are in order.

   The flags sequence (‘%f’) will expand to one of the flags in *note
PGP key menu flags::.


   *PGP key menu flags*

Flag                                 Description
R                                    The key has been revoked and can’t
                                     be used.
X                                    The key is expired and can’t be
                                     used.
d                                    You have marked the key as
                                     disabled.
c                                    There are unknown critical
                                     self-signature packets.

   The capabilities field (‘%c’) expands to a two-character sequence
representing a key’s capabilities.  The first character gives the key’s
encryption capabilities: A minus sign (‘-’) means that the key cannot be
used for encryption.  A dot (‘.’) means that it’s marked as a signature
key in one of the user IDs, but may also be used for encryption.  The
letter ‘e’ indicates that this key can be used for encryption.

   The second character indicates the key’s signing capabilities.  Once
again, a ‘-’ implies ‘not for signing’, ‘.’ implies that the key is
marked as an encryption key in one of the user-ids, and ‘s’ denotes a
key which can be used for signing.

   Finally, the validity field (‘%t’) indicates how well-certified a
user-id is.  A question mark (‘?’) indicates undefined validity, a minus
character (‘-’) marks an untrusted association, a space character means
a partially trusted association, and a plus character (‘+’) indicates
complete validity.


File: mutt.info,  Node: Sending Format=Flowed Messages,  Next: Background Editing,  Prev: Sending Cryptographically Signed/Encrypted Messages,  Up: Sending Mail

2.6.4 Sending Format=Flowed Messages
------------------------------------

* Menu:

* Concept::
* Mutt Support::
* Editor Considerations::
* Reformatting::


File: mutt.info,  Node: Concept,  Next: Mutt Support,  Up: Sending Format=Flowed Messages

2.6.4.1 Concept
...............

‘format=flowed’-style messages (or ‘f=f’ for short) are ‘text/plain’
messages that consist of paragraphs which a receiver’s mail client may
reformat to its own needs which mostly means to customize line lengths
regardless of what the sender sent.  Technically this is achieved by
letting lines of a ‘flowable’ paragraph end in spaces except for the
last line.

   While for text-mode clients like Mutt it’s the best way to assume
only a standard 80x25 character cell terminal, it may be desired to let
the receiver decide completely how to view a message.


File: mutt.info,  Node: Mutt Support,  Next: Editor Considerations,  Prev: Concept,  Up: Sending Format=Flowed Messages

2.6.4.2 Mutt Support
....................

Mutt only supports setting the required ‘format=flowed’ MIME parameter
on outgoing messages if the $text_flowed (*note text_flowed::) variable
is set, specifically it does not add the trailing spaces.

   After editing, Mutt properly space-stuffs the message.
_Space-stuffing_ is required by RfC3676 defining ‘format=flowed’ and
means to prepend a space to:

   • all lines starting with a space

   • lines starting with the word ‘‘From’’ followed by space

   • all lines starting with ‘‘>’’ which is not intended to be a quote
     character

     *Note*

     Mutt only supports space-stuffing for the first two types of lines
     but not for the third: It is impossible to safely detect whether a
     leading ‘>’ character starts a quote or not.

   All leading spaces are to be removed by receiving clients to restore
the original message prior to further processing.


File: mutt.info,  Node: Editor Considerations,  Next: Reformatting,  Prev: Mutt Support,  Up: Sending Format=Flowed Messages

2.6.4.3 Editor Considerations
.............................

As Mutt provides no additional features to compose ‘f=f’ messages, it’s
completely up to the user and his editor to produce proper messages.
Please consider your editor’s documentation if you intend to send ‘f=f’
messages.

   For example, _vim_ provides the ‘w’ flag for its ‘formatoptions’
setting to assist in creating ‘f=f’ messages, see ‘:help fo-table’ for
details.


File: mutt.info,  Node: Reformatting,  Prev: Editor Considerations,  Up: Sending Format=Flowed Messages

2.6.4.4 Reformatting
....................

Mutt has some support for reformatting when viewing and replying to
‘format=flowed’ messages.  In order to take advantage of these,
$reflow_text (*note reflow_text::) must be set.

   • Paragraphs are automatically reflowed and wrapped at a width
     specified by $reflow_wrap (*note reflow_wrap::).

   • In its original format, the quoting style of ‘format=flowed’
     messages can be difficult to read, and doesn’t intermix well with
     non-flowed replies.  Setting $reflow_space_quotes (*note
     reflow_space_quotes::) adds spaces after each level of quoting when
     in the pager and replying in a non-flowed format (i.e.  with
     $text_flowed (*note text_flowed::) unset).

   • If $reflow_space_quotes (*note reflow_space_quotes::) is unset,
     mutt will still add one trailing space after all the quotes in the
     pager (but not when replying).


File: mutt.info,  Node: Background Editing,  Prev: Sending Format=Flowed Messages,  Up: Sending Mail

2.6.5 Background Editing
------------------------

If $editor (*note editor::) is set to a graphical editor, or a script
such as contrib/bgedit-screen-tmux.sh
(https://gitlab.com/muttmua/mutt/tree/master/contrib/bgedit-screen-tmux.sh)
if running inside GNU Screen or tmux, you can run the editor in the
background by setting $background_edit (*note background_edit::).

   If set, Mutt will display a landing page while the editor runs.  When
the editor exits, message composition will resume automatically.
Alternatively, you can ‘<exit>’ from the landing page, which will return
you to the message index.  This allows viewing other messages, changing
mailboxes, even starting a new message composition session - all while
the first editor session is still running.

   Backgrounded message composition sessions can be viewed via
‘<background-compose-menu>’ in the index and pager, by default bound to
‘‘B’’.  If there is only a single backgrounded session, which has
already exited, that session will automatically resume.  Otherwise the
list will be displayed, and a particular session can be selected.
$background_format (*note background_format::) controls the format
string used for the menu.

   In case the open mailbox is changed while a reply is backgrounded,
Mutt keeps track of the original mailbox.  After sending, Mutt will
attempt to reopen the original mailbox, if needed, and set reply flags
appropriately.  This won’t affect your currently open mailbox, but may
make setting flags a bit slower due to the need to reopen the original
mailbox behind the scenes.

   One complication with backgrounded compose sessions is the config
changes caused by send, reply, and folder hooks (*note Using Hooks::).
These can get triggered by a new message composition session, or by
changing folders during a backgrounded session.  To help lessen these
problems, Mutt takes a snapshot of certain configuration variables and
stores them with each editing session when it is backgrounded.  When the
session is resumed, those stored settings will temporarily be restored,
and removed again when the session finishes (or is backgrounded again).

   Mutt will save all ‘boolean’ and ‘quadoption’ configuration
variables, the current folder (which will be used for ‘^’ mailbox
shortcut expansion), along with: $folder (*note folder::), $record
(*note record::), $postponed (*note postponed::), $envelope_from_address
(*note envelope_from_address::), $from (*note from::), $sendmail (*note
sendmail::), $smtp_url (*note smtp_url::), $pgp_sign_as (*note
pgp_sign_as::), $smime_sign_as (*note smime_sign_as::), and
$smime_encrypt_with (*note smime_encrypt_with::).  It’s not feasible to
backup all variables, but if you believe we’ve missed an important
setting, please let the developers know.

   To help prevent forgetting about backgrounded sessions,
$background_confirm_quit (*note background_confirm_quit::) will prompt
before exiting, in addition to $quit (*note quit::).  Additionally, the
‘%B’ expando in $status_format (*note status_format::) displays the
number of backgrounded compose sessions.

   Background editing is available for most, but not all, message
composition in Mutt.  Sending from the command line disables background
editing, because there is no index to return to.


File: mutt.info,  Node: Forwarding and Bouncing Mail,  Next: Postponing Mail,  Prev: Sending Mail,  Up: Getting Started

2.7 Forwarding and Bouncing Mail
================================

Bouncing and forwarding let you send an existing message to recipients
that you specify.  Bouncing a message sends a verbatim copy of a message
to alternative addresses as if they were the message’s original
recipients specified in the Bcc header.  Forwarding a message, on the
other hand, allows you to modify the message before it is resent (for
example, by adding your own comments).  Bouncing is done using the
‘<bounce>’ function and forwarding using the ‘<forward>’ function bound
to ‘b’ and ‘f’ respectively.

   Forwarding can be done by including the original message in the new
message’s body (surrounded by indicating lines: see
$forward_attribution_intro (*note forward_attribution_intro::) and
$forward_attribution_trailer (*note forward_attribution_trailer::)) or
including it as a MIME attachment, depending on the value of the
$mime_forward (*note mime_forward::) variable.  Decoding of attachments,
like in the pager, can be controlled by the $forward_decode (*note
forward_decode::) and $mime_forward_decode (*note mime_forward_decode::)
variables, respectively.  The desired forwarding format may depend on
the content, therefore $mime_forward (*note mime_forward::) is a
quadoption which, for example, can be set to ‘ask-no’.

   Mutt’s default ($mime_forward (*note mime_forward::)=‘no’ and
$forward_decode (*note forward_decode::)=‘yes’) is to use standard
inline forwarding.  In that mode all text-decodable parts are included
in the new message body.  Other attachments from the original email can
also be attached to the new message, based on the quadoption
$forward_attachments (*note forward_attachments::).

   The inclusion of headers is controlled by the current setting of the
$weed (*note weed::) variable, unless $mime_forward (*note
mime_forward::) is set.  The subject of the email is controlled by
$forward_format (*note forward_format::).

   Editing the message to forward follows the same procedure as sending
or replying to a message does, but can be disabled via the quadoption
$forward_edit (*note forward_edit::).


File: mutt.info,  Node: Postponing Mail,  Next: Encryption and Signing,  Prev: Forwarding and Bouncing Mail,  Up: Getting Started

2.8 Postponing Mail
===================

At times it is desirable to delay sending a message that you have
already begun to compose.  When the ‘<postpone-message>’ function is
used in the _compose_ menu, the body of your message and attachments are
stored in the mailbox specified by the $postponed (*note postponed::)
variable.  This means that you can recall the message even if you exit
Mutt and then restart it at a later time.

   Once a message is postponed, there are several ways to resume it.
From the command line you can use the ‘-p’ option, or if you compose a
new message from the _index_ or _pager_ you will be prompted if
postponed messages exist.  If multiple messages are currently postponed,
the _postponed_ menu will pop up and you can select which message you
would like to resume.

     *Note*

     If you postpone a reply to a message, the reply setting of the
     message is only updated when you actually finish the message and
     send it.  Also, you must be in the same folder with the message you
     replied to for the status of the message to be updated.

   See also the $postpone (*note postpone::) quad-option.


File: mutt.info,  Node: Encryption and Signing,  Prev: Postponing Mail,  Up: Getting Started

2.9 Encryption and Signing
==========================

Mutt supports encrypting and signing emails when used interactively.  In
batch mode, cryptographic operations are disabled, so these options
can’t be used to sign an email sent via a cron job, for instance.

   OpenPGP and S/MIME are enabled in one of two ways: ‘classic mode’ or
GPGME. The former invokes external programs to perform the various
operations; it is better tested and more flexible, but requires some
configuration.  The latter uses the GnuPG project’s GPGME library.

   To enable ‘classic mode’, ensure GPGME is disabled and use the
‘gpg.rc’ or ‘smime.rc’ files that come with mutt.  These are typically
installed under ‘/usr/local/share/doc/mutt/samples/’.  Source them,
either directly or by copying them to your .mutt directory and sourcing
them.  Sourcing them directly from ‘/usr/local/share/doc/mutt/samples/’
has the benefit of automatically using fixes and security improvements
to the command invocations, and is recommended.


     unset crypt_use_gpgme
     source /usr/local/share/doc/mutt/samples/gpg.rc
     source /usr/local/share/doc/mutt/samples/smime.rc

   To use GPGME instead, simply ensure the option is enabled in your
.muttrc:


     set crypt_use_gpgme

* Menu:

* OpenPGP Configuration::
* S/MIME Configuration::


File: mutt.info,  Node: OpenPGP Configuration,  Next: S/MIME Configuration,  Up: Encryption and Signing

2.9.1 OpenPGP Configuration
---------------------------

The two most important settings are $pgp_default_key (*note
pgp_default_key::) and $pgp_sign_as (*note pgp_sign_as::).  To perform
encryption, you must set the first variable.  If you have a separate
signing key, or only have a signing key, then set the second.  Most
people will only need to set $pgp_default_key (*note pgp_default_key::).

   Starting with version 2.1.0, GnuPG automatically uses an ‘agent’ to
prompt for your passphrase.  If you are using a version older than that,
you’ll need to ensure an agent is running (alternatively, you can unset
$pgp_use_gpg_agent (*note pgp_use_gpg_agent::) and Mutt will prompt you
for your passphrase).  The agent in turn uses a ‘pinentry’ program to
display the prompt.  There are many different kinds of pinentry programs
that can be used: qt, gtk2, gnome3, fltk, and curses.  However, Mutt
does _not_ work properly with the tty pinentry program.  Please ensure
you have one of the GUI or curses pinentry programs installed and
configured to be the default for your system.


File: mutt.info,  Node: S/MIME Configuration,  Prev: OpenPGP Configuration,  Up: Encryption and Signing

2.9.2 S/MIME Configuration
--------------------------

As with OpenPGP, the two most important settings are $smime_default_key
(*note smime_default_key::) and $smime_sign_as (*note smime_sign_as::).
To perform encryption and decryption, you must set the first variable.
If you have a separate signing key, or only have a signing key, then set
the second.  Most people will only need to set $smime_default_key (*note
smime_default_key::).

   In ‘classic mode’, keys and certificates are managed by the
‘smime_keys’ program that comes with Mutt.  By default they are stored
under ‘~/.smime/’.  (This is set by the ‘smime.rc’ file with
$smime_certificates (*note smime_certificates::) and $smime_keys (*note
smime_keys::).)  To initialize this directory, use the command
‘‘smime_keys init’’ from a shell prompt.  The program can be then be
used to import and list certificates.  You may also want to periodically
run ‘‘smime_keys refresh’’ to update status flags for your certificates.


File: mutt.info,  Node: Configuration,  Next: Advanced Usage,  Prev: Getting Started,  Up: Top

3 Configuration
***************

* Menu:

* Location of Initialization Files::
* Starter Muttrc::
* Syntax of Initialization Files::
* Address Groups::
* Defining/Using Aliases::
* Changing the Default Key Bindings::
* Changing the current working directory::
* Defining Aliases for Character Sets::
* Setting Variables Based Upon Mailbox::
* Keyboard Macros::
* Using Color and Mono Video Attributes::
* Message Header Display::
* Alternative Addresses::
* Mailing Lists: Mailing Lists <1>.
* Using Multiple Spool Mailboxes::
* Monitoring Incoming Mail::
* User-Defined Headers::
* Specify Default Save Mailbox::
* Specify Default Fcc; Mailbox When Composing::
* Specify Default Save Filename and Default Fcc; Mailbox at Once::
* Change Settings Based Upon Message Recipients::
* Change Settings Before Formatting a Message::
* Choosing the Cryptographic Key of the Recipient::
* Dynamically Changing $index_format using Patterns::
* Adding Key Sequences to the Keyboard Buffer::
* Executing Functions::
* Message Scoring::
* Spam Detection::
* Setting and Querying Variables::
* Reading Initialization Commands From Another File::
* Removing Hooks::
* Format Strings::
* Control allowed header fields in a mailto; URL::


File: mutt.info,  Node: Location of Initialization Files,  Next: Starter Muttrc,  Up: Configuration

3.1 Location of Initialization Files
====================================

While the default configuration (or ‘preferences’) make Mutt usable
right out of the box, it is often desirable to tailor Mutt to suit your
own tastes.  When Mutt is first invoked, it will attempt to read the
‘system’ configuration file (defaults set by your local system
administrator), unless the ‘-n’ command line (*note Command-Line
Options::) option is specified.  This file is typically
‘/usr/local/share/mutt/Muttrc’ or ‘/etc/Muttrc’.  Mutt will next look
for a file named ‘.muttrc’ in your home directory.  If this file does
not exist and your home directory has a subdirectory named ‘.mutt’, Mutt
tries to load a file named ‘.mutt/muttrc’.  If still not found, Mutt
will try ‘$XDG_CONFIG_HOME/mutt/muttrc’.

   ‘.muttrc’ is the file where you will usually place your commands
(*note Configuration Commands::) to configure Mutt.

   In addition, Mutt supports version specific configuration files that
are parsed instead of the default files as explained above.  For
instance, if your system has a ‘Muttrc-0.88’ file in the system
configuration directory, and you are running version 0.88 of Mutt, this
file will be sourced instead of the ‘Muttrc’ file.  The same is true of
the user configuration file, if you have a file ‘.muttrc-0.88.6’ in your
home directory, when you run Mutt version 0.88.6, it will source this
file instead of the default ‘.muttrc’ file.  The version number is the
same which is visible using the ‘-v’ command line (*note Command-Line
Options::) switch or using the ‘show-version’ key (default: V) from the
index menu.


File: mutt.info,  Node: Starter Muttrc,  Next: Syntax of Initialization Files,  Prev: Location of Initialization Files,  Up: Configuration

3.2 Starter Muttrc
==================

Mutt is highly configurable because it’s _meant_ to be customized to
your needs and preferences.  However, this configurability can make it
difficult when just getting started.  A few sample muttrc files come
with mutt, under ‘doc/mutt/samples/’.  Among them, sample.muttrc-starter
(https://gitlab.com/muttmua/mutt/tree/master/contrib/sample.muttrc-starter)
is a basic example config with a few suggested settings and pointers to
useful programs.


File: mutt.info,  Node: Syntax of Initialization Files,  Next: Address Groups,  Prev: Starter Muttrc,  Up: Configuration

3.3 Syntax of Initialization Files
==================================

An initialization file consists of a series of commands (*note
Configuration Commands::).  Each line of the file may contain one or
more commands.  When multiple commands are used, they must be separated
by a semicolon (‘;’).


   *Multiple configuration commands per line*


     set realname='Mutt user' ; ignore x-

   The hash mark, or pound sign (‘#’), is used as a ‘comment’ character.
You can use it to annotate your initialization file.  All text after the
comment character to the end of the line is ignored.


   *Commenting configuration files*


     my_hdr X-Disclaimer: Why are you listening to me? # This is a comment

   Single quotes (‘’’) and double quotes (‘"’) can be used to quote
strings which contain spaces or other special characters.  The
difference between the two types of quotes is similar to that of many
popular shell programs, namely that a single quote is used to specify a
literal string (one that is not interpreted for shell variables or
quoting with a backslash [see next paragraph]), while double quotes
indicate a string for which should be evaluated.  For example, backticks
are evaluated inside of double quotes, but _not_ for single quotes.

   ‘\’ quotes the next character, just as in shells such as bash and
zsh.  For example, if want to put quotes ‘"’ inside of a string, you can
use ‘\’ to force the next character to be a literal instead of
interpreted character.


   *Escaping quotes in configuration files*


     set realname="Michael \"MuttDude\" Elkins"

   ‘\\’ means to insert a literal ‘\’ into the line.  ‘\n’ and ‘\r’ have
their usual C meanings of linefeed and carriage-return, respectively.

   A ‘\’ at the end of a line can be used to split commands over
multiple lines as it ‘escapes’ the line end, provided that the split
points don’t appear in the middle of command names.  Lines are first
concatenated before interpretation so that a multi-line can be commented
by commenting out the first line only.


   *Splitting long configuration commands over several lines*


     set status_format="some very \
     long value split \
     over several lines"

   It is also possible to substitute the output of a Unix command in an
initialization file.  This is accomplished by enclosing the command in
backticks (“).  In *note Using external command's output in
configuration files::, the output of the Unix command ‘uname -a’ will be
substituted before the line is parsed.  Since initialization files are
line oriented, only the first line of output from the Unix command will
be substituted.


   *Using external command’s output in configuration files*


     my_hdr X-Operating-System: `uname -a`

   To avoid the output of backticks being parsed, place them inside
double quotes.  In *note Preventing the output of backticks from being
parsed::, the output of the gpg decryption is assigned directly to
$imap_pass, so that special characters in the password (e.g.‘’’, ‘#’,
‘$’) are not parsed and interpreted specially by mutt.


   *Preventing the output of backticks from being parsed*


     set imap_pass="`gpg --batch -q --decrypt ~/.mutt/account.gpg`"

   Both environment variables and Mutt variables can be accessed by
prepending ‘$’ to the name of the variable.  For example,


   *Using environment variables in configuration files*


     set record=+sent_on_$HOSTNAME

   will cause Mutt to save outgoing messages to a folder named
‘sent_on_kremvax’ if the environment variable ‘$HOSTNAME’ is set to
‘kremvax.’ (See $record (*note record::) for details.)

   Mutt expands the variable when it is assigned, not when it is used.
If the value of a variable on the right-hand side of an assignment
changes after the assignment, the variable on the left-hand side will
not be affected.

   If $muttlisp_inline_eval (*note muttlisp_inline_eval::) is set, an
unquoted parenthesis-enclosed expression will be evaluated as MuttLisp.
See the Using MuttLisp (*note Using MuttLisp [EXPERIMENTAL]::) section
for more details.


   *Using MuttLisp expressions*


     set signature = \
       (if (equal $my_name "Kevin McCarthy") ~/kevin.sig ~/other.sig)

   The commands understood by Mutt are explained in the next paragraphs.
For a complete list, see the command reference (*note Configuration
Commands::).

   All configuration files are expected to be in the current locale as
specified by the $charset (*note charset::) variable which doesn’t have
a default value since it’s determined by Mutt at startup.  If a
configuration file is not encoded in the same character set the
$config_charset (*note config_charset::) variable should be used: all
lines starting with the next are recoded from $config_charset (*note
config_charset::) to $charset (*note charset::).

   This mechanism should be avoided if possible as it has the following
implications:

   • These variables should be set early in a configuration file with
     $charset (*note charset::) preceding $config_charset (*note
     config_charset::) so Mutt knows what character set to convert to.

   • If $config_charset (*note config_charset::) is set, it should be
     set in each configuration file because the value is global and
     _not_ per configuration file.

   • Because Mutt first recodes a line before it attempts to parse it, a
     conversion introducing question marks or other characters as part
     of errors (unconvertable characters, transliteration) may introduce
     syntax errors or silently change the meaning of certain tokens
     (e.g.  inserting question marks into regular expressions).


File: mutt.info,  Node: Address Groups,  Next: Defining/Using Aliases,  Prev: Syntax of Initialization Files,  Up: Configuration

3.4 Address Groups
==================

Usage:

     group [ -group name ]… { -rx expr … | -addr expr …} ungroup [
     -group name ]… { * | -rx expr … | -addr expr …}

   Mutt supports grouping addresses logically into named groups.  An
address or address pattern can appear in several groups at the same
time.  These groups can be used in patterns (*note Patterns; Searching;
Limiting and Tagging::) (for searching, limiting and tagging) and in
hooks by using group patterns.  This can be useful to classify mail and
take certain actions depending on in what groups the message is.  For
example, the mutt user’s mailing list would fit into the categories
‘mailing list’ and ‘mutt-related’.  Using ‘send-hook’ (*note Change
Settings Based Upon Message Recipients::), the sender can be set to a
dedicated one for writing mailing list messages, and the signature could
be set to a mutt-related one for writing to a mutt list — for other
lists, the list sender setting still applies but a different signature
can be selected.  Or, given a group only containing recipients known to
accept encrypted mail, ‘auto-encryption’ can be achieved easily.

   The ‘group’ command is used to directly add either addresses or
regular expressions to the specified group or groups.  The different
categories of arguments to the ‘group’ command can be in any order.  The
flags ‘-rx’ and ‘-addr’ specify what the following strings (that cannot
begin with a hyphen) should be interpreted as: either a regular
expression or an email address, respectively.

   These address groups can also be created implicitly by the ‘alias’
(*note Defining/Using Aliases::), ‘lists’ (*note Mailing Lists <1>::),
‘subscribe’ (*note Mailing Lists <1>::) and ‘alternates’ (*note
Alternative Addresses::) commands by specifying the optional ‘-group’
option.  For example,


     alternates -group me address1 address2
     alternates -group me -group work address3

   would create a group named ‘me’ which contains all your addresses and
a group named ‘work’ which contains only your work address _address3_.
Besides many other possibilities, this could be used to automatically
mark your own messages in a mailing list folder as read or use a special
signature for work-related messages.

   The ‘ungroup’ command is used to remove addresses or regular
expressions from the specified group or groups.  The syntax is similar
to the ‘group’ command, however the special character ‘*’ can be used to
empty a group of all of its contents.  As soon as a group gets empty
because all addresses and regular expressions have been removed, it’ll
internally be removed, too (i.e.  there cannot be an empty group).  When
removing regular expressions from a group, the pattern must be specified
exactly as given to the ‘group’ command or ‘-group’ argument.


File: mutt.info,  Node: Defining/Using Aliases,  Next: Changing the Default Key Bindings,  Prev: Address Groups,  Up: Configuration

3.5 Defining/Using Aliases
==========================

Usage:

     alias [ -group name ]… key address [ address ]… unalias [ -group
     name ]… { * | key …}

   It’s usually very cumbersome to remember or type out the address of
someone you are communicating with.  Mutt allows you to create ‘aliases’
which map a short string to a full address.

     *Note*

     If you want to create an alias for more than one address, you
     _must_ separate the addresses with a comma (‘,’).

   The optional ‘-group’ argument to ‘alias’ causes the aliased
address(es) to be added to the named _group_.

   To add an alias:


     alias muttdude me@cs.hmc.edu (Michael Elkins)
     alias theguys manny, moe, jack

   To remove an alias or aliases (‘*’ means all aliases):


     unalias muttdude
     unalias *

   Note: The alias _key_ is matched case insensitively when creating
(checking for duplicates), removing, or expanding aliases.

   Unlike other mailers, Mutt doesn’t require aliases to be defined in a
special file.  The ‘alias’ command can appear anywhere in a
configuration file, as long as this file is ‘source’d (*note Reading
Initialization Commands From Another File::).  Consequently, you can
have multiple alias files, or you can have all aliases defined in your
‘.muttrc’.

   On the other hand, the ‘<create-alias>’ (*note create-alias::)
function can use only one file, the one pointed to by the $alias_file
(*note alias_file::) variable (which is ‘~/.muttrc’ by default).  This
file is not special either, in the sense that Mutt will happily append
aliases to any file, but in order for the new aliases to take effect you
need to explicitly ‘source’ (*note Reading Initialization Commands From
Another File::) this file too.


   *Configuring external alias files*


     source /usr/local/share/Mutt.aliases
     source ~/.mail_aliases
     set alias_file=~/.mail_aliases

   To use aliases, you merely use the alias at any place in Mutt where
Mutt prompts for addresses, such as the _To:_ or _Cc:_ prompt.  You can
also enter aliases in your editor at the appropriate headers if you have
the $edit_headers (*note edit_headers::) variable set.

   In addition, at the various address prompts, you can use the tab
character to expand a partial alias to the full alias.  If there are
multiple matches, Mutt will bring up a menu with the matching aliases.
In order to be presented with the full list of aliases, you must hit tab
without a partial alias, such as at the beginning of the prompt or after
a comma denoting multiple addresses.

   In the alias menu, you can select as many aliases as you want with
the ‘tag-entry’ key (default: <Space> or t), and use the _exit_ key
(default: q) to return to the address prompt.


File: mutt.info,  Node: Changing the Default Key Bindings,  Next: Changing the current working directory,  Prev: Defining/Using Aliases,  Up: Configuration

3.6 Changing the Default Key Bindings
=====================================

Usage:

     bind map key function

   This command allows you to change the default key bindings (operation
invoked when pressing a key).

   _map_ specifies in which menu the binding belongs.  Multiple maps may
be specified by separating them with commas (no additional whitespace is
allowed).  The currently defined maps are:


generic
     This is not a real menu, but is used as a fallback for all of the
     other menus except for the pager and editor modes.  If a key is not
     defined in another menu, Mutt will look for a binding to use in
     this menu.  This allows you to bind a key to a certain function in
     multiple menus instead of having multiple ‘bind’ statements to
     accomplish the same task.

alias
     The alias menu is the list of your personal aliases as defined in
     your ‘.muttrc’.  It is the mapping from a short alias name to the
     full email address(es) of the recipient(s).

attach
     The attachment menu is used to access the attachments on received
     messages.

browser
     The browser is used for both browsing the local directory
     structure, and for listing all of your incoming mailboxes.

editor
     The editor is used to allow the user to enter a single line of
     text, such as the _To_ or _Subject_ prompts in the ‘compose’ menu.

index
     The index is the list of messages contained in a mailbox.

compose
     The compose menu is the screen used when sending a new message.

pager
     The pager is the mode used to display message/attachment data, and
     help listings.

pgp
     The pgp menu is used to select the OpenPGP keys used to encrypt
     outgoing messages.

smime
     The smime menu is used to select the OpenSSL certificates used to
     encrypt outgoing messages.

postpone
     The postpone menu is similar to the index menu, except is used when
     recalling a message the user was composing, but saved until later.

query
     The query menu is the browser for results returned by
     $query_command (*note query_command::).

mix
     The mixmaster screen is used to select remailer options for
     outgoing messages (if Mutt is compiled with Mixmaster support).

   _key_ is the key (or key sequence) you wish to bind.  To specify a
control character, use the sequence _\Cx_, where _x_ is the letter of
the control character (for example, to specify control-A use ‘\Ca’).
Note that the case of _x_ as well as _\C_ is ignored, so that _\CA_,
_\Ca_, _\cA_ and _\ca_ are all equivalent.  An alternative form is to
specify the key as a three digit octal number prefixed with a ‘\’ (for
example _\177_ is equivalent to _\c?_).  You can also use the form
_<177>_, which allows octal numbers with an arbitrary number of digits.
In addition, _key_ may be a symbolic name as shown in *note Symbolic key
names::.


   *Symbolic key names*

Symbolic name                        Meaning
\t                                   tab
<tab>                                tab
<backtab>                            backtab / shift-tab
\r                                   carriage return
\n                                   newline
\e                                   escape
<esc>                                escape
<up>                                 up arrow
<down>                               down arrow
<left>                               left arrow
<right>                              right arrow
<pageup>                             Page Up
<pagedown>                           Page Down
<backspace>                          Backspace
<delete>                             Delete
<insert>                             Insert
<enter>                              Enter
<return>                             Return
<keypadenter>                        Enter key on numeric keypad
<home>                               Home
<end>                                End
<space>                              Space bar
<f1>                                 function key 1
<f10>                                function key 10

   The ‘<what-key>’ function can be used to explore keycode and symbolic
names for other keys on your keyboard.  Executing this function will
display information about each key pressed, until terminated by ‘^G’.

   _key_ does not need to be enclosed in quotes unless it contains a
space (‘ ’) or semi-colon (‘;’).

   _function_ specifies which action to take when _key_ is pressed.  For
a complete list of functions, see the reference (*note Functions <1>::).
Note that the ‘bind’ expects _function_ to be specified without angle
brackets.

   The special function ‘<noop>’ unbinds the specified key sequence.

* Menu:

* Terminal Keybindings::
* Enter versus Return::


File: mutt.info,  Node: Terminal Keybindings,  Next: Enter versus Return,  Up: Changing the Default Key Bindings

3.6.1 Terminal Keybindings
--------------------------

Some key bindings are controlled by the terminal, and so by default
can’t be bound inside Mutt.  These may include ‘^C’, ‘^\’, ‘^Q’, ‘^S’,
‘^Z’, and on BSD/Mac ‘^Y’.  These terminal settings can be viewed and
changed using the ‘stty’ program.

   ‘‘stty -a’’ will list the bound characters (not all of them affect
Mutt), and what actions they take when pressed.  For example, you may
see ‘‘intr = ^C’’ in its output.  This means typing ‘^C’ will send an
interrupt signal.  ‘‘quit = ^\’’ means typing ‘^\’ (commonly also ‘^4’)
will send a quit signal.

   To unbind a key from an action, you invoke ‘stty action undef’.  For
example, ‘‘stty quit undef’’ will unbind ‘^\’ (and ‘^4’) from sending
the quit signal.  Once unbound (e.g, by placing that line in your
.bashrc, or in a Mutt wrapper script/function) you can use the key
sequence in your Mutt bindings.


File: mutt.info,  Node: Enter versus Return,  Prev: Terminal Keybindings,  Up: Changing the Default Key Bindings

3.6.2 Enter versus Return
-------------------------

Prior to version 2.2, Mutt used a default ncurses mode (‘‘nl()’’).  This
mode maps keyboard input of either ‘<Enter>’ or ‘<Return>’ to the same
value, which Mutt interpreted as ‘<Return>’ internally.

   However, starting in version 2.2, this mode is turned off, allowing
‘<Return>’ and ‘<Enter>’ to be mapped separately, if desired.  The
default keyboard mappings set both, but you can override this or create
new bindings with one or the other (or both).

   Note that in terminal application, such as Mutt, ‘<Enter>’ is the
same as ‘\n’ and ‘^J’; while ‘<Return>’ is the same as ‘\r’ and ‘^M’.


File: mutt.info,  Node: Changing the current working directory,  Next: Defining Aliases for Character Sets,  Prev: Changing the Default Key Bindings,  Up: Configuration

3.7 Changing the current working directory
==========================================

Usage:

     cd directory

   The ‘cd’ command changes Mutt’s current working directory.  This
affects commands and functions like ‘source’, ‘change-folder’, and
‘save-entry’ that use relative paths.  Using ‘cd’ without directory
changes to your home directory.


File: mutt.info,  Node: Defining Aliases for Character Sets,  Next: Setting Variables Based Upon Mailbox,  Prev: Changing the current working directory,  Up: Configuration

3.8 Defining Aliases for Character Sets
=======================================

Usage:

     charset-hook alias charset iconv-hook charset local-charset

   The ‘charset-hook’ command defines an alias for a character set.
This is useful to properly display messages which are tagged with a
character set name not known to Mutt.

   The ‘iconv-hook’ command defines a system-specific name for a
character set.  This is helpful when your systems character conversion
library insists on using strange, system-specific names for character
sets.


File: mutt.info,  Node: Setting Variables Based Upon Mailbox,  Next: Keyboard Macros,  Prev: Defining Aliases for Character Sets,  Up: Configuration

3.9 Setting Variables Based Upon Mailbox
========================================

Usage:

     folder-hook [!]regexp command

   It is often desirable to change settings based on which mailbox you
are reading.  The ‘folder-hook’ command provides a method by which you
can execute any configuration command.  _regexp_ is a regular expression
specifying in which mailboxes to execute _command_ before loading.  If a
mailbox matches multiple ‘folder-hook’s, they are executed in the order
given in the ‘.muttrc’.

   The regexp parameter has mailbox shortcut (*note Mailbox Shortcuts::)
expansion performed on the first character.  See *note Mailbox Matching
in Hooks:: for more details.

     *Note*

     If you use the ‘!’ shortcut for $spoolfile (*note spoolfile::) at
     the beginning of the pattern, you must place it inside of double or
     single quotes in order to distinguish it from the logical _not_
     operator for the expression.

     *Note*

     Settings are _not_ restored when you leave the mailbox.  For
     example, a command action to perform is to change the sorting
     method based upon the mailbox being read:


          folder-hook mutt "set sort=threads"

     However, the sorting method is not restored to its previous value
     when reading a different mailbox.  To specify a _default_ command,
     use the pattern ‘.’ before other ‘folder-hook’s adjusting a value
     on a per-folder basis because ‘folder-hook’s are evaluated in the
     order given in the configuration file.

     *Note*

     The keyboard buffer will not be processed until after all hooks are
     run; multiple push (*note Adding Key Sequences to the Keyboard
     Buffer::) or exec (*note Executing Functions::) commands will end
     up being processed in reverse order.

   The following example will set the sort (*note sort::) variable to
‘date-sent’ for all folders but to ‘threads’ for all folders containing
‘mutt’ in their name.


   *Setting sort method based on mailbox name*


     folder-hook . "set sort=date-sent"
     folder-hook mutt "set sort=threads"


File: mutt.info,  Node: Keyboard Macros,  Next: Using Color and Mono Video Attributes,  Prev: Setting Variables Based Upon Mailbox,  Up: Configuration

3.10 Keyboard Macros
====================

Usage:

     macro menu key sequence [ description ]

   Macros are useful when you would like a single key to perform a
series of actions.  When you press _key_ in menu _menu_, Mutt will
behave as if you had typed _sequence_.  So if you have a common sequence
of commands you type, you can create a macro to execute those commands
with a single key or fewer keys.

   _menu_ is the map (*note maps::) which the macro will be bound in.
Multiple maps may be specified by separating multiple menu arguments by
commas.  Whitespace may not be used in between the menu arguments and
the commas separating them.

   _key_ and _sequence_ are expanded by the same rules as the key
bindings (*note Changing the Default Key Bindings::) with some
additions.  The first is that control characters in _sequence_ can also
be specified as _^x_.  In order to get a caret (‘^’) you need to use
_^^_.  Secondly, to specify a certain key such as _up_ or to invoke a
function directly, you can use the format _<key name>_ and _<function
name>_.  For a listing of key names see the section on key bindings
(*note Changing the Default Key Bindings::).  Functions are listed in
the reference (*note Functions <1>::).

   The advantage with using function names directly is that the macros
will work regardless of the current key bindings, so they are not
dependent on the user having particular key definitions.  This makes
them more robust and portable, and also facilitates defining of macros
in files used by more than one user (e.g., the system Muttrc).

   Optionally you can specify a descriptive text after _sequence_, which
is shown in the help screens if they contain a description.

     *Note*

     Macro definitions (if any) listed in the help screen(s), are
     silently truncated at the screen width, and are not wrapped.


File: mutt.info,  Node: Using Color and Mono Video Attributes,  Next: Message Header Display,  Prev: Keyboard Macros,  Up: Configuration

3.11 Using Color and Mono Video Attributes
==========================================

Usage:

     color object [ attribute ]… foreground background color { header |
     body } [ attribute ]… foreground background regexp color index [
     attribute ]… foreground background pattern color compose
     composeobject [ attribute ]… foreground background uncolor { index
     | header | body } { * | pattern …}

   If your terminal supports color, you can spice up Mutt by creating
your own color scheme.  To define the color of an object (type of
information), you must specify both a foreground color _and_ a
background color (it is not possible to only specify one or the other).

   _header_ and _body_ match _regexp (*note Regular Expressions::)_ in
the header/body of a message, _index_ matches _pattern (*note Patterns;
Searching; Limiting and Tagging::)_ in the message index.  Note that
IMAP server-side searches (=b, =B, =h) are not supported for color index
patterns.

   When $header_color_partial (*note header_color_partial::) is unset
(the default), a _header_ matched by _regexp_ will have color applied to
the entire header.  When set, color is applied only to the exact text
matched by _regexp_.

   _object_ can be one of:

   • attachment

   • bold (highlighting bold patterns in the body of messages)

   • error (error messages printed by Mutt)

   • hdrdefault (default color of the message header in the pager)

   • indicator (arrow or bar used to indicate the current item in a
     menu)

   • markers (the ‘+’ markers at the beginning of wrapped lines in the
     pager)

   • message (informational messages)

   • normal

   • prompt

   • quoted (text matching $quote_regexp (*note quote_regexp::) in the
     body of a message)

   • quoted1, quoted2, ..., quoted_N_ (higher levels of quoting)

   • search (highlighting of words in the pager)

   • signature

   • status (mode lines used to display info about the mailbox or
     message)

   • tilde (the ‘~’ used to pad blank lines in the pager)

   • tree (thread tree drawn in the message index and attachment menu)

   • underline (highlighting underlined patterns in the body of
     messages)

   _composeobject_ can be one of:

   • header

   • security_encrypt

   • security_sign

   • security_both

   • security_none

   _attribute_ can be one of the following:

   • none

   • bold

   • underline

   • reverse

   • standout

   _foreground_ and _background_ can be one of the following:

   • white

   • black

   • green

   • magenta

   • blue

   • cyan

   • yellow

   • red

   • default

   • color_x_

   The color name can optionally be prefixed with the keyword ‘bright’
or ‘light’ to make the color boldfaced or light (e.g., ‘brightred’).
The precise behavior depends on the terminal and its configuration.  In
particular, the boldfaced/light difference and such background colors
may be available only for terminals configured with at least 16 colors,
as specified by the ‘$TERM’ environment variable.

   If your terminal supports it, the special keyword _default_ can be
used as a transparent color.  The value _brightdefault_ is also valid.
If Mutt is linked against the _S-Lang_ library, you also need to set the
‘$COLORFGBG’ environment variable to the default colors of your terminal
for this to work; for example (for Bourne-like shells):


     set COLORFGBG="green;black"
     export COLORFGBG

     *Note*

     The _S-Lang_ library requires you to use the _lightgray_ and
     _brown_ keywords instead of _white_ and _yellow_ when setting this
     variable.

     *Note*

     The ‘uncolor’ command can be applied to the index, header and body
     objects only.  It removes entries from the list.  You _must_
     specify the same pattern specified in the ‘color’ command for it to
     be removed.  The pattern ‘*’ is a special token which means to
     clear the color list of all entries.

   Mutt also recognizes the keywords _color0_, _color1_, ...,
_color__N-1_ (_N_ being the number of colors supported by your
terminal).  This is useful when you remap the colors for your display
(for example by changing the color associated with _color2_ for your
xterm), since color names may then lose their normal meaning.


   If your terminal does not support color, it is still possible change
the video attributes through the use of the ‘mono’ command.  Usage:

     mono object attribute mono { header | body } attribute regexp mono
     index attribute pattern mono compose composeobject attribute unmono
     { index | header | body } { * | pattern …}

   For _object_, _composeobject_, and _attribute_, see the ‘color’
command.


File: mutt.info,  Node: Message Header Display,  Next: Alternative Addresses,  Prev: Using Color and Mono Video Attributes,  Up: Configuration

3.12 Message Header Display
===========================

* Menu:

* Header Display::
* Selecting Headers::
* Ordering Displayed Headers::


File: mutt.info,  Node: Header Display,  Next: Selecting Headers,  Up: Message Header Display

3.12.1 Header Display
---------------------

When displaying a message in the pager, Mutt folds long header lines at
$wrap (*note wrap::) columns.  Though there’re precise rules about where
to break and how, Mutt always folds headers using a tab for readability.
(Note that the sending side is not affected by this, Mutt tries to
implement standards compliant folding.)

   Despite not being a real header, Mutt will also display an mbox
"From_" line in the pager along with other headers.  This line can be
manipulated with ‘ignore/unignore’ and ‘hdr_order/unhdr_order’ commands.


File: mutt.info,  Node: Selecting Headers,  Next: Ordering Displayed Headers,  Prev: Header Display,  Up: Message Header Display

3.12.2 Selecting Headers
------------------------

Usage:

     ignore pattern [ pattern ]… unignore { * | pattern …}

   Messages often have many header fields added by automatic processing
systems, or which may not seem useful to display on the screen.  This
command allows you to specify header fields which you don’t normally
want to see in the pager.

   You do not need to specify the full header field name.  For example,
‘ignore content-’ will ignore all header fields that begin with the
pattern ‘content-’.  ‘ignore *’ will ignore all headers.

   To remove a previously added token from the list, use the ‘unignore’
command.  The ‘unignore’ command will make Mutt display headers with the
given pattern.  For example, if you do ‘ignore x-’ it is possible to
‘unignore x-mailer’.

   ‘unignore *’ will remove all tokens from the ignore list.


   *Header weeding*


     # Sven's draconian header weeding
     ignore *
     unignore from date subject to cc
     unignore organization organisation x-mailer: x-newsreader: x-mailing-list:
     unignore posted-to:

   The above example will show "From:" headers as well as mbox "From_"
lines.  To hide the latter, instead use "‘unignore from: date subject to
cc’" on the second line.


File: mutt.info,  Node: Ordering Displayed Headers,  Prev: Selecting Headers,  Up: Message Header Display

3.12.3 Ordering Displayed Headers
---------------------------------

Usage:

     hdr_order header [ header ]… unhdr_order { * | header …}

   With the ‘hdr_order’ command you can specify an order in which Mutt
will attempt to present these headers to you when viewing messages.

   ‘‘unhdr_order’ *’ will clear all previous headers from the order
list, thus removing the header order effects set by the system-wide
startup file.


   *Configuring header display order*


     hdr_order From Date: From: To: Cc: Subject:


File: mutt.info,  Node: Alternative Addresses,  Next: Mailing Lists <1>,  Prev: Message Header Display,  Up: Configuration

3.13 Alternative Addresses
==========================

Usage:

     alternates [ -group name ]… regexp [ regexp ]… unalternates [
     -group name ]… { * | regexp …}

   With various functions, Mutt will treat messages differently,
depending on whether you sent them or whether you received them from
someone else.  For instance, when replying to a message that you sent to
a different party, Mutt will automatically suggest to send the response
to the original message’s recipients — responding to yourself won’t make
much sense in many cases.  (See $reply_to (*note reply_to::).)

   Many users receive e-mail under a number of different addresses.  To
fully use Mutt’s features here, the program must be able to recognize
what e-mail addresses you receive mail under.  That’s the purpose of the
‘alternates’ command: It takes a list of regular expressions, each of
which can identify an address under which you receive e-mail.

   As addresses are matched using regular expressions and not exact
strict comparisons, you should make sure you specify your addresses as
precise as possible to avoid mismatches.  For example, if you specify:


     alternates user@example

   Mutt will consider ‘‘some-user@example’’ as being your address, too
which may not be desired.  As a solution, in such cases addresses should
be specified as:


     alternates '^user@example$'

   The ‘-group’ flag causes all of the subsequent regular expressions to
be added to the named group.

   The ‘unalternates’ command can be used to write exceptions to
‘alternates’ patterns.  If an address matches something in an
‘alternates’ command, but you nonetheless do not think it is from you,
you can list a more precise pattern under an ‘unalternates’ command.

   To remove a regular expression from the ‘alternates’ list, use the
‘unalternates’ command with exactly the same _regexp_.  Likewise, if the
_regexp_ for an ‘alternates’ command matches an entry on the
‘unalternates’ list, that ‘unalternates’ entry will be removed.  If the
_regexp_ for ‘unalternates’ is ‘*’, _all entries_ on ‘alternates’ will
be removed.


File: mutt.info,  Node: Mailing Lists <1>,  Next: Using Multiple Spool Mailboxes,  Prev: Alternative Addresses,  Up: Configuration

3.14 Mailing Lists
==================


   Usage:

     lists [ -group name ]… regexp [ regexp ]… unlists { * | regexp …}
     subscribe [ -group name ]… regexp [ regexp ]… unsubscribe { * |
     regexp …}

   Mutt has a few nice features for handling mailing lists (*note
Handling Mailing Lists::).  In order to take advantage of them, you must
specify which addresses belong to mailing lists, and which mailing lists
you are subscribed to.  Mutt also has limited support for auto-detecting
mailing lists: it supports parsing ‘mailto:’ links in the common
‘List-Post:’ header which has the same effect as specifying the list
address via the ‘lists’ command (except the group feature).  Once you
have done this, the ‘<list-reply>’ (*note list-reply::) function will
work for all known lists.  Additionally, when you send a message to a
known list and $followup_to (*note followup_to::) is set, Mutt will add
a Mail-Followup-To header.  For unsubscribed lists, this will include
your personal address, ensuring you receive a copy of replies.  For
subscribed mailing lists, the header will not, telling other users’ mail
user agents not to send copies of replies to your personal address.

     *Note*

     The Mail-Followup-To header is a non-standard extension which is
     not supported by all mail user agents.  Adding it is not
     bullet-proof against receiving personal CCs of list messages.  Also
     note that the generation of the Mail-Followup-To header is
     controlled by the $followup_to (*note followup_to::) configuration
     variable since it’s common practice on some mailing lists to send
     Cc upon replies (which is more a group- than a list-reply).

   More precisely, Mutt maintains lists of patterns for the addresses of
known and subscribed mailing lists.  Every subscribed mailing list is
known.  To mark a mailing list as known, use the ‘list’ command.  To
mark it as subscribed, use ‘subscribe’.

   You can use regular expressions with both commands.  To mark all
messages sent to a specific bug report’s address on Debian’s bug
tracking system as list mail, for instance, you could say


     subscribe [0-9]+.*@bugs.debian.org

   as it’s often sufficient to just give a portion of the list’s e-mail
address.

   Specify as much of the address as you need to remove ambiguity.  For
example, if you’ve subscribed to the Mutt mailing list, you will receive
mail addressed to ‘mutt-users@mutt.org’.  So, to tell Mutt that this is
a mailing list, you could add ‘lists mutt-users@’ to your initialization
file.  To tell Mutt that you are subscribed to it, add ‘‘subscribe’
mutt-users’ to your initialization file instead.  If you also happen to
get mail from someone whose address is ‘mutt-users@example.com’, you
could use ‘‘lists’ ^mutt-users@mutt\\.org$’ or ‘‘subscribe’
^mutt-users@mutt\\.org$’ to match only mail from the actual list.

   The ‘-group’ flag adds all of the subsequent regular expressions to
the named address group (*note Address Groups::) in addition to adding
to the specified address list.

   The ‘unlists’ command is used to remove a token from the list of
known and subscribed mailing-lists.  Use ‘unlists *’ to remove all
tokens.

   To remove a mailing list from the list of subscribed mailing lists,
but keep it on the list of known mailing lists, use ‘unsubscribe’.

   All of the mailing list configuration options described so far govern
mutt’s knowledge of your list subscriptions and how it presents list
information to you.  If you have a message from a mailing list, you can
also use the list menu (*note Default List Menu Bindings::) (bound to
"ESC L" by default) to interact with the message’s list’s list server.
This makes it easy to subscribe, unsubscribe, and so on.


File: mutt.info,  Node: Using Multiple Spool Mailboxes,  Next: Monitoring Incoming Mail,  Prev: Mailing Lists <1>,  Up: Configuration

3.15 Using Multiple Spool Mailboxes
===================================

Usage:

     mbox-hook [!]regexp mailbox

   This command is used to move read messages from a specified mailbox
to a different mailbox automatically when you quit or change folders.
_regexp_ is a regular expression specifying the mailbox to treat as a
‘spool’ mailbox and _mailbox_ specifies where mail should be saved when
read.

   The regexp parameter has mailbox shortcut (*note Mailbox Shortcuts::)
expansion performed on the first character.  See *note Mailbox Matching
in Hooks:: for more details.

   Note that execution of mbox-hooks is dependent on the $move (*note
move::) configuration variable.  If set to ‘no’ (the default),
mbox-hooks will not be executed.

   Unlike some of the other _hook_ commands, only the _first_ matching
regexp is used (it is not possible to save read mail in more than a
single mailbox).


File: mutt.info,  Node: Monitoring Incoming Mail,  Next: User-Defined Headers,  Prev: Using Multiple Spool Mailboxes,  Up: Configuration

3.16 Monitoring Incoming Mail
=============================

Usage:

     mailboxes [ [ -notify | -nonotify ] [ -poll | -nopoll ] [ -label
     label | -nolabel ] mailbox ] []… unmailboxes { * | mailbox …}

   This command specifies folders which can receive mail and which will
be checked for new messages periodically.

   Use ‘-nonotify’ to disable notifying when new mail arrives.  The
‘-notify’ argument can be used to reenable notifying for an existing
mailbox.  If unspecified: a new mailbox will notify by default, while an
existing mailbox will be unchanged.

   To disable polling, specify ‘-nopoll’ before the mailbox name.  The
‘-poll’ argument can be used to reenable polling for an existing
mailbox.  If unspecified: a new mailbox will poll by default, while an
existing mailbox will be unchanged.

   The ‘-label’ argument can be used to specify an alternative label to
print in the sidebar or mailbox browser instead of the mailbox path.  A
label may be removed via the ‘-nolabel’ argument.  If unspecified, an
existing mailbox label will be unchanged.

   _mailbox_ can either be a local file or directory (Mbox/Mmdf or
Maildir/Mh).  If Mutt was built with POP and/or IMAP support, _mailbox_
can also be a POP/IMAP folder URL. The URL syntax is described in *note
URL Syntax::, POP and IMAP are described in *note POP3 Support:: and
*note IMAP Support:: respectively.

   Mutt provides a number of advanced features for handling (possibly
many) folders and new mail within them, please refer to *note New Mail
Detection:: for details (including in what situations and how often Mutt
checks for new mail).  Additionally, $new_mail_command (*note
new_mail_command::) can be used to run a command when new mail is
detected.

   The ‘unmailboxes’ command is used to remove a token from the list of
folders which receive mail.  Use ‘unmailboxes *’ to remove all tokens.

     *Note*

     The folders in the ‘mailboxes’ command are resolved when the
     command is executed, so if these names contain shortcut characters
     (*note Mailbox Shortcuts::) (such as ‘=’ and ‘!’), any variable
     definition that affects these characters (like $folder (*note
     folder::) and $spoolfile (*note spoolfile::)) should be set before
     the ‘mailboxes’ command.  If none of these shortcuts are used, a
     local path should be absolute as otherwise Mutt tries to find it
     relative to the directory from where Mutt was started which may not
     always be desired.


File: mutt.info,  Node: User-Defined Headers,  Next: Specify Default Save Mailbox,  Prev: Monitoring Incoming Mail,  Up: Configuration

3.17 User-Defined Headers
=========================

Usage:

     my_hdr string unmy_hdr { * | field …}

   The ‘my_hdr’ command allows you to create your own header fields
which will be added to every message you send and appear in the editor
if $edit_headers (*note edit_headers::) is set.

   For example, if you would like to add an ‘Organization:’ header field
to all of your outgoing messages, you can put the command something like
shown in *note Defining custom headers:: in your ‘.muttrc’.


   *Defining custom headers*


     my_hdr Organization: A Really Big Company, Anytown, USA

     *Note*

     Space characters are _not_ allowed between the keyword and the
     colon (‘:’).  The standard for electronic mail (RFC2822) says that
     space is illegal there, so Mutt enforces the rule.

   If you would like to add a header field to a single message, you
should either set the $edit_headers (*note edit_headers::) variable, or
use the ‘<edit-headers>’ function (default: ‘E’) in the compose menu so
that you can edit the header of your message along with the body.

   To remove user defined header fields, use the ‘unmy_hdr’ command.
You may specify an asterisk (‘*’) to remove all header fields, or the
fields to remove.  For example, to remove all ‘To’ and ‘Cc’ header
fields, you could use:


     unmy_hdr to cc


File: mutt.info,  Node: Specify Default Save Mailbox,  Next: Specify Default Fcc; Mailbox When Composing,  Prev: User-Defined Headers,  Up: Configuration

3.18 Specify Default Save Mailbox
=================================

Usage:

     save-hook [!]pattern mailbox

   This command is used to override the default mailbox used when saving
messages.  _mailbox_ will be used as the default if the message matches
_pattern_, see *note Message Matching in Hooks:: for information on the
exact format.

   To provide more flexibility and good defaults, Mutt applies the
expandos of $index_format (*note index_format::) to _mailbox_ after it
was expanded.


   *Using %-expandos in save-hook*


     # default: save all to ~/Mail/<author name>
     save-hook . ~/Mail/%F

     # save from me@turing.cs.hmc.edu and me@cs.hmc.edu to $folder/elkins
     save-hook me@(turing\\.)?cs\\.hmc\\.edu$ +elkins

     # save from aol.com to $folder/spam
     save-hook aol\\.com$ +spam

   Also see the ‘fcc-save-hook’ (*note Specify Default Save Filename and
Default Fcc; Mailbox at Once::) command.


File: mutt.info,  Node: Specify Default Fcc; Mailbox When Composing,  Next: Specify Default Save Filename and Default Fcc; Mailbox at Once,  Prev: Specify Default Save Mailbox,  Up: Configuration

3.19 Specify Default Fcc: Mailbox When Composing
================================================

Usage:

     fcc-hook [!]pattern mailbox

   This command is used to save outgoing mail in a mailbox other than
$record (*note record::).  Mutt searches the initial list of message
recipients for the first matching _pattern_ and uses _mailbox_ as the
default Fcc: mailbox.  If no match is found the message will be saved to
$record (*note record::) mailbox.

   To provide more flexibility and good defaults, Mutt applies the
expandos of $index_format (*note index_format::) to _mailbox_ after it
was expanded.

   See *note Message Matching in Hooks:: for information on the exact
format of _pattern_.

     fcc-hook [@.]aol\\.com$ +spammers

   ...will save a copy of all messages going to the aol.com domain to
the ‘+spammers’ mailbox by default.  Also see the ‘fcc-save-hook’ (*note
Specify Default Save Filename and Default Fcc; Mailbox at Once::)
command.

   Multiple mailboxes may be specified by separating them with
$fcc_delimiter (*note fcc_delimiter::), if set:


       set fcc_delimiter = ','
       fcc-hook 'foo@example\.com$' '+one,+two'


File: mutt.info,  Node: Specify Default Save Filename and Default Fcc; Mailbox at Once,  Next: Change Settings Based Upon Message Recipients,  Prev: Specify Default Fcc; Mailbox When Composing,  Up: Configuration

3.20 Specify Default Save Filename and Default Fcc: Mailbox at Once
===================================================================

Usage:

     fcc-save-hook [!]pattern mailbox

   This command is a shortcut, almost equivalent to doing both a
‘fcc-hook’ (*note Specify Default Fcc; Mailbox When Composing::) and a
‘save-hook’ (*note Specify Default Save Mailbox::) with its arguments,
including %-expansion on _mailbox_ according to $index_format (*note
index_format::).

   Note, however that the fcc-save-hook is not designed to take
advantage of multiple mailboxes, as fcc-hook is.  For correct behavior,
you should use separate fcc and save hooks in that case.


File: mutt.info,  Node: Change Settings Based Upon Message Recipients,  Next: Change Settings Before Formatting a Message,  Prev: Specify Default Save Filename and Default Fcc; Mailbox at Once,  Up: Configuration

3.21 Change Settings Based Upon Message Recipients
==================================================


   Usage:

     reply-hook [!]pattern command send-hook [!]pattern command
     send2-hook [!]pattern command

   These commands can be used to execute arbitrary configuration
commands based upon recipients of the message.  _pattern_ is used to
match the message, see *note Message Matching in Hooks:: for details.
_command_ is executed when _pattern_ matches.

   ‘reply-hook’ is matched against the message you are _replying to_,
instead of the message you are _sending_.  ‘send-hook’ is matched
against all messages, both _new_ and _replies_.

     *Note*

     ‘reply-hook’s are matched _before_ the ‘send-hook’, _regardless_ of
     the order specified in the user’s configuration file.  However, you
     can inhibit ‘send-hook’ in the reply case by using the pattern ‘'!
     ~Q'’ (_not replied_, see *note Message Matching in Hooks::) in the
     ‘send-hook’ to tell when ‘reply-hook’ have been executed.

   ‘send2-hook’ is matched every time a message is changed, either by
editing it, or by using the compose menu to change its recipients or
subject.  ‘send2-hook’ is executed after ‘send-hook’, and can, e.g., be
used to set parameters such as the $sendmail (*note sendmail::) variable
depending on the message’s sender address.

   For each type of ‘send-hook’ or ‘reply-hook’, when multiple matches
occur, commands are executed in the order they are specified in the
‘.muttrc’ (for that type of hook).

   Example: ‘‘send-hook’ mutt "‘set’ mime_forward signature=''"’

   Another typical use for this command is to change the values of the
$attribution (*note attribution::), $attribution_locale (*note
attribution_locale::), and $signature (*note signature::) variables in
order to change the language of the attributions and signatures based
upon the recipients.

     *Note*

     ‘send-hook’’s are only executed once after getting the initial list
     of recipients.  They are not executed when resuming a postponed
     draft.  Adding a recipient after replying or editing the message
     will not cause any ‘send-hook’ to be executed, similarly if
     $autoedit (*note autoedit::) is set (as then the initial list of
     recipients is empty).  Also note that ‘my_hdr’ (*note User-Defined
     Headers::) commands which modify recipient headers, or the
     message’s subject, don’t have any effect on the current message
     when executed from a ‘send-hook’.


File: mutt.info,  Node: Change Settings Before Formatting a Message,  Next: Choosing the Cryptographic Key of the Recipient,  Prev: Change Settings Based Upon Message Recipients,  Up: Configuration

3.22 Change Settings Before Formatting a Message
================================================

Usage:

     message-hook [!]pattern command

   This command can be used to execute arbitrary configuration commands
before viewing or formatting a message based upon information about the
message.  _command_ is executed if the _pattern_ matches the message to
be displayed.  When multiple matches occur, commands are executed in the
order they are specified in the ‘.muttrc’.

   See *note Message Matching in Hooks:: for information on the exact
format of _pattern_.

   Example:


     message-hook ~A 'set pager=builtin'
     message-hook '~f freshmeat-news' 'set pager="less \"+/^  subject: .*\""'


File: mutt.info,  Node: Choosing the Cryptographic Key of the Recipient,  Next: Dynamically Changing $index_format using Patterns,  Prev: Change Settings Before Formatting a Message,  Up: Configuration

3.23 Choosing the Cryptographic Key of the Recipient
====================================================

Usage:

     crypt-hook regexp keyid

   When encrypting messages with PGP/GnuPG or OpenSSL, you may want to
associate a certain key with a given e-mail address automatically,
either because the recipient’s public key can’t be deduced from the
destination address, or because, for some reasons, you need to override
the key Mutt would normally use.  The ‘crypt-hook’ command provides a
method by which you can specify the ID of the public key to be used when
encrypting messages to a certain recipient.  You may use multiple
crypt-hooks with the same regexp; multiple matching crypt-hooks result
in the use of multiple keyids for a recipient.  During key selection,
Mutt will confirm whether each crypt-hook is to be used (unless the
$crypt_confirmhook (*note crypt_confirmhook::) option is unset).  If all
crypt-hooks for a recipient are declined, Mutt will use the original
recipient address for key selection instead.

   The meaning of _keyid_ is to be taken broadly in this context: You
can either put a numerical key ID or fingerprint here, an e-mail
address, or even just a real name.


File: mutt.info,  Node: Dynamically Changing $index_format using Patterns,  Next: Adding Key Sequences to the Keyboard Buffer,  Prev: Choosing the Cryptographic Key of the Recipient,  Up: Configuration

3.24 Dynamically Changing $index_format using Patterns
======================================================

Usage:

     index-format-hook name [!]pattern format-string

   This command is used to inject format strings dynamically into
$index_format (*note index_format::) based on pattern matching against
the current message.

   The $index_format (*note index_format::) expando _%@name@_ specifies
a placeholder for the injection.  Index-format-hooks with the same
_name_ are matched using _pattern_ (*note Patterns; Searching; Limiting
and Tagging::) against the current message.  Matching is done in the
order specified in the .muttrc, with the first match being used.  The
hook’s _format-string_ is then substituted and evaluated.

   Because the first match is used, best practice is to put a catch-all
_~A_ pattern as the last hook.  Here is an example showing how to
implement dynamic date formatting:


     set index_format="%4C %-6@date@ %-15.15F %Z (%4c) %s"

     index-format-hook  date  "~d<1d"    "%[%H:%M]"
     index-format-hook  date  "~d<1m"    "%[%a %d]"
     index-format-hook  date  "~d<1y"    "%[%b %d]"
     index-format-hook  date  "~A"       "%[%m/%y]"

   Another example, showing a way to prepend to the subject.  Note that
without a catch-all ~A pattern, no match results in the expando being
replaced with an empty string.


     set index_format="%4C %@subj_flags@%s"

     index-format-hook  subj_flags  "~f boss@example.com"    "** BOSS ** "
     index-format-hook  subj_flags  "~f spouse@example.com"  ":-) "


File: mutt.info,  Node: Adding Key Sequences to the Keyboard Buffer,  Next: Executing Functions,  Prev: Dynamically Changing $index_format using Patterns,  Up: Configuration

3.25 Adding Key Sequences to the Keyboard Buffer
================================================

Usage:

     push string

   This command adds the named string to the beginning of the keyboard
buffer.  The string may contain control characters, key names and
function names like the sequence string in the macro (*note Keyboard
Macros::) command.  You may use it to automatically run a sequence of
commands at startup, or when entering certain folders.  For example,
*note Embedding push in folder-hook:: shows how to automatically
collapse all threads when entering a folder.


   *Embedding push in folder-hook*


     folder-hook . 'push <collapse-all>'

   For using functions like shown in the example, it’s important to use
angle brackets (‘<’ and ‘>’) to make Mutt recognize the input as a
function name.  Otherwise it will simulate individual just keystrokes,
i.e.  ‘‘push collapse-all’’ would be interpreted as if you had typed
‘c’, followed by ‘o’, followed by ‘l’, ..., which is not desired and may
lead to very unexpected behavior.

   Keystrokes can be used, too, but are less portable because of
potentially changed key bindings.  With default bindings, this is
equivalent to the above example:


     folder-hook . 'push \eV'

   because it simulates that Esc+V was pressed (which is the default
binding of ‘<collapse-all>’).


File: mutt.info,  Node: Executing Functions,  Next: Message Scoring,  Prev: Adding Key Sequences to the Keyboard Buffer,  Up: Configuration

3.26 Executing Functions
========================

Usage:

     exec function [ function ]…

   This command can be used to execute any function.  Functions are
listed in the function reference (*note Functions <1>::).  ‘‘exec’
‘function’’ is equivalent to ‘‘push <function>’’.


File: mutt.info,  Node: Message Scoring,  Next: Spam Detection,  Prev: Executing Functions,  Up: Configuration

3.27 Message Scoring
====================

Usage:

     score pattern value unscore { * | pattern …}

   The ‘score’ commands adds _value_ to a message’s score if _pattern_
matches it.  _pattern_ is a string in the format described in the
patterns (*note Patterns; Searching; Limiting and Tagging::) section
(note: For efficiency reasons, patterns which scan information not
available in the index, such as ‘~b’, ‘~B’, ‘~h’, ‘~M’, or ‘~X’ may not
be used).  _value_ is a positive or negative integer.  A message’s final
score is the sum total of all matching ‘score’ entries.  However, you
may optionally prefix _value_ with an equal sign (‘=’) to cause
evaluation to stop at a particular entry if there is a match.  Negative
final scores are rounded up to 0.

   The ‘unscore’ command removes score entries from the list.  You
_must_ specify the same pattern specified in the ‘score’ command for it
to be removed.  The pattern ‘*’ is a special token which means to clear
the list of all score entries.

   Scoring occurs as the messages are read in, before the mailbox is
sorted.  Because of this, patterns which depend on threading, such as
_~=_, _~$_, and _~()_, will not work by default.  A workaround is to
push the scoring command in a folder hook.  This will cause the mailbox
to be rescored after it is opened and input starts being processed:


     folder-hook . 'push "<enter-command>score ~= 10<enter>"'


File: mutt.info,  Node: Spam Detection,  Next: Setting and Querying Variables,  Prev: Message Scoring,  Up: Configuration

3.28 Spam Detection
===================

Usage:

     spam pattern format nospam { * | pattern }

   Mutt has generalized support for external spam-scoring filters.  By
defining your spam patterns with the ‘spam’ and ‘nospam’ commands, you
can _limit_, _search_, and _sort_ your mail based on its spam
attributes, as determined by the external filter.  You also can display
the spam attributes in your index display using the ‘%H’ selector in the
$index_format (*note index_format::) variable.  (Tip: try ‘%?H?[%H] ?’
to display spam tags only when they are defined for a given message.)

   Note: the value displayed by ‘%H’ and searched by ‘~H’ is stored in
the header cache (*note Local Caching::).  Mutt isn’t smart enough to
invalidate a header cache entry based on changing ‘spam’ rules, so if
you aren’t seeing correct ‘%H’ values, try temporarily turning off the
header cache.  If that fixes the problem, then once your spam rules are
set to your liking, remove your stale header cache files and turn the
header cache back on.

   Your first step is to define your external filter’s spam patterns
using the ‘spam’ command.  _pattern_ should be a regular expression that
matches a header in a mail message.  If any message in the mailbox
matches this regular expression, it will receive a ‘spam tag’ or ‘spam
attribute’ (unless it also matches a ‘nospam’ pattern — see below.)  The
appearance of this attribute is entirely up to you, and is governed by
the _format_ parameter.  _format_ can be any static text, but it also
can include back-references from the _pattern_ expression.  (A regular
expression ‘back-reference’ refers to a sub-expression contained within
parentheses.)  ‘%1’ is replaced with the first back-reference in the
regex, ‘%2’ with the second, etc.

   To match spam tags, mutt needs the corresponding header information
which is always the case for local and POP folders but not for IMAP in
the default configuration.  Depending on the spam header to be analyzed,
$imap_headers (*note imap_headers::) may need to be adjusted.

   If you’re using multiple spam filters, a message can have more than
one spam-related header.  You can define ‘spam’ patterns for each filter
you use.  If a message matches two or more of these patterns, and the
$spam_separator (*note spam_separator::) variable is set to a string,
then the message’s spam tag will consist of all the _format_ strings
joined together, with the value of $spam_separator (*note
spam_separator::) separating them.

   For example, suppose one uses DCC, SpamAssassin, and PureMessage,
then the configuration might look like in *note Configuring spam
detection::.


   *Configuring spam detection*


     spam "X-DCC-.*-Metrics:.*(....)=many"         "90+/DCC-%1"
     spam "X-Spam-Status: Yes"                     "90+/SA"
     spam "X-PerlMX-Spam: .*Probability=([0-9]+)%" "%1/PM"
     set spam_separator=", "

   If then a message is received that DCC registered with ‘many’ hits
under the ‘Fuz2’ checksum, and that PureMessage registered with a 97%
probability of being spam, that message’s spam tag would read
‘90+/DCC-Fuz2, 97/PM’.  (The four characters before ‘=many’ in a DCC
report indicate the checksum used — in this case, ‘Fuz2’.)

   If the $spam_separator (*note spam_separator::) variable is unset,
then each spam pattern match supersedes the previous one.  Instead of
getting joined _format_ strings, you’ll get only the last one to match.

   The spam tag is what will be displayed in the index when you use ‘%H’
in the $index_format (*note index_format::) variable.  It’s also the
string that the ‘~H’ pattern-matching expression matches against for
‘<search>’ and ‘<limit>’ functions.  And it’s what sorting by spam
attribute will use as a sort key.

   That’s a pretty complicated example, and most people’s actual
environments will have only one spam filter.  The simpler your
configuration, the more effective Mutt can be, especially when it comes
to sorting.

   Generally, when you sort by spam tag, Mutt will sort _lexically_ —
that is, by ordering strings alphanumerically.  However, if a spam tag
begins with a number, Mutt will sort numerically first, and lexically
only when two numbers are equal in value.  (This is like UNIX’s ‘sort
-n’.)  A message with no spam attributes at all — that is, one that
didn’t match _any_ of your ‘spam’ patterns — is sorted at lowest
priority.  Numbers are sorted next, beginning with 0 and ranging upward.
Finally, non-numeric strings are sorted, with ‘a’ taking lower priority
than ‘z’.  Clearly, in general, sorting by spam tags is most effective
when you can coerce your filter to give you a raw number.  But in case
you can’t, Mutt can still do something useful.

   The ‘nospam’ command can be used to write exceptions to ‘spam’
patterns.  If a header pattern matches something in a ‘spam’ command,
but you nonetheless do not want it to receive a spam tag, you can list a
more precise pattern under a ‘nospam’ command.

   If the _pattern_ given to ‘nospam’ is exactly the same as the
_pattern_ on an existing ‘spam’ list entry, the effect will be to remove
the entry from the spam list, instead of adding an exception.  Likewise,
if the _pattern_ for a ‘spam’ command matches an entry on the ‘nospam’
list, that nospam entry will be removed.  If the _pattern_ for ‘nospam’
is ‘*’, _all entries on both lists_ will be removed.  This might be the
default action if you use ‘spam’ and ‘nospam’ in conjunction with a
‘folder-hook’.

   You can have as many ‘spam’ or ‘nospam’ commands as you like.  You
can even do your own primitive ‘spam’ detection within Mutt — for
example, if you consider all mail from ‘MAILER-DAEMON’ to be spam, you
can use a ‘spam’ command like this:


     spam "^From: .*MAILER-DAEMON"       "999"


File: mutt.info,  Node: Setting and Querying Variables,  Next: Reading Initialization Commands From Another File,  Prev: Spam Detection,  Up: Configuration

3.29 Setting and Querying Variables
===================================

* Menu:

* Variable Types::
* Commands::
* User-Defined Variables::
* Type Conversions::


File: mutt.info,  Node: Variable Types,  Next: Commands,  Up: Setting and Querying Variables

3.29.1 Variable Types
---------------------

Mutt supports these types of configuration variables:

boolean
     A boolean expression, either ‘yes’ or ‘no’.

number
     A signed integer number in the range -32768 to 32767.

number (long)
     A signed integer number in the range -2147483648 to 2147483647.

string
     Arbitrary text.

path
     A specialized string for representing paths including support for
     mailbox shortcuts (see *note Mailbox Shortcuts::) as well as tilde
     (‘~’) for a user’s home directory and more.

quadoption
     Like a boolean but triggers a prompt when set to ‘ask-yes’ or
     ‘ask-no’ with ‘yes’ and ‘no’ preselected respectively.

sort order
     A specialized string allowing only particular words as values
     depending on the variable.

regular expression
     A regular expression, see *note Regular Expressions:: for an
     introduction.

folder magic
     Specifies the type of folder to use: _mbox_, _mmdf_, _mh_ or
     _maildir_.  Currently only used to determine the type for newly
     created folders.

e-mail address
     An e-mail address either with or without realname.  The older
     ‘‘user@example.org (Joe User)’’ form is supported but strongly
     deprecated.

user-defined
     Arbitrary text, see *note User-Defined Variables:: for details.


File: mutt.info,  Node: Commands,  Next: User-Defined Variables,  Prev: Variable Types,  Up: Setting and Querying Variables

3.29.2 Commands
---------------

The following commands are available to manipulate and query variables:

   Usage:

     set { [no | inv] variable | variable=value } []… toggle variable [
     variable ]… unset variable [ variable ]… reset variable [ variable
     ]…

   This command is used to set (and unset) configuration variables
(*note Configuration Variables::).  There are four basic types of
variables: boolean, number, string and quadoption.  _boolean_ variables
can be _set_ (true) or _unset_ (false).  _number_ variables can be
assigned a positive integer value.  _string_ variables consist of any
number of printable characters and must be enclosed in quotes if they
contain spaces or tabs.  You may also use the escape sequences ‘\n’ and
‘\t’ for newline and tab, respectively.  _quadoption_ variables are used
to control whether or not to be prompted for certain actions, or to
specify a default action.  A value of _yes_ will cause the action to be
carried out automatically as if you had answered yes to the question.
Similarly, a value of _no_ will cause the action to be carried out as if
you had answered ‘no.’ A value of _ask-yes_ will cause a prompt with a
default answer of ‘yes’ and _ask-no_ will provide a default answer of
‘no.’

   Prefixing a variable with ‘no’ will unset it.  Example: ‘‘set’
noaskbcc’.

   For _boolean_ variables, you may optionally prefix the variable name
with ‘inv’ to toggle the value (on or off).  This is useful when writing
macros.  Example: ‘‘set’ invsmart_wrap’.

   The ‘toggle’ command automatically prepends the ‘inv’ prefix to all
specified variables.

   The ‘unset’ command automatically prepends the ‘no’ prefix to all
specified variables.

   Using the ‘<enter-command>’ function in the _index_ menu, you can
query the value of a variable by prefixing the name of the variable with
a question mark:


     set ?allow_8bit

   The question mark is actually only required for boolean and
quadoption variables.

   The ‘reset’ command resets all given variables to the compile time
defaults (hopefully mentioned in this manual).  If you use the command
‘set’ and prefix the variable with ‘&’ this has the same behavior as the
‘reset’ command.

   With the ‘reset’ command there exists the special variable ‘all’,
which allows you to reset all variables to their system defaults.


File: mutt.info,  Node: User-Defined Variables,  Next: Type Conversions,  Prev: Commands,  Up: Setting and Querying Variables

3.29.3 User-Defined Variables
-----------------------------

* Menu:

* Introduction: Introduction <3>.
* Examples::


File: mutt.info,  Node: Introduction <3>,  Next: Examples,  Up: User-Defined Variables

3.29.3.1 Introduction
.....................

Along with the variables listed in the Configuration variables (*note
Configuration Variables::) section, Mutt supports user-defined variables
with names starting with ‘my_’ as in, for example, ‘my_cfgdir’.

   The ‘set’ command either creates a custom ‘my_’ variable or changes
its value if it does exist already.  The ‘unset’ and ‘reset’ commands
remove the variable entirely.

   Since user-defined variables are expanded in the same way that
environment variables are (except for the shell-escape (*note
shell-escape::) command and backtick expansion), this feature can be
used to make configuration files more readable.


File: mutt.info,  Node: Examples,  Prev: Introduction <3>,  Up: User-Defined Variables

3.29.3.2 Examples
.................

The following example defines and uses the variable ‘my_cfgdir’ to
abbreviate the calls of the ‘source’ (*note Reading Initialization
Commands From Another File::) command:


   *Using user-defined variables for config file readability*


     set my_cfgdir = $HOME/mutt/config

     source $my_cfgdir/hooks
     source $my_cfgdir/macros
     # more source commands...

   A custom variable can also be used in macros to backup the current
value of another variable.  In the following example, the value of the
$delete (*note delete::) is changed temporarily while its original value
is saved as ‘my_delete’.  After the macro has executed all commands, the
original value of $delete (*note delete::) is restored.


   *Using user-defined variables for backing up other config option
values*


     macro pager ,x '\
     <enter-command>set my_delete=$delete<enter>\
     <enter-command>set delete=yes<enter>\
     ...\
     <enter-command>set delete=$my_delete<enter>'

   Since Mutt expands such values already when parsing the configuration
file(s), the value of ‘$my_delete’ in the last example would be the
value of $delete (*note delete::) exactly as it was at that point during
parsing the configuration file.  If another statement would change the
value for $delete (*note delete::) later in the same or another file, it
would have no effect on ‘$my_delete’.  However, the expansion can be
deferred to runtime, as shown in the next example, when escaping the
dollar sign.


   *Deferring user-defined variable expansion to runtime*


     macro pager <PageDown> "\
     <enter-command> set my_old_pager_stop=\$pager_stop pager_stop<Enter>\
     <next-page>\
     <enter-command> set pager_stop=\$my_old_pager_stop<Enter>\
     <enter-command> unset my_old_pager_stop<Enter>"

   Note that there is a space between ‘<enter-command>’ and the ‘set’
configuration command, preventing Mutt from recording the ‘macro’’s
commands into its history.


File: mutt.info,  Node: Type Conversions,  Prev: User-Defined Variables,  Up: Setting and Querying Variables

3.29.4 Type Conversions
-----------------------

Variables are always assigned string values which Mutt parses into its
internal representation according to the type of the variable, for
example an integer number for numeric types.  For all queries (including
$-expansion) the value is converted from its internal type back into
string.  As a result, any variable can be assigned any value given that
its content is valid for the target.  This also counts for custom
variables which are of type string.  In case of parsing errors, Mutt
will print error messages.  *note Type conversions using variables::
demonstrates type conversions.


   *Type conversions using variables*


     set my_lines = "5"                # value is string "5"
     set pager_index_lines = $my_lines # value is integer 5

     set my_sort = "date-received"     # value is string "date-received"
     set sort = "last-$my_sort"        # value is sort last-date-received

     set my_inc = $read_inc            # value is string "10" (default of $read_inc)
     set my_foo = $my_inc              # value is string "10"

   These assignments are all valid.  If, however, the value of
‘$my_lines’ would have been ‘five’ (or something else that cannot be
parsed into a number), the assignment to ‘$pager_index_lines’ would have
produced an error message.

   Type conversion applies to all configuration commands which take
arguments.  But please note that every expanded value of a variable is
considered just a single token.  A working example is:


     set my_pattern = "~A"
     set my_number = "10"

     # same as: score ~A +10
     score $my_pattern +$my_number

   What does _not_ work is:


     set my_mx = "+mailbox1 +mailbox2"
     mailboxes $my_mx +mailbox3

   because the value of ‘$my_mx’ is interpreted as a single mailbox
named ‘+mailbox1 +mailbox2’ and not two distinct mailboxes.


File: mutt.info,  Node: Reading Initialization Commands From Another File,  Next: Removing Hooks,  Prev: Setting and Querying Variables,  Up: Configuration

3.30 Reading Initialization Commands From Another File
======================================================

Usage:

     source filename

   This command allows the inclusion of initialization commands from
other files.  For example, I place all of my aliases in
‘~/.mail_aliases’ so that I can make my ‘~/.muttrc’ readable and keep my
aliases private.

   If the filename begins with a tilde (‘~’), it will be expanded to the
path of your home directory.

   If the filename ends with a vertical bar (‘|’), then _filename_ is
considered to be an executable program from which to read input (e.g.
‘‘source’ ~/bin/myscript|’).


File: mutt.info,  Node: Removing Hooks,  Next: Format Strings,  Prev: Reading Initialization Commands From Another File,  Up: Configuration

3.31 Removing Hooks
===================

Usage:

     unhook { * | hook-type }

   This command permits you to flush hooks you have previously defined.
You can either remove all hooks by giving the ‘*’ character as an
argument, or you can remove all hooks of a specific type by saying
something like ‘‘unhook’ send-hook’.


File: mutt.info,  Node: Format Strings,  Next: Control allowed header fields in a mailto; URL,  Prev: Removing Hooks,  Up: Configuration

3.32 Format Strings
===================

* Menu:

* Basic usage::
* Conditionals::
* Filters::
* Padding::
* Bytes size display::


File: mutt.info,  Node: Basic usage,  Next: Conditionals,  Up: Format Strings

3.32.1 Basic usage
------------------

Format strings are a general concept you’ll find in several locations
through the Mutt configuration, especially in the $index_format (*note
index_format::), $pager_format (*note pager_format::), $status_format
(*note status_format::), and other related variables.  These can be very
straightforward, and it’s quite possible you already know how to use
them.

   The most basic format string element is a percent symbol followed by
another character.  For example, ‘%s’ represents a message’s Subject:
header in the $index_format (*note index_format::) variable.  The
‘expandos’ available are documented with each format variable, but there
are general modifiers available with all formatting expandos, too.
Those are our concern here.

   Some of the modifiers are borrowed right out of C (though you might
know them from Perl, Python, shell, or another language).  These are the
‘[-]m.n’ modifiers, as in ‘%-12.12s’.  As with such programming
languages, these modifiers allow you to specify the minimum and maximum
size of the resulting string, as well as its justification.  If the ‘-’
sign follows the percent, the string will be left-justified instead of
right-justified.  If there’s a number immediately following that, it’s
the minimum amount of space the formatted string will occupy — if it’s
naturally smaller than that, it will be padded out with spaces.  If a
decimal point and another number follow, that’s the maximum space
allowable — the string will not be permitted to exceed that width, no
matter its natural size.  Each of these three elements is optional, so
that all these are legal format strings: ‘%-12s’, ‘%4c’, ‘%.15F’ and
‘%-12.15L’.

   Mutt adds some other modifiers to format strings.  If you use an
equals symbol (‘=’) as a numeric prefix (like the minus above), it will
force the string to be centered within its minimum space range.  For
example, ‘%=14y’ will reserve 14 characters for the %y expansion —
that’s the X-Label: header, in $index_format (*note index_format::).  If
the expansion results in a string less than 14 characters, it will be
centered in a 14-character space.  If the X-Label for a message were
‘test’, that expansion would look like ‘     test     ’.

   There are two very little-known modifiers that affect the way that an
expando is replaced.  If there is an underline (‘_’) character between
any format modifiers (as above) and the expando letter, it will expands
in all lower case.  And if you use a colon (‘:’), it will replace all
decimal points with underlines.


File: mutt.info,  Node: Conditionals,  Next: Filters,  Prev: Basic usage,  Up: Format Strings

3.32.2 Conditionals
-------------------

Depending on the format string variable, some of its sequences can be
used to optionally print a string if their value is nonzero.  For
example, you may only want to see the number of flagged messages if such
messages exist, since zero is not particularly meaningful.  To
optionally print a string based upon one of the above sequences, the
following construct is used:


     %?<sequence_char>?<optional_string>?

   where _sequence_char_ is an expando, and _optional_string_ is the
string you would like printed if _sequence_char_ is nonzero.
_optional_string_ may contain other sequences as well as normal text,
but you may not nest optional strings.

   Here is an example illustrating how to optionally print the number of
new messages in a mailbox in $status_format (*note status_format::):


     %?n?%n new messages.?

   You can also switch between two strings using the following
construct:


     %?<sequence_char>?<if_string>&<else_string>?

   If the value of _sequence_char_ is non-zero, _if_string_ will be
expanded, otherwise _else_string_ will be expanded.


File: mutt.info,  Node: Filters,  Next: Padding,  Prev: Conditionals,  Up: Format Strings

3.32.3 Filters
--------------

Any format string ending in a vertical bar (‘|’) will be expanded and
piped through the first word in the string, using spaces as separator.
The string returned will be used for display.  If the returned string
ends in %, it will be passed through the formatter a second time.  This
allows the filter to generate a replacement format string including %
expandos.

   All % expandos in a format string are expanded before the script is
called so that:


   *Using external filters in format strings*


     set status_format="script.sh '%r %f (%L)'|"

   will make Mutt expand ‘%r’, ‘%f’ and ‘%L’ before calling the script.
The example also shows that arguments can be quoted: the script will
receive the expanded string between the single quotes as the only
argument.

   A practical example is the ‘mutt_xtitle’ script installed in the
‘samples’ subdirectory of the Mutt documentation: it can be used as
filter for $status_format (*note status_format::) to set the current
terminal’s title, if supported.


File: mutt.info,  Node: Padding,  Next: Bytes size display,  Prev: Filters,  Up: Format Strings

3.32.4 Padding
--------------

In most format strings, Mutt supports different types of padding using
special %-expandos:

‘%|X’
     When this occurs, Mutt will fill the rest of the line with the
     character ‘X’.  For example, filling the rest of the line with
     dashes is done by setting:


          set status_format = "%v on %h: %B: %?n?%n&no? new messages %|-"

‘%>X’
     Since the previous expando stops at the end of line, there must be
     a way to fill the gap between two items via the ‘%>X’ expando: it
     puts as many characters ‘X’ in between two items so that the rest
     of the line will be right-justified.  For example, to not put the
     version string and hostname the above example on the left but on
     the right and fill the gap with spaces, one might use (note the
     space after ‘%>’):


          set status_format = "%B: %?n?%n&no? new messages %> (%v on %h)"

‘%*X’
     Normal right-justification will print everything to the left of the
     ‘%>’, displaying padding and whatever lies to the right only if
     there’s room.  By contrast, ‘soft-fill’ gives priority to the
     right-hand side, guaranteeing space to display it and showing
     padding only if there’s still room.  If necessary, soft-fill will
     eat text leftwards to make room for rightward text.  For example,
     to right-justify the subject making sure as much as possible of it
     fits on screen, one might use (note two spaces after ‘%* ’: the
     second ensures there’s a space between the truncated right-hand
     side and the subject):


          set index_format="%4C %Z %{%b %d} %-15.15L (%?l?%4l&%4c?)%*  %s"


File: mutt.info,  Node: Bytes size display,  Prev: Padding,  Up: Format Strings

3.32.5 Bytes size display
-------------------------

Various format strings contain expandos that display the size of
messages in bytes.  This includes ‘%s’ in $attach_format (*note
attach_format::), ‘%l’ in $compose_format (*note compose_format::), ‘%s’
in $folder_format (*note folder_format::), ‘%c’ in $index_format (*note
index_format::), and %l and %L in $status_format (*note
status_format::).  There are four configuration variables that can be
used to customize how the numbers are displayed.

   $size_show_bytes (*note size_show_bytes::) will display the number of
bytes when the size is < 1 kilobyte.  When unset, kilobytes will be
displayed instead.

   $size_show_mb (*note size_show_mb::) will display the number of
megabytes when the size is >= 1 megabyte.  When unset, kilobytes will be
displayed instead (which could be a large number).

   $size_show_fractions (*note size_show_fractions::), will display
numbers with a single decimal place for values from 0 to 10 kilobytes,
and 1 to 10 megabytes.

   $size_units_on_left (*note size_units_on_left::) will display the
unit (‘K’ or ‘M’) to the left of the number, instead of the right if
unset.

   These variables also affect size display in a few other places, such
as progress indicators and attachment delimiters in the pager.


File: mutt.info,  Node: Control allowed header fields in a mailto; URL,  Prev: Format Strings,  Up: Configuration

3.33 Control allowed header fields in a mailto: URL
===================================================

Usage:

     mailto_allow { * | header-field …} unmailto_allow { * |
     header-field …}

   As a security measure, Mutt will only add user-approved header fields
from a ‘mailto:’ URL. This is necessary since Mutt will handle certain
header fields, such as ‘Attach:’, in a special way.  The ‘mailto_allow’
and ‘unmailto_allow’ commands allow the user to modify the list of
approved headers.

   Mutt initializes the default list to contain the ‘Subject’ and ‘Body’
header fields, which are the only requirement specified by the ‘mailto:’
specification in RFC2368, along with ‘Cc’, ‘In-Reply-To’, and
‘References’, to support mailing list URLs.


File: mutt.info,  Node: Advanced Usage,  Next: Mutt's MIME Support,  Prev: Configuration,  Up: Top

4 Advanced Usage
****************

* Menu:

* Character Set Handling::
* Regular Expressions::
* Patterns; Searching, Limiting and Tagging: Patterns; Searching; Limiting and Tagging.
* Marking Messages::
* Using Tags::
* Using Hooks::
* Managing the Environment::
* External Address Queries::
* Mailbox Formats::
* Mailbox Shortcuts::
* Handling Mailing Lists::
* Display Munging::
* New Mail Detection::
* Editing Threads::
* Delivery Status Notification (DSN) Support: Delivery Status Notification [DSN] Support.
* Start a WWW Browser on URLs::
* Echoing Text::
* Message Composition Flow::
* Batch Composition Flow::
* Using MuttLisp (EXPERIMENTAL): Using MuttLisp [EXPERIMENTAL].
* Miscellany::


File: mutt.info,  Node: Character Set Handling,  Next: Regular Expressions,  Up: Advanced Usage

4.1 Character Set Handling
==========================

A ‘character set’ is basically a mapping between bytes and glyphs and
implies a certain character encoding scheme.  For example, for the ISO
8859 family of character sets, an encoding of 8bit per character is
used.  For the Unicode character set, different character encodings may
be used, UTF-8 being the most popular.  In UTF-8, a character is
represented using a variable number of bytes ranging from 1 to 4.

   Since Mutt is a command-line tool run from a shell, and delegates
certain tasks to external tools (such as an editor for composing/editing
messages), all of these tools need to agree on a character set and
encoding.  There exists no way to reliably deduce the character set a
plain text file has.  Interoperability is gained by the use of
well-defined environment variables.  The full set can be printed by
issuing ‘locale’ on the command line.

   Upon startup, Mutt determines the character set on its own using
routines that inspect locale-specific environment variables.  Therefore,
it is generally not necessary to set the ‘$charset’ variable in Mutt.
It may even be counter-productive as Mutt uses system and library
functions that derive the character set themselves and on which Mutt has
no influence.  It’s safest to let Mutt work out the locale setup itself.

   If you happen to work with several character sets on a regular basis,
it’s highly advisable to use Unicode and an UTF-8 locale.  Unicode can
represent nearly all characters in a message at the same time.  When not
using a Unicode locale, it may happen that you receive messages with
characters not representable in your locale.  When displaying such a
message, or replying to or forwarding it, information may get lost
possibly rendering the message unusable (not only for you but also for
the recipient, this breakage is not reversible as lost information
cannot be guessed).

   A Unicode locale makes all conversions superfluous which eliminates
the risk of conversion errors.  It also eliminates potentially wrong
expectations about the character set between Mutt and external programs.

   The terminal emulator used also must be properly configured for the
current locale.  Terminal emulators usually do _not_ derive the locale
from environment variables, they need to be configured separately.  If
the terminal is incorrectly configured, Mutt may display random and
unexpected characters (question marks, octal codes, or just random
glyphs), format strings may not work as expected, you may not be abled
to enter non-ascii characters, and possible more.  Data is always
represented using bytes and so a correct setup is very important as to
the machine, all character sets ‘look’ the same.

   Warning: A mismatch between what system and library functions think
the locale is and what Mutt was told what the locale is may make it
behave badly with non-ascii input: it will fail at seemingly random
places.  This warning is to be taken seriously since not only local mail
handling may suffer: sent messages may carry wrong character set
information the _receiver_ has too deal with.  The need to set
‘$charset’ directly in most cases points at terminal and environment
variable setup problems, not Mutt problems.

   A list of officially assigned and known character sets can be found
at IANA (http://www.iana.org/assignments/character-sets), a list of
locally supported locales can be obtained by running ‘locale -a’.


File: mutt.info,  Node: Regular Expressions,  Next: Patterns; Searching; Limiting and Tagging,  Prev: Character Set Handling,  Up: Advanced Usage

4.2 Regular Expressions
=======================

All string patterns in Mutt including those in more complex patterns
(*note Patterns; Searching; Limiting and Tagging::) must be specified
using regular expressions (regexp) in the ‘POSIX extended’ syntax (which
is more or less the syntax used by egrep and GNU awk).  For your
convenience, we have included below a brief description of this syntax.

   The search is case sensitive if the pattern contains at least one
upper case letter, and case insensitive otherwise.

     *Note*

     ‘\’ must be quoted if used for a regular expression in an
     initialization command: ‘\\’.

   A regular expression is a pattern that describes a set of strings.
Regular expressions are constructed analogously to arithmetic
expressions, by using various operators to combine smaller expressions.

     *Note*

     The regular expression can be enclosed/delimited by either " or ’
     which is useful if the regular expression includes a white-space
     character.  See *note Syntax of Initialization Files:: for more
     information on " and ’ delimiter processing.  To match a literal "
     or ’ you must preface it with \ (backslash).

   The fundamental building blocks are the regular expressions that
match a single character.  Most characters, including all letters and
digits, are regular expressions that match themselves.  Any
metacharacter with special meaning may be quoted by preceding it with a
backslash.

   The period ‘.’ matches any single character.  The caret ‘^’ and the
dollar sign ‘$’ are metacharacters that respectively match the empty
string at the beginning and end of a line.

   A list of characters enclosed by ‘[’ and ‘]’ matches any single
character in that list; if the first character of the list is a caret
‘^’ then it matches any character _not_ in the list.  For example, the
regular expression _[0123456789]_ matches any single digit.  A range of
ASCII characters may be specified by giving the first and last
characters, separated by a hyphen ‘-’.  Most metacharacters lose their
special meaning inside lists.  To include a literal ‘]’ place it first
in the list.  Similarly, to include a literal ‘^’ place it anywhere but
first.  Finally, to include a literal hyphen ‘-’ place it last.

   Certain named classes of characters are predefined.  Character
classes consist of ‘[:’, a keyword denoting the class, and ‘:]’.  The
following classes are defined by the POSIX standard in *note POSIX
regular expression character classes::


   *POSIX regular expression character classes*

Character class                      Description
[:alnum:]                            Alphanumeric characters
[:alpha:]                            Alphabetic characters
[:blank:]                            Space or tab characters
[:cntrl:]                            Control characters
[:digit:]                            Numeric characters
[:graph:]                            Characters that are both printable
                                     and visible.  (A space is
                                     printable, but not visible, while
                                     an ‘a’ is both)
[:lower:]                            Lower-case alphabetic characters
[:print:]                            Printable characters (characters
                                     that are not control characters)
[:punct:]                            Punctuation characters (characters
                                     that are not letter, digits,
                                     control characters, or space
                                     characters)
[:space:]                            Space characters (such as space,
                                     tab and formfeed, to name a few)
[:upper:]                            Upper-case alphabetic characters
[:xdigit:]                           Characters that are hexadecimal
                                     digits

   A character class is only valid in a regular expression inside the
brackets of a character list.

     *Note*

     Note that the brackets in these class names are part of the
     symbolic names, and must be included in addition to the brackets
     delimiting the bracket list.  For example, _[[:digit:]]_ is
     equivalent to _[0-9]_.

   Two additional special sequences can appear in character lists.
These apply to non-ASCII character sets, which can have single symbols
(called collating elements) that are represented with more than one
character, as well as several characters that are equivalent for
collating or sorting purposes:

Collating Symbols
     A collating symbol is a multi-character collating element enclosed
     in ‘[.’ and ‘.]’.  For example, if ‘ch’ is a collating element,
     then _[[.ch.]]_  is a regexp that matches this collating element,
     while _[ch]_ is a regexp that matches either ‘c’ or ‘h’.

Equivalence Classes
     An equivalence class is a locale-specific name for a list of
     characters that are equivalent.  The name is enclosed in ‘[=’ and
     ‘=]’.  For example, the name ‘e’ might be used to represent all of
     ‘e’ with grave (‘è’), ‘e’ with acute (‘é’) and ‘e’.  In this case,
     _[[=e=]]_ is a regexp that matches any of: ‘e’ with grave (‘è’),
     ‘e’ with acute (‘é’) and ‘e’.

   A regular expression matching a single character may be followed by
one of several repetition operators described in *note Regular
expression repetition operators::.


   *Regular expression repetition operators*

Operator                             Description
?                                    The preceding item is optional and
                                     matched at most once
*                                    The preceding item will be matched
                                     zero or more times
+                                    The preceding item will be matched
                                     one or more times
{n}                                  The preceding item is matched
                                     exactly _n_ times
{n,}                                 The preceding item is matched _n_
                                     or more times
{,m}                                 The preceding item is matched at
                                     most _m_ times
{n,m}                                The preceding item is matched at
                                     least _n_ times, but no more than
                                     _m_ times

   Two regular expressions may be concatenated; the resulting regular
expression matches any string formed by concatenating two substrings
that respectively match the concatenated subexpressions.

   Two regular expressions may be joined by the infix operator ‘|’; the
resulting regular expression matches any string matching either
subexpression.

   Repetition takes precedence over concatenation, which in turn takes
precedence over alternation.  A whole subexpression may be enclosed in
parentheses to override these precedence rules.

     *Note*

     If you compile Mutt with the included regular expression engine,
     the following operators may also be used in regular expressions as
     described in *note GNU regular expression extensions::.


   *GNU regular expression extensions*

Expression                           Description
\\y                                  Matches the empty string at either
                                     the beginning or the end of a word
\\B                                  Matches the empty string within a
                                     word
\\<                                  Matches the empty string at the
                                     beginning of a word
\\>                                  Matches the empty string at the
                                     end of a word
\\w                                  Matches any word-constituent
                                     character (letter, digit, or
                                     underscore)
\\W                                  Matches any character that is not
                                     word-constituent
\\‘                                  Matches the empty string at the
                                     beginning of a buffer (string)
\\’                                  Matches the empty string at the
                                     end of a buffer

   Please note however that these operators are not defined by POSIX, so
they may or may not be available in stock libraries on various systems.


File: mutt.info,  Node: Patterns; Searching; Limiting and Tagging,  Next: Marking Messages,  Prev: Regular Expressions,  Up: Advanced Usage

4.3 Patterns: Searching, Limiting and Tagging
=============================================

* Menu:

* Pattern Modifier::
* Simple Searches::
* Nesting and Boolean Operators::
* Searching by Date::


File: mutt.info,  Node: Pattern Modifier,  Next: Simple Searches,  Up: Patterns; Searching; Limiting and Tagging

4.3.1 Pattern Modifier
----------------------

Many of Mutt’s commands allow you to specify a pattern to match
(‘limit’, ‘tag-pattern’, ‘delete-pattern’, etc.).  *note Pattern
modifiers:: shows several ways to select messages.


   *Pattern modifiers*

Pattern modifier                     Description
~A                                   all messages
~b _EXPR_                            messages which contain _EXPR_ in
                                     the message body ***)
=b _STRING_                          If IMAP is enabled, like ~b but
                                     searches for _STRING_ on the
                                     server, rather than downloading
                                     each message and searching it
                                     locally.
~B _EXPR_                            messages which contain _EXPR_ in
                                     the whole message ***)
=B _STRING_                          If IMAP is enabled, like ~B but
                                     searches for _STRING_ on the
                                     server, rather than downloading
                                     each message and searching it
                                     locally.
~c _EXPR_                            messages carbon-copied to _EXPR_
%c _GROUP_                           messages carbon-copied to any
                                     member of _GROUP_
~C _EXPR_                            messages either to: or cc: _EXPR_
%C _GROUP_                           messages either to: or cc: to any
                                     member of _GROUP_
~d [_MIN_]-[_MAX_]                   messages with ‘date-sent’ in a
                                     Date range
~D                                   deleted messages
~e _EXPR_                            messages which contains _EXPR_ in
                                     the ‘Sender’ field
%e _GROUP_                           messages which contain a member of
                                     _GROUP_ in the ‘Sender’ field
~E                                   expired messages
~F                                   flagged messages
~f _EXPR_                            messages originating from _EXPR_
%f _GROUP_                           messages originating from any
                                     member of _GROUP_
~g                                   cryptographically signed messages
~G                                   cryptographically encrypted
                                     messages
~h _EXPR_                            messages which contain _EXPR_ in
                                     the message header ***)
=h _STRING_                          If IMAP is enabled, like ~h but
                                     searches for _STRING_ on the
                                     server, rather than downloading
                                     each message and searching it
                                     locally; _STRING_ must be of the
                                     form ‘header: substring’ (see
                                     below).
~H _EXPR_                            messages with a spam attribute
                                     matching _EXPR_
~i _EXPR_                            messages which match _EXPR_ in the
                                     ‘Message-ID’ field
~k                                   messages which contain PGP key
                                     material
~L _EXPR_                            messages either originated or
                                     received by _EXPR_
%L _GROUP_                           message either originated or
                                     received by any member of _GROUP_
~l                                   messages addressed to a known
                                     mailing list
~m [_MIN_]-[_MAX_]                   messages in the range _MIN_ to
                                     _MAX_ *)
~M _EXPR_                            messages which contain a mime
                                     Content-Type matching _EXPR_ ***)
~n [_MIN_]-[_MAX_]                   messages with a score in the range
                                     _MIN_ to _MAX_ *)
~N                                   new messages
~O                                   old messages
~p                                   messages addressed to you
                                     (consults $from (*note from::),
                                     ‘alternates’, and local
                                     account/hostname information)
~P                                   messages from you (consults $from
                                     (*note from::), ‘alternates’, and
                                     local account/hostname
                                     information)
~Q                                   messages which have been replied
                                     to
~r [_MIN_]-[_MAX_]                   messages with ‘date-received’ in a
                                     Date range
~R                                   read messages
~s _EXPR_                            messages having _EXPR_ in the
                                     ‘Subject’ field.
~S                                   superseded messages
~t _EXPR_                            messages addressed to _EXPR_
~T                                   tagged messages
~u                                   messages addressed to a subscribed
                                     mailing list
~U                                   unread messages
~v                                   messages part of a collapsed
                                     thread.
~V                                   cryptographically verified
                                     messages
~x _EXPR_                            messages which contain _EXPR_ in
                                     the ‘References’ or ‘In-Reply-To’
                                     field
~X [_MIN_]-[_MAX_]                   messages with _MIN_ to _MAX_
                                     attachments *) ***)
~y _EXPR_                            messages which contain _EXPR_ in
                                     the ‘X-Label’ field
~z [_MIN_]-[_MAX_]                   messages with a size in the range
                                     _MIN_ to _MAX_ *) **)
~=                                   duplicated messages (see
                                     $duplicate_threads
                                     (*note duplicate_threads::))
~$                                   unreferenced messages (requires
                                     threaded view)
~(_PATTERN_)                         messages in threads containing
                                     messages matching _PATTERN_, e.g.
                                     all threads containing messages
                                     from you: ~(~P)
~<(_PATTERN_)                        messages whose immediate parent
                                     matches _PATTERN_, e.g.  replies
                                     to your messages: ~<(~P)
~>(_PATTERN_)                        messages having an immediate child
                                     matching _PATTERN_, e.g.  messages
                                     you replied to: ~>(~P)

   Where _EXPR_ is a regular expression (*note Regular Expressions::),
and _GROUP_ is an address group (*note Address Groups::).

   *) The forms ‘<[_MAX_]’, ‘>[_MIN_]’, ‘[_MIN_]-’ and ‘-[_MAX_]’ are
allowed, too.

   **) The suffixes ‘K’ and ‘M’ are allowed to specify kilobyte and
megabyte respectively.

   ***) These patterns read each message in, and can therefore be much
slower.  Over IMAP this will entail downloading each message.  They can
not be used for message scoring (*note Message Scoring::), and it is
recommended to avoid using them for index coloring.

   Special attention has to be paid when using regular expressions
inside of patterns.  Specifically, Mutt’s parser for these patterns will
strip one level of backslash (‘\’), which is normally used for quoting.
If it is your intention to use a backslash in the regular expression,
you will need to use two backslashes instead (‘\\’).

   You can force Mutt to treat _EXPR_ as a simple string instead of a
regular expression by using = instead of ~ in the pattern name.  For
example, ‘=b *.*’ will find all messages that contain the literal string
‘*.*’.  Simple string matches are less powerful than regular expressions
but can be considerably faster.

   For IMAP folders, string matches ‘=b’, ‘=B’, and ‘=h’ will be
performed on the server instead of by fetching every message.  IMAP
treats ‘=h’ specially: it must be of the form ‘header: substring’ and
will not partially match header names.  The substring part may be
omitted if you simply wish to find messages containing a particular
header without regard to its value.

   Patterns matching lists of addresses (notably c, C, p, P and t) match
if there is at least one match in the whole list.  If you want to make
sure that all elements of that list match, you need to prefix your
pattern with ‘^’.  This example matches all mails which only has
recipients from Germany.


   *Matching all addresses in address lists*


     ^~C \.de$

   You can restrict address pattern matching to aliases that you have
defined with the "@" modifier.  This example matches messages whose
recipients are all from Germany, and who are known to your alias list.


   *Matching restricted to aliases*


     ^@~C \.de$

   To match any defined alias, use a regular expression that matches any
string.  This example matches messages whose senders are known aliases.


   *Matching any defined alias*


     @~f .


File: mutt.info,  Node: Simple Searches,  Next: Nesting and Boolean Operators,  Prev: Pattern Modifier,  Up: Patterns; Searching; Limiting and Tagging

4.3.2 Simple Searches
---------------------

Mutt supports two versions of so called ‘simple searches’.  These are
issued if the query entered for searching, limiting and similar
operations does not seem to contain a valid pattern modifier (i.e.  it
does not contain one of these characters: ‘~’, ‘=’ or ‘%’).  If the
query is supposed to contain one of these special characters, they must
be escaped by prepending a backslash (‘\’).

   The first type is by checking whether the query string equals a
keyword case-insensitively from *note Simple search keywords::: If that
is the case, Mutt will use the shown pattern modifier instead.  If a
keyword would conflict with your search keyword, you need to turn it
into a regular expression to avoid matching the keyword table.  For
example, if you want to find all messages matching ‘flag’ (using
$simple_search (*note simple_search::)) but don’t want to match flagged
messages, simply search for ‘‘[f]lag’’.


   *Simple search keywords*

Keyword                              Pattern modifier
all                                  ~A
.                                    ~A
^                                    ~A
del                                  ~D
flag                                 ~F
new                                  ~N
old                                  ~O
repl                                 ~Q
read                                 ~R
tag                                  ~T
unread                               ~U

   The second type of simple search is to build a complex search pattern
using $simple_search (*note simple_search::) as a template.  Mutt will
insert your query properly quoted and search for the composed complex
query.


File: mutt.info,  Node: Nesting and Boolean Operators,  Next: Searching by Date,  Prev: Simple Searches,  Up: Patterns; Searching; Limiting and Tagging

4.3.3 Nesting and Boolean Operators
-----------------------------------

Logical AND is performed by specifying more than one criterion.  For
example:


     ~t mutt ~f elkins

   would select messages which contain the word ‘mutt’ in the list of
recipients _and_ that have the word ‘elkins’ in the ‘From’ header field.

   Mutt also recognizes the following operators to create more complex
search patterns:

   • !  — logical NOT operator

   • | — logical OR operator

   • () — logical grouping operator

   Here is an example illustrating a complex search pattern.  This
pattern will select all messages which do not contain ‘mutt’ in the ‘To’
or ‘Cc’ field and which are from ‘elkins’.


   *Using boolean operators in patterns*


     !(~t mutt|~c mutt) ~f elkins

   Here is an example using white space in the regular expression (note
the ‘’’ and ‘"’ delimiters).  For this to match, the mail’s subject must
match the ‘^Junk +From +Me$’ and it must be from either ‘Jim +Somebody’
or ‘Ed +SomeoneElse’:


     '~s "^Junk +From +Me$" ~f ("Jim +Somebody"|"Ed +SomeoneElse")'

     *Note*

     If a regular expression contains parenthesis, or a vertical bar
     ("|"), you _must_ enclose the expression in double or single quotes
     since those characters are also used to separate different parts of
     Mutt’s pattern language.  For example: ‘~f
     "me@(mutt\.org|cs\.hmc\.edu)"’ Without the quotes, the parenthesis
     wouldn’t end.  This would be separated to two OR’d patterns: _~f
     me@(mutt\.org_ and _cs\.hmc\.edu)_.  They are never what you want.


File: mutt.info,  Node: Searching by Date,  Prev: Nesting and Boolean Operators,  Up: Patterns; Searching; Limiting and Tagging

4.3.4 Searching by Date
-----------------------

Mutt supports two types of dates, _absolute_ and _relative_.

* Menu:

* Absolute Dates::
* Relative Dates::


File: mutt.info,  Node: Absolute Dates,  Next: Relative Dates,  Up: Searching by Date

4.3.4.1 Absolute Dates
......................

Dates _must_ be in DD/MM/YY format (month and year are optional,
defaulting to the current month and year) or YYYYMMDD. An example of a
valid range of dates is:


     Limit to messages matching: ~d 20/1/95-31/10
     Limit to messages matching: ~d 19950120-19951031

   If you omit the minimum (first) date, and just specify ‘-DD/MM/YY’ or
‘-YYYYMMDD’, all messages _before_ the given date will be selected.  If
you omit the maximum (second) date, and specify ‘DD/MM/YY-’, all
messages _after_ the given date will be selected.  If you specify a
single date with no dash (‘-’), only messages sent on the given date
will be selected.

   You can add error margins to absolute dates.  An error margin is a
sign (+ or -), followed by a digit, followed by one of the units in
*note Date units::.  As a special case, you can replace the sign by a
‘*’ character, which is equivalent to giving identical plus and minus
error margins.


   *Date units*

Unit                                 Description
y                                    Years
m                                    Months
w                                    Weeks
d                                    Days

   Example: To select any messages two weeks around January 15, 2001,
you’d use the following pattern:


     Limit to messages matching: ~d 15/1/2001*2w


File: mutt.info,  Node: Relative Dates,  Prev: Absolute Dates,  Up: Searching by Date

4.3.4.2 Relative Dates
......................

This type of date is relative to the current date, and may be specified
as:

   • >_offset_ for messages older than _offset_ units

   • <_offset_ for messages newer than _offset_ units

   • =_offset_ for messages exactly _offset_ units old

   _offset_ is specified as a positive number with one of the units from
*note Relative date units::.


   *Relative date units*

Unit                                 Description
y                                    Years
m                                    Months
w                                    Weeks
d                                    Days
H                                    Hours
M                                    Minutes
S                                    Seconds

   Example: to select messages less than 1 month old, you would use


     Limit to messages matching: ~d <1m

     *Note*

     All dates used when searching are relative to the _local_ time
     zone, so unless you change the setting of your $index_format (*note
     index_format::) to include a ‘%[...]’ format, these are _not_ the
     dates shown in the main index.


File: mutt.info,  Node: Marking Messages,  Next: Using Tags,  Prev: Patterns; Searching; Limiting and Tagging,  Up: Advanced Usage

4.4 Marking Messages
====================

There are times that it’s useful to ask Mutt to "remember" which message
you’re currently looking at, while you move elsewhere in your mailbox.
You can do this with the ‘mark-message’ operator, which is bound to the
‘~’ key by default.  Press this key to enter an identifier for the
marked message.  When you want to return to this message, press ‘’’ and
the name that you previously entered.

   (Message marking is really just a shortcut for defining a macro that
returns you to the current message by searching for its Message-ID. You
can choose a different prefix by setting the $mark_macro_prefix (*note
mark_macro_prefix::) variable.)


File: mutt.info,  Node: Using Tags,  Next: Using Hooks,  Prev: Marking Messages,  Up: Advanced Usage

4.5 Using Tags
==============

Sometimes it is desirable to perform an operation on a group of messages
all at once rather than one at a time.  An example might be to save
messages to a mailing list to a separate folder, or to delete all
messages with a given subject.  To tag all messages matching a pattern,
use the ‘<tag-pattern>’ function, which is bound to ‘shift-T’ by
default.  Or you can select individual messages by hand using the
‘<tag-message>’ function, which is bound to ‘t’ by default.  See
patterns (*note Patterns; Searching; Limiting and Tagging::) for Mutt’s
pattern matching syntax.

   Once you have tagged the desired messages, you can use the
‘tag-prefix’ operator, which is the ‘;’ (semicolon) key by default.
When the ‘tag-prefix’ operator is used, the _next_ operation will be
applied to all tagged messages if that operation can be used in that
manner.  If the $auto_tag (*note auto_tag::) variable is set, the next
operation applies to the tagged messages automatically, without
requiring the ‘tag-prefix’.

   In ‘macro’s (*note Keyboard Macros::) or ‘push’ (*note Adding Key
Sequences to the Keyboard Buffer::) commands, you can use the
‘<tag-prefix-cond>’ operator.  If there are no tagged messages, Mutt
will ‘eat’ the rest of the macro to abort it’s execution.  Mutt will
stop ‘eating’ the macro when it encounters the ‘<end-cond>’ operator;
after this operator the rest of the macro will be executed as normal.


File: mutt.info,  Node: Using Hooks,  Next: Managing the Environment,  Prev: Using Tags,  Up: Advanced Usage

4.6 Using Hooks
===============

A _hook_ is a concept found in many other programs which allows you to
execute arbitrary commands before performing some operation.  For
example, you may wish to tailor your configuration based upon which
mailbox you are reading, or to whom you are sending mail.  In the Mutt
world, a _hook_ consists of a regular expression (*note Regular
Expressions::) or pattern (*note Patterns; Searching; Limiting and
Tagging::) along with a configuration option/command.  See:

   • ‘account-hook’ (*note Managing Multiple Accounts::)

   • ‘charset-hook’ (*note Defining Aliases for Character Sets::)

   • ‘crypt-hook’ (*note Choosing the Cryptographic Key of the
     Recipient::)

   • ‘fcc-hook’ (*note Specify Default Fcc; Mailbox When Composing::)

   • ‘fcc-save-hook’ (*note Specify Default Save Filename and Default
     Fcc; Mailbox at Once::)

   • ‘folder-hook’ (*note Setting Variables Based Upon Mailbox::)

   • ‘iconv-hook’ (*note Defining Aliases for Character Sets::)

   • ‘index-format-hook’ (*note Dynamically Changing $index_format using
     Patterns::)

   • ‘mbox-hook’ (*note Using Multiple Spool Mailboxes::)

   • ‘message-hook’ (*note Change Settings Before Formatting a
     Message::)

   • ‘reply-hook’ (*note reply-hook::)

   • ‘save-hook’ (*note Specify Default Save Mailbox::)

   • ‘send-hook’ (*note Change Settings Based Upon Message Recipients::)

   • ‘send2-hook’ (*note send2-hook::)

for specific details on each type of _hook_ available.  Also see Message
Composition Flow (*note Message Composition Flow::) for an overview of
the composition process.

     *Note*

     If a hook changes configuration settings, these changes remain
     effective until the end of the current Mutt session.  As this is
     generally not desired, a ‘default’ hook needs to be added before
     all other hooks of that type to restore configuration defaults.


   *Specifying a default hook*


     send-hook . 'unmy_hdr From:'
     send-hook ~C'^b@b\.b$' my_hdr from: c@c.c

   In *note Specifying a default hook::, by default the value of $from
(*note from::) and $realname (*note realname::) is not overridden.  When
sending messages either To: or Cc: to ‘<b@b.b>’, the From: header is
changed to ‘<c@c.c>’.

* Menu:

* Message Matching in Hooks::
* Mailbox Matching in Hooks::


File: mutt.info,  Node: Message Matching in Hooks,  Next: Mailbox Matching in Hooks,  Up: Using Hooks

4.6.1 Message Matching in Hooks
-------------------------------

Hooks that act upon messages (‘message-hook’, ‘reply-hook’, ‘send-hook’,
‘send2-hook’, ‘save-hook’, ‘fcc-hook’, ‘index-format-hook’) are
evaluated in a slightly different manner.  For the other types of hooks,
a regular expression (*note Regular Expressions::) is sufficient.  But
in dealing with messages a finer grain of control is needed for matching
since for different purposes you want to match different criteria.

   Mutt allows the use of the search pattern (*note Patterns; Searching;
Limiting and Tagging::) language for matching messages in hook commands.
This works in exactly the same way as it would when _limiting_ or
_searching_ the mailbox, except that you are restricted to those
operators which match information Mutt extracts from the header of the
message (i.e., from, to, cc, date, subject, etc.).

   For example, if you wanted to set your return address based upon
sending mail to a specific address, you could do something like:


     send-hook '~t ^me@cs\.hmc\.edu$' 'my_hdr From: Mutt User <user@host>'

   which would execute the given command when sending mail to
_me@cs.hmc.edu_.

   However, it is not required that you write the pattern to match using
the full searching language.  You can still specify a simple _regular
expression_ like the other hooks, in which case Mutt will translate your
pattern into the full language, using the translation specified by the
$default_hook (*note default_hook::) variable.  The pattern is
translated at the time the hook is declared, so the value of
$default_hook (*note default_hook::) that is in effect at that time will
be used.


File: mutt.info,  Node: Mailbox Matching in Hooks,  Prev: Message Matching in Hooks,  Up: Using Hooks

4.6.2 Mailbox Matching in Hooks
-------------------------------

Hooks that match against mailboxes (‘folder-hook’, ‘mbox-hook’) apply
both regular expression (*note Regular Expressions::) syntax as well as
mailbox shortcut (*note Mailbox Shortcuts::) expansion on the regexp
parameter.  There is some overlap between these, so special attention
should be paid to the first character of the regexp.


     # Here, ^ will expand to "the current mailbox" not "beginning of string":
     folder-hook ^/home/user/Mail/bar "set sort=threads"

     # If you want ^ to be interpreted as "beginning of string", one workaround
     # is to enclose the regexp in parenthesis:
     folder-hook (^/home/user/Mail/bar) "set sort=threads"

     # This will expand to the default save folder for the alias "imap.example.com", which
     # is probably not what you want:
     folder-hook @imap.example.com "set sort=threads"

     # A workaround is to use parenthesis or a backslash:
     folder-hook (@imap.example.com) "set sort=threads"
     folder-hook '\@imap.example.com' "set sort=threads"

   Keep in mind that mailbox shortcut expansion on the regexp parameter
takes place when the hook is initially parsed, not when the hook is
matching against a mailbox.  When Mutt starts up and is reading the
.muttrc, some mailbox shortcuts may not be usable.  For example, the
"current mailbox" shortcut, ^, will expand to an empty string because no
mailbox has been opened yet.  Mutt will issue an error for this case or
if the mailbox shortcut results in an empty regexp.


File: mutt.info,  Node: Managing the Environment,  Next: External Address Queries,  Prev: Using Hooks,  Up: Advanced Usage

4.7 Managing the Environment
============================

You can alter the environment that Mutt passes on to its child processes
using the ‘setenv’ and ‘unsetenv’ operators.  (N.B. These follow
Mutt-style syntax, not shell-style!)  You can also query current
environment values by prefixing a ‘?’ character.


     setenv TERM vt100
     setenv ORGANIZATION "The Mutt Development Team"
     unsetenv DISPLAY
     setenv ?LESS


File: mutt.info,  Node: External Address Queries,  Next: Mailbox Formats,  Prev: Managing the Environment,  Up: Advanced Usage

4.8 External Address Queries
============================

Mutt supports connecting to external directory databases such as LDAP,
ph/qi, bbdb, or NIS through a wrapper script which connects to Mutt
using a simple interface.  Using the $query_command (*note
query_command::) variable, you specify the wrapper command to use.  For
example:


     set query_command = "mutt_ldap_query.pl %s"

   The wrapper script should accept the query on the command-line.  It
should return a one line message, then each matching response on a
single line, each line containing a tab separated address then name then
some other optional information.  On error, or if there are no matching
addresses, return a non-zero exit code and a one line error message.

   An example multiple response output:


     Searching database ... 20 entries ... 3 matching:
     me@cs.hmc.edu           Michael Elkins  mutt dude
     blong@fiction.net       Brandon Long    mutt and more
     roessler@does-not-exist.org        Thomas Roessler mutt pgp

   There are two mechanisms for accessing the query function of Mutt.
One is to do a query from the index menu using the ‘<query>’ function
(default: Q). This will prompt for a query, then bring up the query menu
which will list the matching responses.  From the query menu, you can
select addresses to create aliases, or to mail.  You can tag multiple
addresses to mail, start a new query, or have a new query appended to
the current responses.

   The other mechanism for accessing the query function is for address
completion, similar to the alias completion.  In any prompt for address
entry, you can use the ‘<complete-query>’ function (default: ^T) to run
a query based on the current address you have typed.  Like aliases, Mutt
will look for what you have typed back to the last space or comma.  If
there is a single response for that query, Mutt will expand the address
in place.  If there are multiple responses, Mutt will activate the query
menu.  At the query menu, you can select one or more addresses to be
added to the prompt.


File: mutt.info,  Node: Mailbox Formats,  Next: Mailbox Shortcuts,  Prev: External Address Queries,  Up: Advanced Usage

4.9 Mailbox Formats
===================

Mutt supports reading and writing of four different local mailbox
formats: mbox, MMDF, MH and Maildir.  The mailbox type is auto detected,
so there is no need to use a flag for different mailbox types.  When
creating new mailboxes, Mutt uses the default specified with the
$mbox_type (*note mbox_type::) variable.  A short description of the
formats follows.

   _mbox_.  This is a widely used mailbox format for UNIX. All messages
are stored in a single file.  Each message has a line of the form:


     From me@cs.hmc.edu Fri, 11 Apr 1997 11:44:56 PST

   to denote the start of a new message (this is often referred to as
the ‘From_’ line).  The mbox format requires mailbox locking, is prone
to mailbox corruption with concurrently writing clients or
misinterpreted From_ lines.  Depending on the environment, new mail
detection can be unreliable.  Mbox folders are fast to open and easy to
archive.

   _MMDF_. This is a variant of the _mbox_ format.  Each message is
surrounded by lines containing ‘^A^A^A^A’ (four times control-A’s).  The
same problems as for mbox apply (also with finding the right message
separator as four control-A’s may appear in message bodies).

   _MH_. A radical departure from _mbox_ and _MMDF_, a mailbox consists
of a directory and each message is stored in a separate file.  The
filename indicates the message number (however, this is may not
correspond to the message number Mutt displays).  Deleted messages are
renamed with a comma (‘,’) prepended to the filename.  Mutt detects this
type of mailbox by looking for either ‘.mh_sequences’ or ‘.xmhcache’
files (needed to distinguish normal directories from MH mailboxes).  MH
is more robust with concurrent clients writing the mailbox, but still
may suffer from lost flags; message corruption is less likely to occur
than with mbox/mmdf.  It’s usually slower to open compared to mbox/mmdf
since many small files have to be read (Mutt provides *note Header
Caching:: to greatly speed this process up).  Depending on the
environment, MH is not very disk-space efficient.

   _Maildir_.  The newest of the mailbox formats, used by the Qmail MTA
(a replacement for sendmail).  Similar to _MH_, except that it adds
three subdirectories of the mailbox: _tmp_, _new_ and _cur_.  Filenames
for the messages are chosen in such a way they are unique, even when two
programs are writing the mailbox over NFS, which means that no file
locking is needed and corruption is very unlikely.  Maildir maybe slower
to open without caching in Mutt, it too is not very disk-space efficient
depending on the environment.  Since no additional files are used for
metadata (which is embedded in the message filenames) and Maildir is
locking-free, it’s easy to sync across different machines using
file-level synchronization tools.


File: mutt.info,  Node: Mailbox Shortcuts,  Next: Handling Mailing Lists,  Prev: Mailbox Formats,  Up: Advanced Usage

4.10 Mailbox Shortcuts
======================

There are a number of built in shortcuts which refer to specific
mailboxes.  These shortcuts can be used anywhere you are prompted for a
file or mailbox path or in path-related configuration variables.  Note
that these only work at the beginning of a string.


   *Mailbox shortcuts*

Shortcut                             Refers to...
‘!’                                  your $spoolfile
                                     (*note spoolfile::) (incoming)
                                     mailbox
‘>’                                  your $mbox (*note mbox::) file
‘<’                                  your $record (*note record::) file
‘^’                                  the current mailbox
‘-’ or ‘!!’                          the file you’ve last visited
‘~’                                  your home directory
‘=’ or ‘+’                           your $folder (*note folder::)
                                     directory
_@alias_                             to the default save folder
                                     (*note Specify Default Save Mailbox::)
                                     as determined by the address of
                                     the alias

   For example, to store a copy of outgoing messages in the folder they
were composed in, a ‘folder-hook’ (*note Setting Variables Based Upon
Mailbox::) can be used to set $record (*note record::):


       folder-hook . 'set record=^'

   Note: the current mailbox shortcut, ‘‘^’’, has no value in some
cases.  No mailbox is opened when Mutt is invoked to send an email from
the command-line.  In interactive mode, Mutt reads the muttrc before
opening the mailbox, so immediate expansion won’t work as expected
either.  This can be an issue when trying to directly assign to $record
(*note record::), but also affects the fcc-hook (*note Specify Default
Fcc; Mailbox When Composing::) mailbox, which is expanded immediately
too.  The folder-hook example above works because the command is
executed later, when the folder-hook fires.

   Note: the $record (*note record::) shortcut ‘‘<’’ is substituted
without any regard to multiple mailboxes and $fcc_delimiter (*note
fcc_delimiter::).  If you use multiple Fcc mailboxes, and also want to
use the ‘‘<’’ mailbox shortcut, it might be better to set $record (*note
record::) to the primary mailbox and use a fcc-hook (*note Specify
Default Fcc; Mailbox When Composing::) to set all mailboxes during
message composition.


File: mutt.info,  Node: Handling Mailing Lists,  Next: Display Munging,  Prev: Mailbox Shortcuts,  Up: Advanced Usage

4.11 Handling Mailing Lists
===========================

Mutt has a few configuration options that make dealing with large
amounts of mail easier.  The first thing you must do is to let Mutt know
what addresses you consider to be mailing lists (technically this does
not have to be a mailing list, but that is what it is most often used
for), and what lists you are subscribed to.  This is accomplished
through the use of the ‘lists’ and ‘subscribe’ (*note Mailing Lists
<1>::) commands in your ‘.muttrc’.  Alternatively or additionally, you
can set $auto_subscribe (*note auto_subscribe::) to automatically
subscribe addresses found in a ‘List-Post’ header.

   Now that Mutt knows what your mailing lists are, it can do several
things, the first of which is the ability to show the name of a list
through which you received a message (i.e., of a subscribed list) in the
_index_ menu display.  This is useful to distinguish between personal
and list mail in the same mailbox.  In the $index_format (*note
index_format::) variable, the expando ‘%L’ will print the string ‘To
<list>’ when ‘list’ appears in the ‘To’ field, and ‘Cc <list>’ when it
appears in the ‘Cc’ field (otherwise it prints the name of the author).

   Often times the ‘To’ and ‘Cc’ fields in mailing list messages tend to
get quite large.  Most people do not bother to remove the author of the
message they reply to from the list, resulting in two or more copies
being sent to that person.  The ‘<list-reply>’ function, which by
default is bound to ‘L’ in the _index_ menu and _pager_, helps reduce
the clutter by only replying to the known mailing list addresses instead
of all recipients (except as specified by ‘Mail-Followup-To’, see
below).

   Mutt also supports the ‘Mail-Followup-To’ header.  When you send a
message to a list of recipients which includes one or several known
mailing lists, and if the $followup_to (*note followup_to::) option is
set, Mutt will generate a Mail-Followup-To header.  If any of the
recipients are subscribed mailing lists, this header will contain all
the recipients to whom you send this message, but not your address.
This indicates that group-replies or list-replies (also known as
‘followups’) to this message should only be sent to the original
recipients of the message, and not separately to you - you’ll receive
your copy through one of the mailing lists you are subscribed to.  If
none of the recipients are subscribed mailing lists, the header will
also contain your address, ensuring you receive a copy of replies.

   Conversely, when group-replying or list-replying to a message which
has a ‘Mail-Followup-To’ header, Mutt will respect this header if the
$honor_followup_to (*note honor_followup_to::) configuration variable is
set.  Using list-reply (*note list-reply::) will in this case also make
sure that the reply goes to the mailing list, even if it’s not specified
in the list of recipients in the ‘Mail-Followup-To’.

     *Note*

     When header editing is enabled, you can create a ‘Mail-Followup-To’
     header manually.  Mutt will only auto-generate this header if it
     doesn’t exist when you send the message.

   The other method some mailing list admins use is to generate a
‘Reply-To’ field which points back to the mailing list address rather
than the author of the message.  This can create problems when trying to
reply directly to the author in private, since most mail clients will
automatically reply to the address given in the ‘Reply-To’ field.  Mutt
uses the $reply_to (*note reply_to::) variable to help decide which
address to use.  If set to _ask-yes_ or _ask-no_, you will be prompted
as to whether or not you would like to use the address given in the
‘Reply-To’ field, or reply directly to the address given in the ‘From’
field.  When set to _yes_, the ‘Reply-To’ field will be used when
present.

   While looking at an email message from a mailing list in the index or
pager, you can interact with the list server in the ways defined by RFC
2369, provided the email message specifies how to do so.  Invoke the
list menu (*note Default List Menu Bindings::) (bound to "ESC L" by
default) to see what options are available for a given message.  Common
options are:

   • Post to the list

   • Contact the list owner

   • Subscribe to the list

   • Unsubscribe from the list

   • Get help from the list server

   • Get list archive information

Note that many list servers only specify some of these options.

   The ‘X-Label:’ header field can be used to further identify mailing
lists or list subject matter (or just to annotate messages
individually).  The $index_format (*note index_format::) variable’s ‘%y’
and ‘%Y’ expandos can be used to expand ‘X-Label:’ fields in the index,
and Mutt’s pattern-matcher can match regular expressions to ‘X-Label:’
fields with the ‘~y’ selector.  ‘X-Label:’ is not a standard message
header field, but it can easily be inserted by procmail and other mail
filtering agents.

   You can change or delete the ‘X-Label:’ field within Mutt using the
‘edit-label’ command, bound to the ‘y’ key by default.  This works for
tagged messages, too.  While in the edit-label function, pressing the
<complete> binding (TAB, by default) will perform completion against all
labels currently in use.

   Lastly, Mutt has the ability to sort (*note sort::) the mailbox into
threads (*note Threaded Mode::).  A thread is a group of messages which
all relate to the same subject.  This is usually organized into a
tree-like structure where a message and all of its replies are
represented graphically.  If you’ve ever used a threaded news client,
this is the same concept.  It makes dealing with large volume mailing
lists easier because you can easily delete uninteresting threads and
quickly find topics of value.


File: mutt.info,  Node: Display Munging,  Next: New Mail Detection,  Prev: Handling Mailing Lists,  Up: Advanced Usage

4.12 Display Munging
====================

Working within the confines of a console or terminal window, it is often
useful to be able to modify certain information elements in a
non-destructive way – to change how they display, without changing the
stored value of the information itself.  This is especially so of
message subjects, which may often be polluted with extraneous metadata
that either is reproduced elsewhere, or is of secondary interest.

     subjectrx pattern replacement unsubjectrx { * | pattern }

   ‘subjectrx’ specifies a regular expression ‘pattern’ which, if
detected in a message subject, causes the subject to be replaced with
the ‘replacement’ value.  The replacement is subject to substitutions in
the same way as for the spam (*note Spam Detection::) command: ‘%L’ for
the text to the left of the match, ‘%R’ for text to the right of the
match, and ‘%1’ for the first subgroup in the match (etc).  If you
simply want to erase the match, set it to ‘%L%R’.  Any number of
‘subjectrx’ commands may coexist.

   Note this well: the ‘replacement’ value replaces the entire subject,
not just the match!

   ‘unsubjectrx’ removes a given subjectrx from the substitution list.
If ‘*’ is used as the pattern, all substitutions will be removed.


   *Subject Munging*


     # Erase [rt #12345] tags from Request Tracker (RT) e-mails
     subjectrx '\[rt #[0-9]+\] *' '%L%R'

     # Servicedesk is another RT that sends more complex subjects.
     # Keep the ticket number.
     subjectrx '\[servicedesk #([0-9]+)\] ([^.]+)\.([^.]+) - (new|open|pending|update) - ' '%L[#%1] %R'

     # Strip out annoying [listname] prefixes in subjects
     subjectrx '\[[^]]*\]:? *' '%L%R'


File: mutt.info,  Node: New Mail Detection,  Next: Editing Threads,  Prev: Display Munging,  Up: Advanced Usage

4.13 New Mail Detection
=======================

Mutt supports setups with multiple folders, allowing all of them to be
monitored for new mail (see *note Monitoring Incoming Mail:: for
details).

* Menu:

* How New Mail Detection Works::
* Polling For New Mail::
* Monitoring New Mail::
* Calculating Mailbox Message Counts::


File: mutt.info,  Node: How New Mail Detection Works,  Next: Polling For New Mail,  Up: New Mail Detection

4.13.1 How New Mail Detection Works
-----------------------------------

For Mbox and Mmdf folders, new mail is detected by comparing access
and/or modification times of files: Mutt assumes a folder has new mail
if it wasn’t accessed after it was last modified.  Utilities like ‘biff’
or ‘frm’ or any other program which accesses the mailbox might cause
Mutt to never detect new mail for that mailbox if they do not properly
reset the access time.  Other possible causes of Mutt not detecting new
mail in these folders are backup tools (updating access times) or
filesystems mounted without access time update support (for Linux
systems, see the ‘relatime’ option).

     *Note*

     Contrary to older Mutt releases, it now maintains the new mail
     status of a folder by properly resetting the access time if the
     folder contains at least one message which is neither read, nor
     deleted, nor marked as old.

   In cases where new mail detection for Mbox or Mmdf folders appears to
be unreliable, the $check_mbox_size (*note check_mbox_size::) option can
be used to make Mutt track and consult file sizes for new mail detection
instead which won’t work for size-neutral changes.

   New mail for Maildir is assumed if there is one message in the ‘new/’
subdirectory which is not marked deleted (see $maildir_trash (*note
maildir_trash::)).  For MH folders, a mailbox is considered having new
mail if there’s at least one message in the ‘unseen’ sequence as
specified by $mh_seq_unseen (*note mh_seq_unseen::).

   Mutt does not poll POP3 folders for new mail, it only periodically
checks the currently opened folder (if it’s a POP3 folder).

   For IMAP, by default Mutt uses recent message counts provided by the
server to detect new mail.  If the $imap_idle (*note imap_idle::) option
is set, it’ll use the IMAP IDLE extension if advertised by the server.

   The $mail_check_recent (*note mail_check_recent::) option changes
whether Mutt will notify you of new mail in an already visited mailbox.
When set (the default) it will only notify you of new mail received
since the last time you opened the mailbox.  When unset, Mutt will
notify you of any new mail in the mailbox.


File: mutt.info,  Node: Polling For New Mail,  Next: Monitoring New Mail,  Prev: How New Mail Detection Works,  Up: New Mail Detection

4.13.2 Polling For New Mail
---------------------------

When in the index menu and being idle (also see $timeout (*note
timeout::)), Mutt periodically checks for new mail in all folders which
have been configured via the ‘mailboxes’ command (excepting those
specified with the ‘-nopoll’ flag).  The interval depends on the folder
type: for local/IMAP folders it consults $mail_check (*note
mail_check::) and $pop_checkinterval (*note pop_checkinterval::) for POP
folders.

   Outside the index menu the directory browser supports checking for
new mail using the ‘<check-new>’ function which is unbound by default.
Pressing TAB will bring up a menu showing the files specified by the
‘mailboxes’ command, and indicate which contain new messages.  Mutt will
automatically enter this mode when invoked from the command line with
the ‘-y’ option, or from the index/pager via the ‘<browse-mailboxes>’
function.

   For the pager, index and directory browser menus, Mutt contains the
‘<buffy-list>’ function (bound to ‘.’ by default) which will print a
list of folders with new mail in the command line at the bottom of the
screen.

   For the index, by default Mutt displays the number of mailboxes with
new mail in the status bar, please refer to the $status_format (*note
status_format::) variable for details.

   When changing folders, Mutt fills the prompt with the first folder
from the mailboxes list containing new mail (if any), pressing ‘<Space>’
will cycle through folders with new mail.  The (by default unbound)
function ‘<next-unread-mailbox>’ in the index can be used to immediately
open the next folder with unread mail (if any).


File: mutt.info,  Node: Monitoring New Mail,  Next: Calculating Mailbox Message Counts,  Prev: Polling For New Mail,  Up: New Mail Detection

4.13.3 Monitoring New Mail
--------------------------

When the _Inotify_ mechanism for monitoring of files is supported (Linux
only) and not disabled at compilation time, Mutt immediately notifies
about new mail for all folders configured via the ‘mailboxes’ (*note
Monitoring Incoming Mail::) command (excepting those specified with the
‘-nopoll’ flag).  Dependent on mailbox format (*note Mailbox Formats::)
also added _old_ mails are tracked (not for Maildir).

   No configuration variables are available.  Trace output is given when
debugging is enabled via command line option (*note Command line
options::) ‘-d3’.  The lower level 2 only shows errors, the higher level
5 all including raw Inotify events.

     *Note*

     Getting events about new mail is limited to the capabilities of the
     underlying mechanism.  _Inotify_ only reports local changes, i.  e.
     new mail notification works for mails delivered by an agent on the
     same machine as Mutt, but not when delivered remotely on a network
     file system as NFS. Also the monitoring handles might fail in rare
     conditions, so you better don’t completely rely on this feature.


File: mutt.info,  Node: Calculating Mailbox Message Counts,  Prev: Monitoring New Mail,  Up: New Mail Detection

4.13.4 Calculating Mailbox Message Counts
-----------------------------------------

If $mail_check_stats (*note mail_check_stats::) is set, Mutt will
periodically calculate the unread, flagged, and total message counts for
each mailbox watched by the ‘mailboxes’ command.  (Note: IMAP mailboxes
only support unread and total counts).  This calculation takes place at
the same time as new mail polling, but is controlled by a separate
timer: $mail_check_stats_interval (*note mail_check_stats_interval::).

   The sidebar can display these message counts.  See $sidebar_format
(*note sidebar_format::).


File: mutt.info,  Node: Editing Threads,  Next: Delivery Status Notification [DSN] Support,  Prev: New Mail Detection,  Up: Advanced Usage

4.14 Editing Threads
====================

Mutt has the ability to dynamically restructure threads that are broken
either by misconfigured software or bad behavior from some
correspondents.  This allows to clean your mailboxes from these
annoyances which make it hard to follow a discussion.

* Menu:

* Linking Threads::
* Breaking Threads::


File: mutt.info,  Node: Linking Threads,  Next: Breaking Threads,  Up: Editing Threads

4.14.1 Linking Threads
----------------------

Some mailers tend to ‘forget’ to correctly set the ‘In-Reply-To:’ and
‘References:’ headers when replying to a message.  This results in
broken discussions because Mutt has not enough information to guess the
correct threading.  You can fix this by tagging the reply, then moving
to the parent message and using the ‘<link-threads>’ function (bound to
& by default).  The reply will then be connected to this parent message.

   You can also connect multiple children at once, tagging them and
using the ‘<tag-prefix>’ command (‘;’) or the $auto_tag (*note
auto_tag::) option.


File: mutt.info,  Node: Breaking Threads,  Prev: Linking Threads,  Up: Editing Threads

4.14.2 Breaking Threads
-----------------------

On mailing lists, some people are in the bad habit of starting a new
discussion by hitting ‘reply’ to any message from the list and changing
the subject to a totally unrelated one.  You can fix such threads by
using the ‘<break-thread>’ function (bound by default to #), which will
turn the subthread starting from the current message into a whole
different thread.


File: mutt.info,  Node: Delivery Status Notification [DSN] Support,  Next: Start a WWW Browser on URLs,  Prev: Editing Threads,  Up: Advanced Usage

4.15 Delivery Status Notification (DSN) Support
===============================================

RFC1894 defines a set of MIME content types for relaying information
about the status of electronic mail messages.  These can be thought of
as ‘return receipts.’

   To support DSN, there are two variables.  $dsn_notify (*note
dsn_notify::) is used to request receipts for different results (such as
failed message, message delivered, etc.).  $dsn_return (*note
dsn_return::) requests how much of your message should be returned with
the receipt (headers or full message).

   When using $sendmail (*note sendmail::) for mail delivery, you need
to use either Berkeley sendmail 8.8.x (or greater) a MTA supporting DSN
command line options compatible to Sendmail: The -N and -R options can
be used by the mail client to make requests as to what type of status
messages should be returned.  Please consider your MTA documentation
whether DSN is supported.

   For SMTP delivery using $smtp_url (*note smtp_url::), it depends on
the capabilities announced by the server whether Mutt will attempt to
request DSN or not.


File: mutt.info,  Node: Start a WWW Browser on URLs,  Next: Echoing Text,  Prev: Delivery Status Notification [DSN] Support,  Up: Advanced Usage

4.16 Start a WWW Browser on URLs
================================

If a message contains URLs, it is efficient to get a menu with all the
URLs and start a WWW browser on one of them.  This functionality is
provided by the external urlview program which can be retrieved at
https://github.com/sigpipe/urlview (https://github.com/sigpipe/urlview)
and the configuration commands:


     macro index \cb |urlview\n
     macro pager \cb |urlview\n


File: mutt.info,  Node: Echoing Text,  Next: Message Composition Flow,  Prev: Start a WWW Browser on URLs,  Up: Advanced Usage

4.17 Echoing Text
=================

Usage:

     echo message

   You can print messages to the message window using the "echo"
command.  This might be useful after a macro finishes executing.  After
printing the message, echo will pause for the number of seconds
specified by $sleep_time (*note sleep_time::).


     echo "Sourcing muttrc file"

     unset confirmappend
     macro index ,a "<save-message>=archive<enter><enter-command>echo 'Saved to archive'<enter>"


File: mutt.info,  Node: Message Composition Flow,  Next: Batch Composition Flow,  Prev: Echoing Text,  Up: Advanced Usage

4.18 Message Composition Flow
=============================

This is a brief overview of the steps Mutt takes during message
composition.  It also shows the order and timing of hook execution.

   • Reply envelope settings.  $reverse_name (*note reverse_name::)
     processing.  To, Cc, Subject, References header defaults.

   • my_hdr (*note User-Defined Headers::) processing for To, Cc, Bcc,
     Subject headers.

   • Prompts for To, Cc, Bcc, Subject headers.  See $askcc (*note
     askcc::), $askbcc (*note askbcc::), $fast_reply (*note
     fast_reply::).

   • From header setting.  Note: this is so send-hook (*note Change
     Settings Based Upon Message Recipients::)s below can match ~P, but
     From is re-set further below in case a send-hook changes the value.

   • reply-hook (*note reply-hook::)

   • send-hook (*note Change Settings Based Upon Message Recipients::)

   • From header setting.

   • my_hdr (*note User-Defined Headers::) processing for From,
     Reply-To, Message-ID and user-defined headers.  The To, Cc, Bcc,
     Subject, and Return-Path headers are ignored at this stage.

   • Message body and signature generation.

   • send2-hook (*note send2-hook::)

   • $realname (*note realname::) part of From header setting.

   • $editor (*note editor::) invocation for the message.

   • send2-hook (*note send2-hook::)

   • Cryptographic settings.

   • fcc-hook (*note Specify Default Fcc; Mailbox When Composing::).
     Fcc setting.

   • Compose menu (*note The Compose Menu::).  Note: send2-hook (*note
     send2-hook::) is evaluated each time the headers are changed.

   • $send_multipart_alternative (*note send_multipart_alternative::)
     generation.

   • Message encryption and signing.  Key selection.

   • Fcc saving if $fcc_before_send (*note fcc_before_send::) is set.
     (Note the variable documentation for caveats of Fcc’ing before
     sending.)

   • Message sending.

   • Fcc saving if $fcc_before_send (*note fcc_before_send::) is unset
     (the default).  Note: prior to version 1.12, the Fcc was saved
     before sending the message.  It is now by default saved afterwards,
     but if the saving fails, the user is prompted.


File: mutt.info,  Node: Batch Composition Flow,  Next: Using MuttLisp [EXPERIMENTAL],  Prev: Message Composition Flow,  Up: Advanced Usage

4.19 Batch Composition Flow
===========================

In batch mode, Mutt performs less steps than interactive mode.
Encryption and Signing are not supported.

   • my_hdr (*note User-Defined Headers::) processing for To, Cc, Bcc
     headers.  (Subject is not processed.)

   • From header setting.  Note: this is so send-hook (*note Change
     Settings Based Upon Message Recipients::)s below can match ~P, but
     From is re-set further below in case a send-hook changes the value.

   • send-hook (*note Change Settings Based Upon Message Recipients::)

   • From header setting.

   • my_hdr (*note User-Defined Headers::) processing for From,
     Reply-To, Message-ID and user-defined headers.  The To, Cc, Bcc,
     Subject, and Return-Path headers are ignored at this stage.

   • Message body is copied from stdin.  $signature (*note signature::)
     is not appended in batch mode.

   • send2-hook (*note send2-hook::)

   • $realname (*note realname::) part of From header setting.

   • fcc-hook (*note Specify Default Fcc; Mailbox When Composing::).
     Fcc setting.

   • $send_multipart_alternative (*note send_multipart_alternative::)
     generation.

   • Fcc saving if $fcc_before_send (*note fcc_before_send::) is set.
     (Note the variable documentation for caveats of Fcc’ing before
     sending.)

   • Message sending.

   • Fcc saving if $fcc_before_send (*note fcc_before_send::) is unset
     (the default).  Note: prior to version 1.12, the Fcc was saved
     before sending the message.  It is now by default saved afterwards,
     but if the saving fails, the user is prompted.


File: mutt.info,  Node: Using MuttLisp [EXPERIMENTAL],  Next: Miscellany,  Prev: Batch Composition Flow,  Up: Advanced Usage

4.20 Using MuttLisp (EXPERIMENTAL)
==================================

MuttLisp is a Lisp-like enhancement for the Mutt configuration file.  It
is currently experimental, meaning new releases may change or break
syntax.  MuttLisp is not a real language, and is not meant to be an
alternative to macros.  The features are purposely minimal, with the
actual work still being done by Mutt commands (*note Configuration
Commands::).

   There are two ways to invoke MuttLisp: via the ‘run’ command, or
interpolated as a command argument.

* Menu:

* Running a command generated by MuttLisp::
* Interpolating MuttLisp in a Command Argument::
* MuttLisp Syntax::
* MuttLisp Functions::
* Examples: Examples <1>.


File: mutt.info,  Node: Running a command generated by MuttLisp,  Next: Interpolating MuttLisp in a Command Argument,  Up: Using MuttLisp [EXPERIMENTAL]

4.20.1 Running a command generated by MuttLisp
----------------------------------------------

Usage:

     run MuttLisp

   The ‘run’ command evaluates the MuttLisp argument.  The output of the
MuttLisp is then executed as a Mutt command, as if it were typed in the
muttrc instead.


     run (concat "set my_name = '" \
           (or $ENV_NAME "Test User") "'")

       ==> generates and runs the line:
           set my_name = 'Test User'

   This will set the Mutt User-Defined Variable (*note User-Defined
Variables::) ‘$my_name’ to either the environment variable $ENV_NAME, if
defined, or else "Test User".


File: mutt.info,  Node: Interpolating MuttLisp in a Command Argument,  Next: MuttLisp Syntax,  Prev: Running a command generated by MuttLisp,  Up: Using MuttLisp [EXPERIMENTAL]

4.20.2 Interpolating MuttLisp in a Command Argument
---------------------------------------------------

The second way of running is directly as a command argument.  An
unquoted parenthesis expression will be evaluated, and the result
substituted as the argument.

   To avoid breaking existing configurations, this is disabled by
default.  It can be enabled by setting $muttlisp_inline_eval (*note
muttlisp_inline_eval::).  Before doing so, you should review your Mutt
configuration to ensure you don’t have any bare parenthesis expressions
elsewhere, such as the regexp parameter of a folder-hook (*note Setting
Variables Based Upon Mailbox::).  These can typically be surrounded by
single or double-quotes to prevent being evaluated as MuttLisp.


     set my_name = (or $ENV_NAME "Test User")

   The result of the MuttLisp is directly assigned as the argument.  It
isn’t reinterpreted, so there is no need for the outer quotes.  This is
in contrast with the run (*note Running a command generated by
MuttLisp::) command, where the output is reinterpreted by the muttrc
parser.


File: mutt.info,  Node: MuttLisp Syntax,  Next: MuttLisp Functions,  Prev: Interpolating MuttLisp in a Command Argument,  Up: Using MuttLisp [EXPERIMENTAL]

4.20.3 MuttLisp Syntax
----------------------

MuttLisp was inspired by Lisp, and so follows the same basic syntax.
All statements are surrounded by parenthesis.  The first argument inside
the parenthesis is a function to invoke.  The remaining arguments are
passed as parameters.

   The arguments to functions are read and evaluated using muttrc syntax
(*note Syntax of Initialization Files::).  This means Mutt variables or
environment variables can be passed directly, or interpolated inside a
double-quoted string.

   Although the arguments to a function are evaluated, the result of the
function call is not.


     echo (concat '$' 'spoolfile')
       ==> $spoolfile

   MuttLisp has no types - everything is stored and evaluated as a
string, just as with the muttrc.  True is defined as a non-empty string,
and false as the empty string.

   The muttrc is evaluated line by line, and MuttLisp is similarly
constrained.  Input can be continued on more than one line by placing a
backslash at the end of the line.


File: mutt.info,  Node: MuttLisp Functions,  Next: Examples <1>,  Prev: MuttLisp Syntax,  Up: Using MuttLisp [EXPERIMENTAL]

4.20.4 MuttLisp Functions
-------------------------

* Menu:

* concat::
* quote::
* equal::
* not::
* and::
* or::
* if::


File: mutt.info,  Node: concat,  Next: quote,  Up: MuttLisp Functions

4.20.4.1 concat
...............

Combines all arguments into a single string.


     echo (concat one two three)
       ==> onetwothree


File: mutt.info,  Node: quote,  Next: equal,  Prev: concat,  Up: MuttLisp Functions

4.20.4.2 quote
..............

Prevents interpretation of the list.  Note that the list must still obey
MuttLisp syntax: single quotes, double quotes, backticks, and
parenthesis are still parsed prior to ‘quote’ running and must be
matching.


     echo (quote one two three)
       ==> one two three

     echo (quote $spoolfile)
       ==> $spoolfile

     echo (quote (one two three))
       ==> (one two three)


File: mutt.info,  Node: equal,  Next: not,  Prev: quote,  Up: MuttLisp Functions

4.20.4.3 equal
..............

Performs a case-sensitive comparison of each argument.  Stops evaluating
arguments when it finds the first one that is not equal.  Returns "t" if
they are all equal, and the empty string if not.


     echo (equal one one)
       ==> "t"

     echo (equal one `echo one`)
       ==> "t"

     echo (equal one one two `echo three`)
       ==> ""
       note: `echo three` does not execute.

     echo (equal "one two" `echo one two`)
       ==> ""
       note: backticks generate two arguments "one" and "two"

     echo (equal "one two" "`echo one two`")
       ==> "t"
       note: backticks inside double quotes generates a single argument: "one two"


File: mutt.info,  Node: not,  Next: and,  Prev: equal,  Up: MuttLisp Functions

4.20.4.4 not
............

Accepts a single argument only.  Returns "t" if the argument evaluates
to the empty string.  Otherwise returns the empty string.


     echo (not one)
       ==> ""

     echo (not "")
       ==> "t"

     echo (not (equal one two))
       ==> "t"


File: mutt.info,  Node: and,  Next: or,  Prev: not,  Up: MuttLisp Functions

4.20.4.5 and
............

Returns the first argument that evaluates to the empty string.
Otherwise returns the last argument, or "t" if there are no arguments.


     echo (and one two)
       ==> "two"

     echo (and "" two `echo three`)
       ==> ""
       note: `echo three` does not execute.

     echo (and)
       ==> "t"


File: mutt.info,  Node: or,  Next: if,  Prev: and,  Up: MuttLisp Functions

4.20.4.6 or
...........

Returns the first argument that evaluates to a non-empty string.
Otherwise returns the empty string.


     echo (or one two)
       ==> "one"

     echo (or "" two `echo three`)
       ==> "two"
       note: `echo three` does not execute.

     echo (or)
       ==> ""


File: mutt.info,  Node: if,  Prev: or,  Up: MuttLisp Functions

4.20.4.7 if
...........

Requires 2 or 3 arguments.  The first is a conditional.  If it evaluates
to "true" (a non-empty string), the second argument is evaluated and
returned.  Otherwise the third argument is evaluated and returned.


     echo (if a one two)
       ==> "one"

     echo (if "" one two)
       ==> "two"

     set spoolfile = "/var/mail/user"
     echo (if (equal $spoolfile "/var/mail/user") yes no)
       ==> "yes"

   Note that boolean configuration variables evaluate to the strings
"yes" or "no".  You can see the value of other kinds of configuration
variables using the echo (*note Echoing Text::) command.


     unset allow_ansi
     echo $allow_ansi
       ===> "no"

     # the correct way to test a boolean:
     echo (if (equal $allow_ansi "yes") "set" "unset")
       ===> "unset"

     # the incorrect way to test a boolean:
     echo (if $allow_ansi "set" "unset")
       ===> "set"


File: mutt.info,  Node: Examples <1>,  Prev: MuttLisp Functions,  Up: Using MuttLisp [EXPERIMENTAL]

4.20.5 Examples
---------------

It’s important to remember that function arguments are evaluated, but
the result is not.  Also, the result of an interpolated command argument
is used directly, and needs no quoting.


     # A three-way toggle of $index_format:

     set muttlisp_inline_eval
     set my_idx1 = "one"
     set my_idx2 = "two"
     set my_idx3 = "three"
     set index_format = $my_idx1

     macro index i '<enter-command>set index_format =  \
       (or                                             \
         (if (equal $index_format $my_idx1) $my_idx2)  \
         (if (equal $index_format $my_idx2) $my_idx3)  \
         $my_idx1) \
     <enter>'

   The output of the run command is re-evaluated by the muttrc parser.
So it’s important to pay more attention to quoting issues when
generating the command string below.


     # Conditionally set up background editing in tmux or GNU Screen:

     run \
       (if (or $STY $TMUX)                             \
         (concat                                       \
           'set background_edit;'                      \
           'set editor = "bgedit-screen-tmux.sh vim"') \
         (concat                                       \
           'unset background_edit;'                    \
           'set editor = "vim"'))

   Because backticks are evaluated by MuttLisp too, we need to use the
run command below and pay close attention to quoting.


     # Use a Mutt variable inside backticks.

     set spoolfile = "/var/mail/testuser"

     # This will generate and then run the command string:
     #   set my_var = "`~/bin/myscript.sh /var/mail/testuser`"
     run                                       \
       (concat                                 \
          'set my_var = "`~/bin/myscript.sh '  \
          $spoolfile                           \
          '`"')


File: mutt.info,  Node: Miscellany,  Prev: Using MuttLisp [EXPERIMENTAL],  Up: Advanced Usage

4.21 Miscellany
===============

This section documents various features that fit nowhere else.

Address normalization
     Mutt normalizes all e-mail addresses to the simplest form possible.
     If an address contains a realname, the form _Joe User
     <joe@example.com>_ is used and the pure e-mail address without
     angle brackets otherwise, i.e.  just _joe@example.com_.

     This normalization affects all headers Mutt generates including
     aliases.

Initial folder selection
     The folder Mutt opens at startup is determined as follows: the
     folder specified in the ‘$MAIL’ environment variable if present.
     Otherwise, the value of ‘$MAILDIR’ is taken into account.  If that
     isn’t present either, Mutt takes the user’s mailbox in the
     mailspool as determined at compile-time (which may also reside in
     the home directory).  The $spoolfile (*note spoolfile::) setting
     overrides this selection.  Highest priority has the mailbox given
     with the ‘-f’ command line option.


File: mutt.info,  Node: Mutt's MIME Support,  Next: Optional Features,  Prev: Advanced Usage,  Up: Top

5 Mutt’s MIME Support
*********************

Quite a bit of effort has been made to make Mutt the premier text-mode
MIME MUA. Every effort has been made to provide the functionality that
the discerning MIME user requires, and the conformance to the standards
wherever possible.  When configuring Mutt for MIME, there are two extra
types of configuration files which Mutt uses.  One is the ‘mime.types’
file, which contains the mapping of file extensions to IANA MIME types.
The other is the ‘mailcap’ file, which specifies the external commands
to use for handling specific MIME types.

* Menu:

* Using MIME in Mutt::
* MIME Type Configuration with mime.types: MIME Type Configuration with mime_types.
* MIME Viewer Configuration with Mailcap::
* MIME Autoview::
* MIME Multipart/Alternative::
* Attachment Searching and Counting::
* MIME Lookup::


File: mutt.info,  Node: Using MIME in Mutt,  Next: MIME Type Configuration with mime_types,  Up: Mutt's MIME Support

5.1 Using MIME in Mutt
======================

* Menu:

* MIME Overview::
* Viewing MIME Messages in the Pager::
* The Attachment Menu::
* The Compose Menu::


File: mutt.info,  Node: MIME Overview,  Next: Viewing MIME Messages in the Pager,  Up: Using MIME in Mutt

5.1.1 MIME Overview
-------------------

MIME is short for ‘Multipurpose Internet Mail Extension’ and describes
mechanisms to internationalize and structure mail messages.  Before the
introduction of MIME, messages had a single text part and were limited
to us-ascii header and content.  With MIME, messages can have
attachments (and even attachments which itself have attachments and thus
form a tree structure), nearly arbitrary characters can be used for
sender names, recipients and subjects.

   Besides the handling of non-ascii characters in message headers, to
Mutt the most important aspect of MIME are so-called MIME types.  These
are constructed using a _major_ and _minor_ type separated by a forward
slash.  These specify details about the content that follows.  Based
upon these, Mutt decides how to handle this part.  The most popular
major type is ‘‘text’’ with minor types for plain text, HTML and various
other formats.  Major types also exist for images, audio, video and of
course general application data (e.g.  to separate cryptographically
signed data with a signature, send office documents, and in general
arbitrary binary data).  There’s also the ‘multipart’ major type which
represents the root of a subtree of MIME parts.  A list of supported
MIME types can be found in *note Supported MIME types::.

   MIME also defines a set of encoding schemes for transporting MIME
content over the network: ‘7bit’, ‘8bit’, ‘quoted-printable’, ‘base64’
and ‘binary’.  There’re some rules when to choose what for encoding
headers and/or body (if needed), and Mutt will in general make a good
choice.

   Mutt does most of MIME encoding/decoding behind the scenes to form
messages conforming to MIME on the sending side.  On reception, it can
be flexibly configured as to how what MIME structure is displayed (and
if it’s displayed): these decisions are based on the content’s MIME
type.  There are three areas/menus in dealing with MIME: the pager
(while viewing a message), the attachment menu and the compose menu.


File: mutt.info,  Node: Viewing MIME Messages in the Pager,  Next: The Attachment Menu,  Prev: MIME Overview,  Up: Using MIME in Mutt

5.1.2 Viewing MIME Messages in the Pager
----------------------------------------

When you select a message from the index and view it in the pager, Mutt
decodes as much of a message as possible to a text representation.  Mutt
internally supports a number of MIME types, including the ‘text’ major
type (with all minor types), the ‘message/rfc822’ (mail messages) type
and some ‘multipart’ types.  In addition, it recognizes a variety of PGP
MIME types, including PGP/MIME and ‘application/pgp’.

   Mutt will denote attachments with a couple lines describing them.
These lines are of the form:


     [-- Attachment #1: Description --]
     [-- Type: text/plain, Encoding: 7bit, Size: 10000 --]

   Where the _Description_ is the description or filename given for the
attachment, and the _Encoding_ is one of the already mentioned content
encodings.

   If Mutt cannot deal with a MIME type, it will display a message like:


     [-- image/gif is unsupported (use 'v' to view this part) --]


File: mutt.info,  Node: The Attachment Menu,  Next: The Compose Menu,  Prev: Viewing MIME Messages in the Pager,  Up: Using MIME in Mutt

5.1.3 The Attachment Menu
-------------------------

The default binding for ‘<view-attachments>’ is ‘v’, which displays the
attachment menu for a message.  The attachment menu displays a list of
the attachments in a message.  From the attachment menu, you can save,
print, pipe, delete, and view attachments.  You can apply these
operations to a group of attachments at once, by tagging the attachments
and by using the ‘<tag-prefix>’ operator.  You can also reply to the
current message from this menu, and only the current attachment (or the
attachments tagged) will be quoted in your reply.  You can view
attachments as text, or view them using the mailcap viewer definition
(the mailcap mechanism is explained later in detail).

   Finally, you can apply the usual message-related functions (like
‘<resend-message>’ (*note resend-message::), and the ‘<reply>’ and
‘<forward>’ functions) to attachments of type ‘message/rfc822’.

   See table *note Default Attachment Menu Bindings:: for all available
functions.

* Menu:

* Viewing Attachments::


File: mutt.info,  Node: Viewing Attachments,  Up: The Attachment Menu

5.1.3.1 Viewing Attachments
...........................

There are four(!)  ways of viewing attachments, so the functions deserve
some extra explanation.

‘<view-mailcap>’ (default keybinding: m)
     This will use the first matching mailcap entry.

     If no matching mailcap entries are found, it will abort with an
     error message.

‘<view-attach>’ (default keybinding: <Enter>)
     Mutt will display internally supported MIME types (see *note
     Viewing MIME Messages in the Pager::) in the pager.  This will
     respect auto_view (*note MIME Autoview::) settings, to determine
     whether to use a ‘copiousoutput’ mailcap entry or just directly
     display the attachment.

     Other MIME types will use the first matching mailcap entry.

     If no matching mailcap entries are found, the attachment will be
     displayed in the pager as raw text.

‘<view-pager>’
     Mutt will use the first matching ‘copiousoutput’ mailcap entry to
     display the attachment in the pager (regardless of auto_view (*note
     MIME Autoview::) settings).

     If no matching mailcap entries are found, the attachment will be
     displayed in the pager as raw text.

‘<view-text>’ (default keybinding: T)
     The attachment will always be displayed in the pager as raw text.


File: mutt.info,  Node: The Compose Menu,  Prev: The Attachment Menu,  Up: Using MIME in Mutt

5.1.4 The Compose Menu
----------------------

The compose menu is the menu you see before you send a message.  It
allows you to edit the recipient list, the subject, and other aspects of
your message.  It also contains a list of the attachments of your
message, including the main body.  From this menu, you can print, copy,
filter, pipe, edit, compose, review, and rename an attachment or a list
of tagged attachments.  You can also modifying the attachment
information, notably the type, encoding and description.

   Attachments appear as follows by default:


     - 1 [text/plain, 7bit, 1K]           /tmp/mutt-euler-8082-0 <no description>
       2 [applica/x-gunzip, base64, 422K] ~/src/mutt-0.85.tar.gz <no description>

   The ‘-’ denotes that Mutt will delete the file after sending (or
postponing, or canceling) the message.  It can be toggled with the
‘<toggle-unlink>’ command (default: u).  The next field is the MIME
content-type, and can be changed with the ‘<edit-type>’ command
(default: ^T). The next field is the encoding for the attachment, which
allows a binary message to be encoded for transmission on 7bit links.
It can be changed with the ‘<edit-encoding>’ command (default: ^E). The
next field is the size of the attachment, rounded to kilobytes or
megabytes.  The next field is the filename, which can be changed with
the ‘<rename-file>’ command (default: R). The final field is the
description of the attachment, and can be changed with the
‘<edit-description>’ command (default: d).  See $attach_format (*note
attach_format::) for a full list of available expandos to format this
display to your needs.


File: mutt.info,  Node: MIME Type Configuration with mime_types,  Next: MIME Viewer Configuration with Mailcap,  Prev: Using MIME in Mutt,  Up: Mutt's MIME Support

5.2 MIME Type Configuration with mime.types
===========================================

To get most out of MIME, it’s important that a MIME part’s content type
matches the content as closely as possible so that the recipient’s
client can automatically select the right viewer for the content.
However, there’s no reliable way for Mutt to know how to detect every
possible file type.  Instead, it uses a simple plain text mapping file
that specifies what file extension corresponds to what MIME type.  This
file is called ‘mime.types’.

   When you add an attachment to your mail message, Mutt searches your
personal ‘mime.types’ file at ‘$HOME/.mime.types’, and then the system
‘mime.types’ file at ‘/usr/local/share/mutt/mime.types’ or
‘/etc/mime.types’

   Each line starts with the full MIME type, followed by a space and
space-separated list of file extensions.  For example you could use:


   *mime.types*


     application/postscript          ps eps
     application/pgp                 pgp
     audio/x-aiff                    aif aifc aiff

   A sample ‘mime.types’ file comes with the Mutt distribution, and
should contain most of the MIME types you are likely to use.

   If Mutt can not determine the MIME type by the extension of the file
you attach, it will run the command specified in
$mime_type_query_command (*note mime_type_query_command::).  If that
command is not specified, Mutt will look at the file.  If the file is
free of binary information, Mutt will assume that the file is plain
text, and mark it as ‘text/plain’.  If the file contains binary
information, then Mutt will mark it as ‘application/octet-stream’.  You
can change the MIME type that Mutt assigns to an attachment by using the
‘<edit-type>’ command from the compose menu (default: ^T), see *note
Supported MIME types:: for supported major types.  Mutt recognizes all
of these if the appropriate entry is found in the ‘mime.types’ file.
Non-recognized mime types should only be used if the recipient of the
message is likely to be expecting such attachments.


   *Supported MIME types*

MIME major type          Standard                 Description
‘application’            yes                      General application
                                                  data
‘audio’                  yes                      Audio data
‘image’                  yes                      Image data
‘message’                yes                      Mail messages, message
                                                  status information
‘model’                  yes                      VRML and other
                                                  modeling data
‘multipart’              yes                      Container for other
                                                  MIME parts
‘text’                   yes                      Text data
‘video’                  yes                      Video data
‘chemical’               no                       Mostly molecular data

   MIME types are not arbitrary, they need to be assigned by IANA
(http://www.iana.org/assignments/media-types/).


File: mutt.info,  Node: MIME Viewer Configuration with Mailcap,  Next: MIME Autoview,  Prev: MIME Type Configuration with mime_types,  Up: Mutt's MIME Support

5.3 MIME Viewer Configuration with Mailcap
==========================================

Mutt supports RFC 1524 MIME Configuration, in particular the Unix
specific format specified in Appendix A of RFC 1524.  This file format
is commonly referred to as the ‘mailcap’ format.  Many MIME compliant
programs utilize the mailcap format, allowing you to specify handling
for all MIME types in one place for all programs.  Programs known to use
this format include Firefox, lynx and metamail.

   In order to handle various MIME types that Mutt doesn’t have built-in
support for, it parses a series of external configuration files to find
an external handler.  The default search string for these files is a
colon delimited list containing the following files:

  1. ‘$HOME/.mailcap’

  2. ‘$PKGDATADIR/mailcap’

  3. ‘$SYSCONFDIR/mailcap’

  4. ‘/etc/mailcap’

  5. ‘/usr/etc/mailcap’

  6. ‘/usr/local/etc/mailcap’

   where ‘$HOME’ is your home directory.  The ‘$PKGDATADIR’ and the
‘$SYSCONFDIR’ directories depend on where Mutt is installed: the former
is the default for shared data, the latter for system configuration
files.

   The default search path can be obtained by running the following
command:


     mutt -nF /dev/null -Q mailcap_path

   In particular, the metamail distribution will install a mailcap file,
usually as ‘/usr/local/etc/mailcap’, which contains some baseline
entries.

* Menu:

* The Basics of the Mailcap File::
* Secure Use of Mailcap::
* Advanced Mailcap Usage::
* Example Mailcap Files::


File: mutt.info,  Node: The Basics of the Mailcap File,  Next: Secure Use of Mailcap,  Up: MIME Viewer Configuration with Mailcap

5.3.1 The Basics of the Mailcap File
------------------------------------

A mailcap file consists of a series of lines which are comments, blank,
or definitions.

   A comment line consists of a # character followed by anything you
want.

   A blank line is blank.

   A definition line consists of a content type, a view command, and any
number of optional fields.  Each field of a definition line is divided
by a semicolon ‘;’ character.

   The content type is specified in the MIME standard ‘type/subtype’
notation.  For example, ‘text/plain’, ‘text/html’, ‘image/gif’, etc.  In
addition, the mailcap format includes two formats for wildcards, one
using the special ‘*’ subtype, the other is the implicit wild, where you
only include the major type.  For example, ‘image/*’, or ‘video’ will
match all image types and video types, respectively.

   The view command is a Unix command for viewing the type specified.
There are two different types of commands supported.  The default is to
send the body of the MIME message to the command on stdin.  You can
change this behavior by using ‘%s’ as a parameter to your view command.
This will cause Mutt to save the body of the MIME message to a temporary
file, and then call the view command with the ‘%s’ replaced by the name
of the temporary file.  In both cases, Mutt will turn over the terminal
to the view program until the program quits, at which time Mutt will
remove the temporary file if it exists.  This means that mailcap does
_not_ work out of the box with programs which detach themselves from the
terminal right after starting, like ‘open’ on Mac OS X. In order to
nevertheless use these programs with mailcap, you probably need custom
shell scripts.

   So, in the simplest form, you can send a ‘text/plain’ message to the
external pager more on standard input:


     text/plain; more

   Or, you could send the message as a file:


     text/plain; more %s

   Perhaps you would like to use lynx to interactively view a
‘text/html’ message:


     text/html; lynx %s

   In this case, lynx does not support viewing a file from standard
input, so you must use the ‘%s’ syntax.

     *Note*

     _Some older versions of lynx contain a bug where they will check
     the mailcap file for a viewer for ‘text/html’.  They will find the
     line which calls lynx, and run it.  This causes lynx to
     continuously spawn itself to view the object._

   On the other hand, maybe you don’t want to use lynx interactively,
you just want to have it convert the ‘text/html’ to ‘text/plain’, then
you can use:


     text/html; lynx -dump %s | more

   Perhaps you wish to use lynx to view ‘text/html’ files, and a pager
on all other text formats, then you would use the following:


     text/html; lynx %s
     text/*; more


File: mutt.info,  Node: Secure Use of Mailcap,  Next: Advanced Mailcap Usage,  Prev: The Basics of the Mailcap File,  Up: MIME Viewer Configuration with Mailcap

5.3.2 Secure Use of Mailcap
---------------------------

The interpretation of shell meta-characters embedded in MIME parameters
can lead to security problems in general.  Mutt tries to quote
parameters in expansion of ‘%s’ syntaxes properly, and avoids risky
characters by substituting them, see the $mailcap_sanitize (*note
mailcap_sanitize::) variable.

   Although Mutt’s procedures to invoke programs with mailcap seem to be
safe, there are other applications parsing mailcap, maybe taking less
care of it.  Therefore you should pay attention to the following rules:

   _Keep the %-expandos away from shell quoting._  Don’t quote them with
single or double quotes.  Mutt does this for you, the right way, as
should any other program which interprets mailcap.  Don’t put them into
backtick expansions.  Be highly careful with evil statements, and avoid
them if possible at all.  Trying to fix broken behavior with quotes
introduces new leaks — there is no alternative to correct quoting in the
first place.

   If you have to use the %-expandos’ values in context where you need
quoting or backtick expansions, put that value into a shell variable and
reference the shell variable where necessary, as in the following
example (using ‘$charset’ inside the backtick expansion is safe, since
it is not itself subject to any further expansion):


     text/test-mailcap-bug; cat %s; copiousoutput; test=charset=%{charset} \
             && test "`echo $charset | tr '[A-Z]' '[a-z]'`" != iso-8859-1


File: mutt.info,  Node: Advanced Mailcap Usage,  Next: Example Mailcap Files,  Prev: Secure Use of Mailcap,  Up: MIME Viewer Configuration with Mailcap

5.3.3 Advanced Mailcap Usage
----------------------------

* Menu:

* Optional Fields::
* Search Order::
* Command Expansion::


File: mutt.info,  Node: Optional Fields,  Next: Search Order,  Up: Advanced Mailcap Usage

5.3.3.1 Optional Fields
.......................

In addition to the required content-type and view command fields, you
can add semi-colon ‘;’ separated fields to set flags and other options.
Mutt recognizes the following optional fields:

copiousoutput
     This flag tells Mutt that the command passes possibly large amounts
     of text on standard output.  This causes Mutt to invoke a pager
     (either the internal pager or the external pager defined by the
     pager variable) on the output of the view command.  Without this
     flag, Mutt assumes that the command is interactive.  One could use
     this to replace the pipe to ‘more’ in the ‘lynx -dump’ example in
     the Basic section:


          text/html; lynx -dump %s ; copiousoutput

     This will cause lynx to format the ‘text/html’ output as
     ‘text/plain’ and Mutt will use your standard pager to display the
     results.

     Mutt will set the ‘COLUMNS’ environment variable to the width of
     the pager.  Some programs make use of this environment variable
     automatically.  Others provide a command line argument that can use
     this to set the output width:


          text/html; lynx -dump -width ${COLUMNS:-80} %s; copiousoutput

     Note that when using the built-in pager, _only_ entries with this
     flag will be considered a handler for a MIME type — all other
     entries will be ignored.

needsterminal
     Mutt uses this flag when viewing attachments with ‘auto_view’
     (*note MIME Autoview::), in order to decide whether it should honor
     the setting of the $wait_key (*note wait_key::) variable or not.
     When an attachment is viewed using an interactive program, and the
     corresponding mailcap entry has a _needsterminal_ flag, Mutt will
     use $wait_key (*note wait_key::) and the exit status of the program
     to decide if it will ask you to press a key after the external
     program has exited.  In all other situations it will not prompt you
     for a key.

compose=<command>
     This flag specifies the command to use to create a new attachment
     of a specific MIME type.  Mutt supports this from the compose menu.

composetyped=<command>
     This flag specifies the command to use to create a new attachment
     of a specific MIME type.  This command differs from the compose
     command in that Mutt will expect standard MIME headers on the data.
     This can be used to specify parameters, filename, description, etc.
     for a new attachment.  Mutt supports this from the compose menu.

print=<command>
     This flag specifies the command to use to print a specific MIME
     type.  Mutt supports this from the attachment and compose menus.

edit=<command>
     This flag specifies the command to use to edit a specific MIME
     type.  Mutt supports this from the compose menu, and also uses it
     to compose new attachments.  Mutt will default to the defined
     $editor (*note editor::) for text attachments.

nametemplate=<template>
     This field specifies the format for the file denoted by ‘%s’ in the
     command fields.  Certain programs will require a certain file
     extension, for instance, to correctly view a file.  For instance,
     lynx will only interpret a file as ‘text/html’ if the file ends in
     ‘.html’.  So, you would specify lynx as a ‘text/html’ viewer with a
     line in the mailcap file like:


          text/html; lynx %s; nametemplate=%s.html

test=<command>
     This field specifies a command to run to test whether this mailcap
     entry should be used.  The command is defined with the command
     expansion rules defined in the next section.  If the command
     returns 0, then the test passed, and Mutt uses this entry.  If the
     command returns non-zero, then the test failed, and Mutt continues
     searching for the right entry.  Note that the content-type must
     match before Mutt performs the test.  For example:


          text/html; firefox -remote 'openURL(%s)' ; test=RunningX
          text/html; lynx %s

     In this example, Mutt will run the program ‘RunningX’ which will
     return 0 if the X Window manager is running, and non-zero if it
     isn’t.  If ‘RunningX’ returns 0, then Mutt will run firefox to
     display the ‘text/html’ object.  If RunningX doesn’t return 0, then
     Mutt will go on to the next entry and use lynx to display the
     ‘text/html’ object.


File: mutt.info,  Node: Search Order,  Next: Command Expansion,  Prev: Optional Fields,  Up: Advanced Mailcap Usage

5.3.3.2 Search Order
....................

When searching for an entry in the mailcap file, Mutt will search for
the most useful entry for its purpose.  For instance, if you are
attempting to print an ‘image/gif’, and you have the following entries
in your mailcap file, Mutt will search for an entry with the print
command:


     image/*;        xv %s
     image/gif;      ; print= anytopnm %s | pnmtops | lpr; \
                     nametemplate=%s.gif

   Mutt will skip the ‘image/*’ entry and use the ‘image/gif’ entry with
the print command.

   In addition, you can use this with ‘auto_view’ (*note MIME
Autoview::) to denote two commands for viewing an attachment, one to be
viewed automatically, the other to be viewed interactively from the
attachment menu using the ‘<view-mailcap>’ function (bound to ‘m’ by
default).  In addition, you can then use the test feature to determine
which viewer to use interactively depending on your environment.


     text/html;      firefox -remote 'openURL(%s)' ; test=RunningX
     text/html;      lynx %s; nametemplate=%s.html
     text/html;      lynx -dump %s; nametemplate=%s.html; copiousoutput

   For ‘auto_view’ (*note MIME Autoview::), Mutt will choose the third
entry because of the ‘copiousoutput’ tag.  For interactive viewing, Mutt
will run the program ‘RunningX’ to determine if it should use the first
entry.  If the program returns non-zero, Mutt will use the second entry
for interactive viewing.  The last entry is for inline display in the
pager and the ‘<view-attach>’ function in the attachment menu.

   Entries with the ‘copiousoutput’ tag should always be specified as
the last one per type.  For non-interactive use, the last entry will
then actually be the first matching one with the tag set.  For
non-interactive use, only ‘copiousoutput’-tagged entries are considered.
For interactive use, Mutt ignores this tag and treats all entries
equally.  Therefore, if not specified last, all following entries
without this tag would never be considered for ‘<view-attach>’ because
the ‘copiousoutput’ before them matched already.


File: mutt.info,  Node: Command Expansion,  Prev: Search Order,  Up: Advanced Mailcap Usage

5.3.3.3 Command Expansion
.........................

The various commands defined in the mailcap files are passed to the
‘/bin/sh’ shell using the ‘system(3)’ function.  Before the command is
passed to ‘/bin/sh -c’, it is parsed to expand various special
parameters with information from Mutt.  The keywords Mutt expands are:

%s
     As seen in the basic mailcap section, this variable is expanded to
     a filename specified by the calling program.  This file contains
     the body of the message to view/print/edit or where the composing
     program should place the results of composition.  In addition, the
     use of this keyword causes Mutt to not pass the body of the message
     to the view/print/edit program on stdin.

%t
     Mutt will expand ‘%t’ to the text representation of the content
     type of the message in the same form as the first parameter of the
     mailcap definition line, i.e.  ‘text/html’ or ‘image/gif’.

%{<parameter>}
     Mutt will expand this to the value of the specified parameter from
     the Content-Type: line of the mail message.  For instance, if your
     mail message contains:


          Content-Type: text/plain; charset=iso-8859-1

     then Mutt will expand ‘%{charset}’ to ‘iso-8859-1’.  The default
     metamail mailcap file uses this feature to test the charset to
     spawn an xterm using the right charset to view the message.

\%
     This will be replaced by a literal ‘%’.

   Mutt does not currently support the ‘%F’ and ‘%n’ keywords specified
in RFC 1524.  The main purpose of these parameters is for multipart
messages, which is handled internally by Mutt.


File: mutt.info,  Node: Example Mailcap Files,  Prev: Advanced Mailcap Usage,  Up: MIME Viewer Configuration with Mailcap

5.3.4 Example Mailcap Files
---------------------------

This mailcap file is fairly simple and standard:


     # I'm always running X :)
     video/*;        xanim %s > /dev/null
     image/*;        xv %s > /dev/null

     # I'm always running firefox (if my computer had more memory, maybe)
     text/html;      firefox -remote 'openURL(%s)'

   This mailcap file shows quite a number of examples:


     # Use xanim to view all videos   Xanim produces a header on startup,
     # send that to /dev/null so I don't see it
     video/*;        xanim %s > /dev/null

     # Send html to a running firefox by remote
     text/html;      firefox -remote 'openURL(%s)'; test=RunningFirefox

     # If I'm not running firefox but I am running X, start firefox on the
     # object
     text/html;      firefox %s; test=RunningX

     # Else use lynx to view it as text
     text/html;      lynx %s

     # This version would convert the text/html to text/plain
     text/html;      lynx -dump %s; copiousoutput

     # I use enscript to print text in two columns to a page
     text/*;         more %s; print=enscript -2Gr %s

     # Firefox adds a flag to tell itself to view jpegs internally
     image/jpeg;xv %s; x-mozilla-flags=internal

     # Use xv to view images if I'm running X
     # In addition, this uses the \ to extend the line and set my editor
     # for images
     image/*;xv %s; test=RunningX; \
             edit=xpaint %s

     # Convert images to text using the netpbm tools
     image/*;  (anytopnm %s | pnmscale -xysize 80 46 | ppmtopgm | pgmtopbm |
     pbmtoascii -1x2 ) 2>&1 ; copiousoutput

     # Send excel spreadsheets to my NT box
     application/ms-excel; open.pl %s


File: mutt.info,  Node: MIME Autoview,  Next: MIME Multipart/Alternative,  Prev: MIME Viewer Configuration with Mailcap,  Up: Mutt's MIME Support

5.4 MIME Autoview
=================

Usage:

     auto_view mimetype [ mimetype ]… unauto_view { * | mimetype …}

   In addition to explicitly telling Mutt to view an attachment with the
MIME viewer defined in the mailcap file from the attachments menu, Mutt
has support for automatically viewing MIME attachments while in the
pager.

   For this to work, you must define a viewer in the mailcap file which
uses the ‘copiousoutput’ option to denote that it is non-interactive.
Usually, you also use the entry to convert the attachment to a text
representation which you can view in the pager.

   You then use the ‘auto_view’ configuration command to list the
content-types that you wish to view automatically.  For instance, if you
set it to:


     auto_view text/html application/x-gunzip \
       application/postscript image/gif application/x-tar-gz

   ...Mutt would try to find corresponding entries for rendering
attachments of these types as text.  A corresponding mailcap could look
like:


     text/html;      lynx -dump %s; copiousoutput; nametemplate=%s.html
     image/*;        anytopnm %s | pnmscale -xsize 80 -ysize 50 | ppmtopgm | \
                     pgmtopbm | pbmtoascii ; copiousoutput
     application/x-gunzip;   gzcat; copiousoutput
     application/x-tar-gz; gunzip -c %s | tar -tf - ; copiousoutput
     application/postscript; ps2ascii %s; copiousoutput

   ‘unauto_view’ can be used to remove previous entries from the
‘auto_view’ list.  This can be used with ‘message-hook’ (*note Change
Settings Before Formatting a Message::) to autoview messages based on
size, etc.  ‘‘unauto_view’ *’ will remove all previous entries.


File: mutt.info,  Node: MIME Multipart/Alternative,  Next: Attachment Searching and Counting,  Prev: MIME Autoview,  Up: Mutt's MIME Support

5.5 MIME Multipart/Alternative
==============================

The ‘multipart/alternative’ container type only has child MIME parts
which represent the same content in an alternative way.  This is often
used to send HTML messages which contain an alternative plain text
representation.

   Mutt has some heuristics for determining which attachment of a
‘multipart/alternative’ type to display:

  1. First, Mutt will check the ‘alternative_order’ list to determine if
     one of the available types is preferred.  It consists of a number
     of MIME types in order, including support for implicit and explicit
     wildcards.  For example:


          alternative_order text/enriched text/plain text \
            application/postscript image/*

  2. Next, Mutt will check if any of the types have a defined
     ‘auto_view’ (*note MIME Autoview::), and use that.

  3. Failing that, Mutt will look first for ‘text/enriched’, followed by
     ‘text/plain’, and finally ‘text/html’.

  4. As a last attempt, Mutt will look for any type it knows how to
     handle.

   To remove a MIME type from the ‘alternative_order’ list, use the
‘unalternative_order’ command.

   Generating ‘multipart/alternative’ content is supported via the
$send_multipart_alternative (*note send_multipart_alternative::)
quadoption and $send_multipart_alternative_filter (*note
send_multipart_alternative_filter::) filter script.  The composed
‘text/plain’ content will be piped to the filter script’s stdin.  The
output from the filter script should be the generated mime type of the
content, a blank line, and the content.  For example:


     text/html

     <html>
     <body>
     Content in html format
     </body>
     </html>

   A preview of the alternative can be viewed in the compose menu using
the functions ‘<view-alt>’ (bound to "v"), ‘<view-alt-text>’ (bound to
"Esc v"), ‘<view-alt-mailcap>’ (bound to "V"), and ‘<view-alt-pager>’
(unbound).  See *note Viewing Attachments:: for a discussion of the
differences between these viewing functions.


File: mutt.info,  Node: Attachment Searching and Counting,  Next: MIME Lookup,  Prev: MIME Multipart/Alternative,  Up: Mutt's MIME Support

5.6 Attachment Searching and Counting
=====================================

If you ever lose track of attachments in your mailboxes, Mutt’s
attachment-counting and -searching support might be for you.  You can
make your message index display the number of qualifying attachments in
each message, or search for messages by attachment count.  You also can
configure what kinds of attachments qualify for this feature with the
‘attachments’ and ‘unattachments’ commands.

   In order to provide this information, Mutt needs to fully MIME-parse
all messages affected first.  This can slow down operation especially
for remote mail folders such as IMAP because all messages have to be
downloaded first regardless whether the user really wants to view them
or not though using *note Body Caching:: usually means to download the
message just once.

   By default, Mutt will not search inside ‘multipart/alternative’
containers.  This can be changed via the $count_alternatives (*note
count_alternatives::) configuration variable.

   The syntax is:

     attachments { + | - }disposition mime-type unattachments { + | -
     }disposition mime-type attachments ? unattachments *

   _disposition_ is the attachment’s Content-Disposition type — either
‘inline’ or ‘attachment’.  You can abbreviate this to ‘I’ or ‘A’.

   The first part of a message or multipart group, if inline, is counted
separately than other inline parts.  Specify ‘root’ or ‘R’ for
_disposition_ to count these as attachments.  If this first part is of
type multipart/alternative, note that its top-level inline parts are
also counted via ‘root’ _disposition_ (if $count_alternatives (*note
count_alternatives::) is set).

   Disposition is prefixed by either a ‘+’ symbol or a ‘-’ symbol.  If
it’s a ‘+’, you’re saying that you want to allow this disposition and
MIME type to qualify.  If it’s a ‘-’, you’re saying that this
disposition and MIME type is an exception to previous ‘+’ rules.  There
are examples below of how this is useful.

   _mime-type_ is the MIME type of the attachment you want the command
to affect.  A MIME type is always of the format ‘major/minor’, where
‘major’ describes the broad category of document you’re looking at, and
‘minor’ describes the specific type within that category.  The major
part of mime-type must be literal text (or the special token ‘‘*’’), but
the minor part may be a regular expression.  (Therefore, ‘‘*/.*’’
matches any MIME type.)

   The MIME types you give to the ‘attachments’ directive are a kind of
pattern.  When you use the ‘attachments’ directive, the patterns you
specify are added to a list.  When you use ‘unattachments’, the pattern
is removed from the list.  The patterns are not expanded and matched to
specific MIME types at this time — they’re just text in a list.  They’re
only matched when actually evaluating a message.

   Some examples might help to illustrate.  The examples that are not
commented out define the default configuration of the lists.


   *Attachment counting*



     # Removing a pattern from a list removes that pattern literally. It
     # does not remove any type matching the pattern.
     #
     #  attachments   +A */.*
     #  attachments   +A image/jpeg
     #  unattachments +A */.*
     #
     # This leaves "attached" image/jpeg files on the allowed attachments
     # list. It does not remove all items, as you might expect, because the
     # second */.* is not a matching expression at this time.
     #
     # Remember: "unattachments" only undoes what "attachments" has done!
     # It does not trigger any matching on actual messages.

     # Qualify any MIME part with an "attachment" disposition, EXCEPT for
     # text/x-vcard and application/pgp parts. (PGP parts are already known
     # to mutt, and can be searched for with ~g, ~G, and ~k.)
     #
     # I've added x-pkcs7 to this, since it functions (for S/MIME)
     # analogously to PGP signature attachments. S/MIME isn't supported
     # in a stock mutt build, but we can still treat it specially here.
     #

     attachments   +A */.*
     attachments   -A text/x-vcard application/pgp.*
     attachments   -A application/x-pkcs7-.*


     # Discount all MIME parts with an "inline" disposition, unless they're
     # text/plain. (Why inline a text/plain part unless it's external to the
     # message flow?)

     attachments   +I text/plain


     # These two lines make Mutt qualify MIME containers.  (So, for example,
     # a message/rfc822 forward will count as an attachment.)  The first
     # line is unnecessary if you already have "attach-allow */.*", of
     # course.  These are off by default!  The MIME elements contained
     # within a message/* or multipart/* are still examined, even if the
     # containers themselves don't qualify.

     #attachments  +A message/.* multipart/.*
     #attachments  +I message/.* multipart/.*


     ## You probably don't really care to know about deleted attachments.
     attachments   -A message/external-body
     attachments   -I message/external-body

   Entering the command ‘‘attachments’ ?’ as a command will list your
current settings in Muttrc format, so that it can be pasted elsewhere.

   Entering the command ‘‘unattachments’ *’ as a command will Clear all
attachment settings.


File: mutt.info,  Node: MIME Lookup,  Prev: Attachment Searching and Counting,  Up: Mutt's MIME Support

5.7 MIME Lookup
===============

Usage:

     mime_lookup mimetype [ mimetype ]… unmime_lookup { * | mimetype …}

   Mutt’s ‘mime_lookup’ list specifies a list of MIME types that should
_not_ be treated according to their mailcap entry.  This option is
designed to deal with binary types such as ‘application/octet-stream’.
When an attachment’s MIME type is listed in ‘mime_lookup’, then the
extension of the filename will be compared to the list of extensions in
the ‘mime.types’ file.  The MIME type associated with this extension
will then be used to process the attachment according to the rules in
the mailcap file and according to any other configuration options (such
as ‘auto_view’) specified.  Common usage would be:


     mime_lookup application/octet-stream application/X-Lotus-Manuscript

   In addition, the ‘unmime_lookup’ command may be used to disable this
feature for any particular MIME type if it had been set, for example, in
a global ‘.muttrc’.


File: mutt.info,  Node: Optional Features,  Next: Security Considerations,  Prev: Mutt's MIME Support,  Up: Top

6 Optional Features
*******************

* Menu:

* General Notes::
* SSL/TLS Support::
* POP3 Support::
* IMAP Support::
* SMTP Support::
* OAUTHBEARER Support::
* Managing Multiple Accounts::
* Local Caching::
* Exact Address Generation::
* Sending Anonymous Messages via Mixmaster::
* Sidebar: Sidebar <1>.
* Compressed Folders Feature::
* Autocrypt::


File: mutt.info,  Node: General Notes,  Next: SSL/TLS Support,  Up: Optional Features

6.1 General Notes
=================

* Menu:

* Enabling/Disabling Features::
* URL Syntax::


File: mutt.info,  Node: Enabling/Disabling Features,  Next: URL Syntax,  Up: General Notes

6.1.1 Enabling/Disabling Features
---------------------------------

Mutt supports several of optional features which can be enabled or
disabled at compile-time by giving the _configure_ script certain
arguments.  These are listed in the ‘Optional features’ section of the
_configure –help_ output.

   Which features are enabled or disabled can later be determined from
the output of ‘mutt -v’.  If a compile option starts with ‘+’ it is
enabled and disabled if prefixed with ‘-’.  For example, if Mutt was
compiled using GnuTLS for encrypted communication instead of OpenSSL,
‘mutt -v’ would contain:


     -USE_SSL_OPENSSL +USE_SSL_GNUTLS


File: mutt.info,  Node: URL Syntax,  Prev: Enabling/Disabling Features,  Up: General Notes

6.1.2 URL Syntax
----------------

Mutt optionally supports the IMAP, POP3 and SMTP protocols which require
to access servers using URLs.  The canonical syntax for specifying URLs
in Mutt is (an item enclosed in ‘[]’ means it is optional and may be
omitted):


     proto[s]://[username[:password]@]server[:port][/path]

   _proto_ is the communication protocol: ‘imap’ for IMAP, ‘pop’ for
POP3 and ‘smtp’ for SMTP. If ‘s’ for ‘secure communication’ is appended,
Mutt will attempt to establish an encrypted communication using SSL or
TLS.

   Since all protocols supported by Mutt support/require authentication,
login credentials may be specified in the URL. This has the advantage
that multiple IMAP, POP3 or SMTP servers may be specified (which isn’t
possible using, for example, $imap_user (*note imap_user::)).  The
username may contain the ‘@’ symbol being used by many mail systems as
part of the login name.  The special characters ‘/’ (‘%2F’), ‘:’ (‘%3A’)
and ‘%’ (‘%25’) have to be URL-encoded in usernames using the
‘%’-notation.

   A password can be given, too but is not recommended if the URL is
specified in a configuration file on disk.

   If no port number is given, Mutt will use the system’s default for
the given protocol (usually consulting ‘/etc/services’).

   The optional path is only relevant for IMAP and ignored elsewhere.


   *URLs*


     pops://host/
     imaps://user@host/INBOX/Sent
     smtp://user@host:587/


File: mutt.info,  Node: SSL/TLS Support,  Next: POP3 Support,  Prev: General Notes,  Up: Optional Features

6.2 SSL/TLS Support
===================

If Mutt is compiled with IMAP, POP3 and/or SMTP support, it can also be
compiled with support for SSL or TLS using either OpenSSL or GnuTLS ( by
running the _configure_ script with the _–enable-ssl=..._  option for
OpenSSL or _–enable-gnutls=..._  for GnuTLS). Mutt can then attempt to
encrypt communication with remote servers if these protocols are
suffixed with ‘s’ for ‘secure communication’.

* Menu:

* STARTTLS::
* Tunnel::


File: mutt.info,  Node: STARTTLS,  Next: Tunnel,  Up: SSL/TLS Support

6.2.1 STARTTLS
--------------

When non-secure URL protocols ‘imap://’, ‘pop://’, and ‘smtp://’ are
used, the initial connection to the server will be unencrypted.
‘STARTTLS’ can be used to negotiate an encrypted connection after the
initial unencrypted connection and exchange.

   Two configuration variables control Mutt’s behavior with ‘STARTTLS’.
$ssl_starttls (*note ssl_starttls::) will initiate ‘STARTTLS’ if the
server advertises support for it.  $ssl_force_tls (*note
ssl_force_tls::) will always try to initiate it, whether the server
advertises support or not.

   Mutt _highly recommends_ setting $ssl_force_tls (*note
ssl_force_tls::) unless you need to connect to an unencrypted server.
It’s possible for an attacker to spoof interactions during the initial
connection and hide support for ‘STARTTLS’.  The only way to prevent
these attacks is by forcing ‘STARTTLS’ with the $ssl_force_tls (*note
ssl_force_tls::) configuration variable.


File: mutt.info,  Node: Tunnel,  Prev: STARTTLS,  Up: SSL/TLS Support

6.2.2 Tunnel
------------

When connecting through a $tunnel (*note tunnel::) and $tunnel_is_secure
(*note tunnel_is_secure::) is set (the default), Mutt will assume the
connection to the server through the pipe is already secured.  Mutt will
ignore $ssl_starttls (*note ssl_starttls::) and $ssl_force_tls (*note
ssl_force_tls::), behaving as if TLS has already been negotiated.

   When $tunnel_is_secure (*note tunnel_is_secure::) is unset, Mutt will
respect the values of $ssl_starttls (*note ssl_starttls::) and
$ssl_force_tls (*note ssl_force_tls::).  It is _highly recommended_ to
set $ssl_force_tls (*note ssl_force_tls::) in this case, to force
‘STARTTLS’ negotiation.  Note that doing so will prevent connection to
an IMAP server configured for preauthentication (‘PREAUTH’).  If you use
this configuration, it is recommended to use a secure tunnel.


File: mutt.info,  Node: POP3 Support,  Next: IMAP Support,  Prev: SSL/TLS Support,  Up: Optional Features

6.3 POP3 Support
================

If Mutt is compiled with POP3 support (by running the _configure_ script
with the _–enable-pop_ flag), it has the ability to work with mailboxes
located on a remote POP3 server and fetch mail for local browsing.

   Remote POP3 servers can be accessed using URLs with the ‘pop’
protocol for unencrypted and ‘pops’ for encrypted communication, see
*note URL Syntax:: for details.

   Polling for new mail is more expensive over POP3 than locally.  For
this reason the frequency at which Mutt will check for mail remotely can
be controlled by the $pop_checkinterval (*note pop_checkinterval::)
variable, which defaults to every 60 seconds.

   POP is read-only which doesn’t allow for some features like editing
messages or changing flags.  However, using *note Header Caching:: and
*note Body Caching:: Mutt simulates the new/old/read flags as well as
flagged and replied.  Mutt applies some logic on top of remote messages
but cannot change them so that modifications of flags are lost when
messages are downloaded from the POP server (either by Mutt or other
tools).


   Another way to access your POP3 mail is the ‘<fetch-mail>’ function
(default: G). It allows to connect to $pop_host (*note pop_host::),
fetch all your new mail and place it in the local $spoolfile (*note
spoolfile::).  After this point, Mutt runs exactly as if the mail had
always been local.

     *Note*

     If you only need to fetch all messages to a local mailbox you
     should consider using a specialized program, such as
     ‘fetchmail(1)’, ‘getmail(1)’ or similar.


File: mutt.info,  Node: IMAP Support,  Next: SMTP Support,  Prev: POP3 Support,  Up: Optional Features

6.4 IMAP Support
================

If Mutt was compiled with IMAP support (by running the _configure_
script with the _–enable-imap_ flag), it has the ability to work with
folders located on a remote IMAP server.

   You can access the remote inbox by selecting the folder by its URL
(see *note URL Syntax:: for details) using the ‘imap’ or ‘imaps’
protocol.  Alternatively, a pine-compatible notation is also supported,
i.e.  ‘{[username@]imapserver[:port][/ssl]}path/to/folder’

   Note that not all servers use ‘/’ as the hierarchy separator.  Mutt
should correctly notice which separator is being used by the server and
convert paths accordingly.

   When browsing folders on an IMAP server, you can toggle whether to
look at only the folders you are subscribed to, or all folders with the
_toggle-subscribed_ command.  See also the $imap_list_subscribed (*note
imap_list_subscribed::) variable.

   Polling for new mail on an IMAP server can cause noticeable delays.
So, you’ll want to carefully tune the $mail_check (*note mail_check::)
and $timeout (*note timeout::) variables.  Reasonable values are:


     set mail_check=90
     set timeout=15

   with relatively good results even over slow modem lines.

     *Note*

     Note that if you are using mbox as the mail store on UW servers
     prior to v12.250, the server has been reported to disconnect a
     client if another client selects the same folder.

* Menu:

* The IMAP Folder Browser::
* Authentication::


File: mutt.info,  Node: The IMAP Folder Browser,  Next: Authentication,  Up: IMAP Support

6.4.1 The IMAP Folder Browser
-----------------------------

As of version 1.2, Mutt supports browsing mailboxes on an IMAP server.
This is mostly the same as the local file browser, with the following
differences:

   • In lieu of file permissions, Mutt displays the string ‘IMAP’,
     possibly followed by the symbol ‘+’, indicating that the entry
     contains both messages and subfolders.  On Cyrus-like servers
     folders will often contain both messages and subfolders.  A mailbox
     name with a trailing delimiter (usually ‘/’ or ‘.’) indicates
     subfolders.

   • For the case where an entry can contain both messages and
     subfolders, the selection key (bound to ‘enter’ by default) will
     choose to descend into the subfolder view.  If you wish to view the
     messages in that folder, you must use ‘view-file’ instead (bound to
     ‘space’ by default).

   • You can create, delete and rename mailboxes with the
     ‘<create-mailbox>’, ‘<delete-mailbox>’, and ‘<rename-mailbox>’
     commands (default bindings: ‘C’, ‘d’ and ‘r’, respectively).  You
     may also ‘<subscribe>’ and ‘<unsubscribe>’ to mailboxes (normally
     these are bound to ‘s’ and ‘u’, respectively).


File: mutt.info,  Node: Authentication,  Prev: The IMAP Folder Browser,  Up: IMAP Support

6.4.2 Authentication
--------------------

Mutt supports four authentication methods with IMAP servers: SASL,
GSSAPI, CRAM-MD5, and LOGIN (there is a patch by Grant Edwards to add
NTLM authentication for you poor exchange users out there, but it has
yet to be integrated into the main tree).  There is also support for the
pseudo-protocol ANONYMOUS, which allows you to log in to a public IMAP
server without having an account.  To use ANONYMOUS, simply make your
username blank or ‘anonymous’.

   SASL is a special super-authenticator, which selects among several
protocols (including GSSAPI, CRAM-MD5, ANONYMOUS, and DIGEST-MD5) the
most secure method available on your host and the server.  Using some of
these methods (including DIGEST-MD5 and possibly GSSAPI), your entire
session will be encrypted and invisible to those teeming network snoops.
It is the best option if you have it.  To use it, you must have the
Cyrus SASL library installed on your system and compile Mutt with the
_–with-sasl_ flag.

   Mutt will try whichever methods are compiled in and available on the
server, in the following order: SASL, ANONYMOUS, GSSAPI, CRAM-MD5,
LOGIN.

   There are a few variables which control authentication:

   • $imap_user (*note imap_user::) - controls the username under which
     you request authentication on the IMAP server, for all
     authenticators.  This is overridden by an explicit username in the
     mailbox path (i.e.  by using a mailbox name of the form
     ‘{user@host}’).

   • $imap_pass (*note imap_pass::) - a password which you may preset,
     used by all authentication methods where a password is needed.

   • $imap_authenticators (*note imap_authenticators::) - a
     colon-delimited list of IMAP authentication methods to try, in the
     order you wish to try them.  If specified, this overrides Mutt’s
     default (attempt everything, in the order listed above).


File: mutt.info,  Node: SMTP Support,  Next: OAUTHBEARER Support,  Prev: IMAP Support,  Up: Optional Features

6.5 SMTP Support
================

Besides supporting traditional mail delivery through a
sendmail-compatible program, Mutt supports delivery through SMTP if it
was configured and built with ‘--enable-smtp’.

   If the configuration variable $smtp_url (*note smtp_url::) is set,
Mutt will contact the given SMTP server to deliver messages; if it is
unset, Mutt will use the program specified by $sendmail (*note
sendmail::).

   For details on the URL syntax, please see *note URL Syntax::.

   The built-in SMTP support supports encryption (the ‘smtps’ protocol
using SSL or TLS) as well as SMTP authentication using SASL. The
authentication mechanisms for SASL are specified in $smtp_authenticators
(*note smtp_authenticators::) defaulting to an empty list which makes
Mutt try all available methods from most-secure to least-secure.


File: mutt.info,  Node: OAUTHBEARER Support,  Next: Managing Multiple Accounts,  Prev: SMTP Support,  Up: Optional Features

6.6 OAUTHBEARER Support
=======================

Preliminary OAUTH support for IMAP, POP, and SMTP is provided via
external scripts.

   At least for Gmail, you can use the ‘oauth2.py’ script from Google’s
gmail-oauth2-tools:
https://github.com/google/gmail-oauth2-tools/blob/master/python/oauth2.py
(https://github.com/google/gmail-oauth2-tools/blob/master/python/oauth2.py)

   You’ll need to get your own oauth client credentials for Gmail here:
https://console.developers.google.com/apis/credentials
(https://console.developers.google.com/apis/credentials)

   Then, you’d use ‘oauth2.py’ with ‘--generate_oauth2_token’ to get a
refresh token, and configure mutt with:


     set imap_authenticators="oauthbearer"
     set imap_oauth_refresh_command="/path/to/oauth2.py --quiet --user=[email_address]\
         --client_id=[client_id] --client_secret=[client_secret]\
         --refresh_token=[refresh_token]"

   Substitute pop or smtp for imap in the above example to configure for
those.

   An alternative script is contrib/mutt_oauth2.py
(https://gitlab.com/muttmua/mutt/tree/master/contrib/mutt_oauth2.py)
script.  For more details see contrib/mutt_oauth2.py.README
(https://gitlab.com/muttmua/mutt/tree/master/contrib/mutt_oauth2.py.README).

* Menu:

* XOAUTH2 Support::


File: mutt.info,  Node: XOAUTH2 Support,  Up: OAUTHBEARER Support

6.6.1 XOAUTH2 Support
---------------------

Support for the deprecated XOAUTH2 protocol is also available.  To
enable this, add ‘xoauth2’ to the $imap_authenticators (*note
imap_authenticators::), $pop_authenticators (*note
pop_authenticators::), or $smtp_authenticators (*note
smtp_authenticators::) config variables.  XOAUTH2 uses the same refresh
command configuration variables as OAUTHBEARER:
$imap_oauth_refresh_command (*note imap_oauth_refresh_command::),
$pop_oauth_refresh_command (*note pop_oauth_refresh_command::), and
$smtp_oauth_refresh_command (*note smtp_oauth_refresh_command::).  Those
will need to be set to a script to generate the appropriate XOAUTH2
token.


File: mutt.info,  Node: Managing Multiple Accounts,  Next: Local Caching,  Prev: OAUTHBEARER Support,  Up: Optional Features

6.7 Managing Multiple Accounts
==============================

Usage:

     account-hook regexp command

   If you happen to have accounts on multiple IMAP, POP and/or SMTP
servers, you may find managing all the authentication settings
inconvenient and error-prone.  The ‘account-hook’ (*note Managing
Multiple Accounts::) command may help.  This hook works like
‘folder-hook’ (*note Setting Variables Based Upon Mailbox::) but is
invoked whenever Mutt needs to access a remote mailbox (including inside
the folder browser), not just when you open the mailbox.  This includes
(for example) polling for new mail, storing Fcc messages and saving
messages to a folder.  As a consequence, ‘account-hook’ (*note Managing
Multiple Accounts::) should only be used to set connection-related
settings such as passwords or tunnel commands but not settings such as
sender address or name (because in general it should be considered
unpredictable which ‘account-hook’ (*note Managing Multiple Accounts::)
was last used).

   Some examples:


     account-hook . 'unset imap_user; unset imap_pass; unset tunnel'
     account-hook imap://host1/ 'set imap_user=me1 imap_pass=foo'
     account-hook imap://host2/ 'set tunnel="ssh host2 /usr/libexec/imapd"'
     account-hook smtp://user@host3/ 'set tunnel="ssh host3 /usr/libexec/smtpd"'

   To manage multiple accounts with, for example, different values of
$record (*note record::) or sender addresses, ‘folder-hook’ (*note
Setting Variables Based Upon Mailbox::) has to be used together with the
‘mailboxes’ (*note Monitoring Incoming Mail::) command.


   *Managing multiple accounts*


     mailboxes imap://user@host1/INBOX
     folder-hook imap://user@host1/ 'set folder=imap://host1/ ; set record=+INBOX/Sent'

     mailboxes imap://user@host2/INBOX
     folder-hook imap://user@host2/ 'set folder=imap://host2/ ; set record=+INBOX/Sent'

   In example *note Managing multiple accounts:: the folders are defined
using ‘mailboxes’ (*note Monitoring Incoming Mail::) so Mutt polls them
for new mail.  Each ‘folder-hook’ (*note Setting Variables Based Upon
Mailbox::) triggers when one mailbox below each IMAP account is opened
and sets $folder (*note folder::) to the account’s root folder.  Next,
it sets $record (*note record::) to the _INBOX/Sent_ folder below the
newly set $folder (*note folder::).  Please notice that the value the
‘+’ mailbox shortcut (*note Mailbox Shortcuts::) refers to depends on
the _current_ value of $folder (*note folder::) and therefore has to be
set separately per account.  Setting other values like $from (*note
from::) or $signature (*note signature::) is analogous to setting
$record (*note record::).


File: mutt.info,  Node: Local Caching,  Next: Exact Address Generation,  Prev: Managing Multiple Accounts,  Up: Optional Features

6.8 Local Caching
=================

Mutt contains two types of local caching: _(1)_ the so-called ‘header
caching’ and _(2)_ the so-called ‘body caching’ which are both described
in this section.

   Header caching is optional as it depends on external libraries, body
caching is always enabled if Mutt is compiled with POP and/or IMAP
support as these use it (body caching requires no external library).

* Menu:

* Header Caching::
* Body Caching::
* Cache Directories::
* Maintenance::


File: mutt.info,  Node: Header Caching,  Next: Body Caching,  Up: Local Caching

6.8.1 Header Caching
--------------------

Mutt provides optional support for caching message headers for the
following types of folders: IMAP, POP, Maildir and MH. Header caching
greatly speeds up opening large folders because for remote folders,
headers usually only need to be downloaded once.  For Maildir and MH,
reading the headers from a single file is much faster than looking at
possibly thousands of single files (since Maildir and MH use one file
per message.)

   Header caching can be enabled via the configure script and the
_–enable-hcache_ option.  It’s not turned on by default because external
database libraries are required: one of tokyocabinet, kyotocabinet,
lmdb, qdbm, gdbm or bdb must be present.

   If enabled, $header_cache (*note header_cache::) can be used to
either point to a file or a directory.  If set to point to a file, one
database file for all folders will be used (which may result in lower
performance), but one file per folder if it points to a directory.  When
pointing to a directory, be sure to create the directory in advance, or
Mutt will interpret it as a file to be created.


File: mutt.info,  Node: Body Caching,  Next: Cache Directories,  Prev: Header Caching,  Up: Local Caching

6.8.2 Body Caching
------------------

Both cache methods can be combined using the same directory for storage
(and for IMAP/POP even provide meaningful file names) which simplifies
manual maintenance tasks.

   In addition to caching message headers only, Mutt can also cache
whole message bodies.  This results in faster display of messages for
POP and IMAP folders because messages usually have to be downloaded only
once.

   For configuration, the variable $message_cachedir (*note
message_cachedir::) must point to a directory.  There, Mutt will create
a hierarchy of subdirectories named like the account and mailbox path
the cache is for.


File: mutt.info,  Node: Cache Directories,  Next: Maintenance,  Prev: Body Caching,  Up: Local Caching

6.8.3 Cache Directories
-----------------------

For using both, header and body caching, $header_cache (*note
header_cache::) and $message_cachedir (*note message_cachedir::) can be
safely set to the same value.

   In a header or body cache directory, Mutt creates a directory
hierarchy named like: ‘proto:user@hostname’ where ‘proto’ is either
‘pop’ or ‘imap.’ Within there, for each folder, Mutt stores messages in
single files and header caches in files with the ‘.hcache’ extension.
All files can be removed as needed if the consumed disk space becomes an
issue as Mutt will silently fetch missing items again.  Pathnames are
always stored in UTF-8 encoding.

   For Maildir and MH, the header cache files are named after the MD5
checksum of the path.


File: mutt.info,  Node: Maintenance,  Prev: Cache Directories,  Up: Local Caching

6.8.4 Maintenance
-----------------

Mutt does not (yet) support maintenance features for header cache
database files so that files have to be removed in case they grow too
big.  It depends on the database library used for header caching whether
disk space freed by removing messages is re-used.

   For body caches, Mutt can keep the local cache in sync with the
remote mailbox if the $message_cache_clean (*note message_cache_clean::)
variable is set.  Cleaning means to remove messages from the cache which
are no longer present in the mailbox which only happens when other mail
clients or instances of Mutt using a different body cache location
delete messages (Mutt itself removes deleted messages from the cache
when syncing a mailbox).  As cleaning can take a noticeable amount of
time, it should not be set in general but only occasionally.


File: mutt.info,  Node: Exact Address Generation,  Next: Sending Anonymous Messages via Mixmaster,  Prev: Local Caching,  Up: Optional Features

6.9 Exact Address Generation
============================

Mutt supports the ‘Name <user@host>’ address syntax for reading and
writing messages, the older ‘user@host (Name)’ syntax is only supported
when reading messages.  The _–enable-exact-address_ switch can be given
to configure to build it with write-support for the latter syntax.
‘EXACT_ADDRESS’ in the output of ‘mutt -v’ indicates whether it’s
supported.

   Note: If the full address contains non-ascii characters, or sequences
that require RFC 2047 encoding, Mutt reverts to writing out the
normalized ‘Name <user@host>’ form, in order to generate legal output.


File: mutt.info,  Node: Sending Anonymous Messages via Mixmaster,  Next: Sidebar <1>,  Prev: Exact Address Generation,  Up: Optional Features

6.10 Sending Anonymous Messages via Mixmaster
=============================================

You may also have compiled Mutt to co-operate with Mixmaster, an
anonymous remailer.  Mixmaster permits you to send your messages
anonymously using a chain of remailers.  Mixmaster support in Mutt is
for mixmaster version 2.04 or later.

   To use it, you’ll have to obey certain restrictions.  Most important,
you cannot use the ‘Cc’ and ‘Bcc’ headers.  To tell Mutt to use
mixmaster, you have to select a remailer chain, using the mix function
on the compose menu.

   The chain selection screen is divided into two parts.  In the
(larger) upper part, you get a list of remailers you may use.  In the
lower part, you see the currently selected chain of remailers.

   You can navigate in the chain using the ‘<chain-prev>’ and
‘<chain-next>’ functions, which are by default bound to the left and
right arrows and to the ‘h’ and ‘l’ keys (think vi keyboard bindings).
To insert a remailer at the current chain position, use the ‘<insert>’
function.  To append a remailer behind the current chain position, use
‘<select-entry>’ or ‘<append>’.  You can also delete entries from the
chain, using the corresponding function.  Finally, to abandon your
changes, leave the menu, or ‘<accept>’ them pressing (by default) the
‘Return’ key.

   Note that different remailers do have different capabilities,
indicated in the %c entry of the remailer menu lines (see
$mix_entry_format (*note mix_entry_format::)).  Most important is the
‘middleman’ capability, indicated by a capital ‘M’: This means that the
remailer in question cannot be used as the final element of a chain, but
will only forward messages to other mixmaster remailers.  For details on
the other capabilities, please have a look at the mixmaster
documentation.


File: mutt.info,  Node: Sidebar <1>,  Next: Compressed Folders Feature,  Prev: Sending Anonymous Messages via Mixmaster,  Up: Optional Features

6.11 Sidebar
============

* Menu:

* Introduction: Introduction <4>.
* Variables::
* Functions::
* Commands: Commands <1>.
* Colors::
* Sort::
* See Also::


File: mutt.info,  Node: Introduction <4>,  Next: Variables,  Up: Sidebar <1>

6.11.1 Introduction
-------------------

The Sidebar shows a list of all your mailboxes.  The list can be turned
on and off, it can be themed and the list style can be configured.


File: mutt.info,  Node: Variables,  Next: Functions,  Prev: Introduction <4>,  Up: Sidebar <1>

6.11.2 Variables
----------------


   *Sidebar Variables*

Name                     Type                     Default
‘sidebar_delim_chars’    string                   ‘/.’
‘sidebar_divider_char’   string                   ‘|’
‘sidebar_folder_indent’  boolean                  ‘no’
‘sidebar_format’         string                   ‘%B%* %n’
‘sidebar_indent_string’  string                   ‘  ’ (two spaces)
‘sidebar_new_mail_only’  boolean                  ‘no’
‘sidebar_next_new_wrap’  boolean                  ‘no’
‘sidebar_short_path’     boolean                  ‘no’
‘sidebar_sort_method’    enum                     ‘unsorted’
‘sidebar_visible’        boolean                  ‘no’
‘sidebar_width’          number                   ‘20’


File: mutt.info,  Node: Functions,  Next: Commands <1>,  Prev: Variables,  Up: Sidebar <1>

6.11.3 Functions
----------------

Sidebar adds the following functions to Mutt.  By default, none of them
are bound to keys.


   *Sidebar Functions*

Menus                    Function                 Description
index,pager              ‘<sidebar-next>’         Move the highlight to
                                                  next mailbox
index,pager              ‘<sidebar-next-new>’     Move the highlight to
                                                  next mailbox with new
                                                  mail
index,pager              ‘<sidebar-open>’         Open highlighted
                                                  mailbox
index,pager              ‘<sidebar-page-down>’    Scroll the Sidebar
                                                  down 1 page
index,pager              ‘<sidebar-page-up>’      Scroll the Sidebar up
                                                  1 page
index,pager              ‘<sidebar-prev>’         Move the highlight to
                                                  previous mailbox
index,pager              ‘<sidebar-prev-new>’     Move the highlight to
                                                  previous mailbox with
                                                  new mail
index,pager              ‘<sidebar-toggle-visible>’Make the Sidebar
                                                  (in)visible


File: mutt.info,  Node: Commands <1>,  Next: Colors,  Prev: Functions,  Up: Sidebar <1>

6.11.4 Commands
---------------

     sidebar_whitelist mailbox [ mailbox ]… unsidebar_whitelist { * |
     mailbox …}

   This command specifies mailboxes that will always be displayed in the
sidebar, even if $sidebar_new_mail_only (*note sidebar_new_mail_only::)
is set and the mailbox does not contain new mail.

   The ‘unsidebar_whitelist’ command is used to remove a mailbox from
the list of whitelisted mailboxes.  Use ‘unsidebar_whitelist *’ to
remove all mailboxes.


File: mutt.info,  Node: Colors,  Next: Sort,  Prev: Commands <1>,  Up: Sidebar <1>

6.11.5 Colors
-------------


   *Sidebar Colors*

Name                     Default Color            Description
‘sidebar_divider’        default                  The dividing line
                                                  between the Sidebar
                                                  and the Index/Pager
                                                  panels
‘sidebar_flagged’        default                  Mailboxes containing
                                                  flagged mail
‘sidebar_highlight’      underline                Cursor to select a
                                                  mailbox
‘sidebar_indicator’      mutt ‘indicator’         The mailbox open in
                                                  the Index panel
‘sidebar_new’            default                  Mailboxes containing
                                                  new mail
‘sidebar_spoolfile’      default                  Mailbox that receives
                                                  incoming mail

   If the ‘sidebar_indicator’ color isn’t set, then the default Mutt
indicator color will be used (the color used in the index panel).


File: mutt.info,  Node: Sort,  Next: See Also,  Prev: Colors,  Up: Sidebar <1>

6.11.6 Sort
-----------


   *Sidebar Sort*

Sort                                 Description
‘alpha’                              Alphabetically by path or label
‘count’                              Total number of messages
‘flagged’                            Number of flagged messages
‘name’                               Alphabetically by path or label
‘new’                                Number of unread messages
‘path’                               Alphabetically by path (ignores
                                     label)
‘unread’                             Number of unread messages
‘unsorted’                           Do not resort the paths


File: mutt.info,  Node: See Also,  Prev: Sort,  Up: Sidebar <1>

6.11.7 See Also
---------------

   • Regular Expressions (*note Regular Expressions::)

   • Patterns (*note Patterns; Searching; Limiting and Tagging::)

   • Color command (*note Using Color and Mono Video Attributes::)


File: mutt.info,  Node: Compressed Folders Feature,  Next: Autocrypt,  Prev: Sidebar <1>,  Up: Optional Features

6.12 Compressed Folders Feature
===============================

* Menu:

* Introduction: Introduction <5>.
* Commands: Commands <2>.


File: mutt.info,  Node: Introduction <5>,  Next: Commands <2>,  Up: Compressed Folders Feature

6.12.1 Introduction
-------------------

The Compressed Folder patch allows Mutt to read mailbox files that are
compressed.  But it isn’t limited to compressed files.  It works well
with encrypted files, too.  In fact, if you can create a program/script
to convert to and from your format, then Mutt can read it.

   The patch adds three hooks to Mutt: ‘open-hook’, ‘close-hook’ and
‘append-hook’.  They define commands to: uncompress a file; compress a
file; append messages to an already compressed file.

   There are some examples of both compressed and encrypted files,
later.  For now, the documentation will just concentrate on compressed
files.


File: mutt.info,  Node: Commands <2>,  Prev: Introduction <5>,  Up: Compressed Folders Feature

6.12.2 Commands
---------------

     open-hook pattern shell-command close-hook pattern shell-command
     append-hook pattern shell-command

   The shell-command must contain two placeholders for filenames: ‘%f’
and ‘%t’.  These represent ‘from’ and ‘to’ filenames.  These
placeholders should be placed inside single-quotes to prevent unintended
shell expansions.

   If you need the exact string ‘%f’ or ‘%t’ in your command, simply
double up the ‘%’ character, e.g.  ‘%%f’ or ‘%%t’.


   *Not all Hooks are Required*

Open           Close          Append         Effect         Useful if
Open           -              -              Folder is      The folder
                                             readonly       is just a
                                                            backup
Open           Close          -              Folder is      Your
                                             read/write,    compression
                                             but the        format
                                             entire         doesn’t
                                             folder must    support
                                             be written     appending
                                             if anything
                                             is changed
Open           Close          Append         Folder is      Your
                                             read/write     compression
                                             and emails     format
                                             can be         supports
                                             efficiently    appending
                                             added to the
                                             end
Open           -              Append         Folder is      You want to
                                             readonly,      store
                                             but can be     emails, but
                                             appended to    never change
                                                            them

     *Note*

     The command:

        • should return a non-zero exit status on failure

        • should not delete any files

* Menu:

* Read from compressed mailbox::
* Write to a compressed mailbox::
* Append to a compressed mailbox::
* Empty Files::
* Security::


File: mutt.info,  Node: Read from compressed mailbox,  Next: Write to a compressed mailbox,  Up: Commands <2>

6.12.2.1 Read from compressed mailbox
.....................................

     open-hook regexp shell-command

   If Mutt is unable to open a file, it then looks for ‘open-hook’ that
matches the filename.

   If your compression program doesn’t have a well-defined extension,
then you can use ‘.’ as the regexp.


   *Example of open-hook*

     open-hook '\.gz$' "gzip -cd '%f' > '%t'"

   • Mutt finds a file, ‘example.gz’, that it can’t read

   • Mutt has an ‘open-hook’ whose regexp matches the filename: ‘\.gz$’

   • Mutt uses the command ‘gzip -cd’ to create a temporary file that it
     _can_ read


File: mutt.info,  Node: Write to a compressed mailbox,  Next: Append to a compressed mailbox,  Prev: Read from compressed mailbox,  Up: Commands <2>

6.12.2.2 Write to a compressed mailbox
......................................

     close-hook regexp shell-command

   When Mutt has finished with a compressed mail folder, it will look
for a matching ‘close-hook’ to recompress the file.  This hook is
optional (*note Not all Hooks are Required::).

     *Note*

     If the folder has not been modified, the ‘close-hook’ will not be
     called.


   *Example of close-hook*

     close-hook '\.gz$' "gzip -c '%t' > '%f'"

   • Mutt has finished with a folder, ‘example.gz’, that it opened with
     ‘open-hook’

   • The folder has been modified

   • Mutt has a ‘close-hook’ whose regexp matches the filename: ‘\.gz$’

   • Mutt uses the command ‘gzip -c’ to create a new compressed file


File: mutt.info,  Node: Append to a compressed mailbox,  Next: Empty Files,  Prev: Write to a compressed mailbox,  Up: Commands <2>

6.12.2.3 Append to a compressed mailbox
.......................................

     append-hook regexp shell-command

   When Mutt wants to append an email to a compressed mail folder, it
will look for a matching ‘append-hook’.  This hook is optional (*note
Not all Hooks are Required::).

   Using the ‘append-hook’ will save time, but Mutt won’t be able to
determine the type of the mail folder inside the compressed file.

   Mutt will _assume_ the type to be that of the ‘$mbox_type’ variable.
Mutt also uses this type for temporary files.

   Mutt will only use the ‘append-hook’ for existing files.  The
‘close-hook’ will be used for empty, or missing files.

     *Note*

     If your command writes to stdout, it is vital that you use ‘>>’ in
     the ‘append-hook’.  If not, data will be lost.


   *Example of append-hook*

     append-hook '\.gz$' "gzip -c '%t' >> '%f'"

   • Mutt wants to append an email to a folder, ‘example.gz’, that it
     opened with ‘open-hook’

   • Mutt has an ‘append-hook’ whose regexp matches the filename:
     ‘\.gz$’

   • Mutt knows the mailbox type from the ‘$mbox’ variable

   • Mutt uses the command ‘gzip -c’ to append to an existing compressed
     file


File: mutt.info,  Node: Empty Files,  Next: Security,  Prev: Append to a compressed mailbox,  Up: Commands <2>

6.12.2.4 Empty Files
....................

Mutt assumes that an empty file is not compressed.  In this situation,
unset $save_empty (*note save_empty::), so that the compressed file will
be removed if you delete all of the messages.


File: mutt.info,  Node: Security,  Prev: Empty Files,  Up: Commands <2>

6.12.2.5 Security
.................

Encrypted files are decrypted into temporary files which are stored in
the $tmpdir (*note tmpdir::) directory.  This could be a security risk.


File: mutt.info,  Node: Autocrypt,  Prev: Compressed Folders Feature,  Up: Optional Features

6.13 Autocrypt
==============

Mutt can be compiled with Autocrypt support by running ‘configure’ with
the ‘--enable-autocrypt’ flag.  Autocrypt provides easy to use, passive
protection against data collection.  Keys are distributed via an
‘Autocrypt:’ header added to emails.  It does _not_ protect against
active adversaries, and so should not be considered a substitute for
normal encryption via your keyring, using key signing and the web of
trust to verify identities.  With an understanding of these limitations,
Autocrypt still provides an easy way to minimize cleartext emails sent
between common correspondents, without having to explicitly exchange
keys.  More information can be found at https://autocrypt.org/
(https://autocrypt.org/).

* Menu:

* Requirements::
* First Run::
* Compose Menu: Compose Menu <1>.
* Account Management::
* Alternative Key and Keyring Strategies::


File: mutt.info,  Node: Requirements,  Next: First Run,  Up: Autocrypt

6.13.1 Requirements
-------------------

Autocrypt requires support for ECC cryptography, and Mutt by default
will generate ECC keys.  Therefore GnuPG 2.1 or greater is required.
Additionally, Mutt’s Autocrypt implementation uses GPGME and requires at
least version 1.8.0.

   Account and peer information is stored in a sqlite3 database, and so
Mutt must be configured with the ‘--with-sqlite3’ flag when autocrypt is
enabled.

   It is highly recommended Mutt be configured ‘--with-idn’ or
‘--with-idn2’ so that Autocrypt can properly deal with international
domain names.

   While Mutt uses GPGME for Autocrypt, normal keyring operations can
still be performed via classic mode (i.e.  with $crypt_use_gpgme (*note
crypt_use_gpgme::) unset).  However, to avoid unnecessary prompts, it is
recommended gpg not be configured in ‘loopback pinentry’ mode, and that
$pgp_use_gpg_agent (*note pgp_use_gpg_agent::) remain set (the default).


File: mutt.info,  Node: First Run,  Next: Compose Menu <1>,  Prev: Requirements,  Up: Autocrypt

6.13.2 First Run
----------------

To enable Autocrypt, set $autocrypt (*note autocrypt::), and if desired
change the value of $autocrypt_dir (*note autocrypt_dir::) in your
muttrc.  The first time Mutt is run after that, you will be prompted to
create $autocrypt_dir (*note autocrypt_dir::).  Mutt will then
automatically create an sqlite3 database and GPG keyring in that
directory.  Note since these files should be considered private, Mutt
will create this directory with mode ‘700’.  If you create the directory
manually, you should do the same.

   Mutt recommends keeping the $autocrypt_dir (*note autocrypt_dir::)
directory set differently from your GnuPG keyring directory (e.g.
‘~/.gnupg’).  Keys are automatically imported into the keyring from
‘Autocrypt:’ headers.  Compared to standard ‘web of trust’ keys,
Autocrypt keys are somewhat ephemeral, and the autocrypt database is
used to track when keys change or fall out of use.  Having these keys
mixed in with your normal keyring will make it more difficult to use
features such as $crypt_opportunistic_encrypt (*note
crypt_opportunistic_encrypt::) and Autocrypt at the same time.

   The $autocrypt_dir (*note autocrypt_dir::) variable is not designed
to be changed while Mutt is running.  The database is created (if
necessary) and connected to during startup.  Changing the variable can
result in a situation where Mutt is looking in one place for the
database and a different place for the GPG keyring, resulting in strange
behavior.

   Once the directory, keyring, and database are created, Mutt will ask
whether you would like to create an account.  In order to use Autocrypt,
each sending address needs an account.  As a convenience you can create
an account during the first run.  If you would like to add additional
accounts later, this can be done via the ‘<autocrypt-acct-menu>’
function in the index, by default bound to ‘A’.

   Account creation will first ask you for an email address.  Next, it
will ask whether you want to create a new key or select an existing key.
(Note key selection takes place from the $autocrypt_dir (*note
autocrypt_dir::) keyring, which will normally be empty during first
run).  Finally, it will ask whether this address should prefer
encryption or not.  Autocrypt 1.1 allows automatically enabling
encryption if _both_ sender and receiver have set ‘prefer encryption’.
Otherwise, you will need to manually enable autocrypt encryption in the
compose menu.  For more details, see the compose menu section below.

   After optionally creating an account, Mutt will prompt you to scan
mailboxes for Autocrypt headers.  This step occurs because header cached
messages are not re-scanned for Autocrypt headers.  Scanning during this
step will temporarily disable the header cache while opening each
mailbox.  If you wish to do this manually later, you can simulate the
same thing by unsetting $header_cache (*note header_cache::) and opening
a mailbox.

   A final technical note: the first run process takes place between
reading the muttrc and opening the initial mailbox.  Some muttrc files
will push (*note Adding Key Sequences to the Keyboard Buffer::) macros
to be run after opening the mailbox.  To prevent this from interfering
with the first run prompts, Mutt disables all macros during the first
run.


File: mutt.info,  Node: Compose Menu <1>,  Next: Account Management,  Prev: First Run,  Up: Autocrypt

6.13.3 Compose Menu
-------------------

When enabled, Autocrypt will add a line to the compose menu with two
fields: ‘Autocrypt:’ and ‘Recommendation:’.

   The ‘Autocrypt:’ field shows whether the message will be encrypted by
Autocrypt when sent.  It has two values: ‘Encrypt’ and ‘Off’.  ‘Encrypt’
can be enabled using the ‘<autocrypt-menu>’ function, by default bound
to ‘o’.

   The ‘Recommendation:’ field shows the output of the Autocrypt
recommendation engine.  This can have one of five values:

   • ‘Off’ means the engine is disabled.  This can happen if the From
     address doesn’t have an autocrypt account, or if the account has
     been manually disabled.

   • ‘No’ means one or more recipients are missing an autocrypt key, or
     the key found is unusable (i.e.  expired, revoked, disabled,
     invalid, or not usable for encryption.)

   • ‘Discouraged’ means a key was found for every recipient, but the
     engine is not confident the message will be decryptable by the
     recipient.  This can happen if the key hasn’t been used recently
     (compared to their last seen email).

     It can also happen if the key wasn’t seen first-hand from the
     sender.  Autocrypt has a feature where recipient keys can be
     included in group-encrypted emails.  This allows you to reply to a
     conversation where you don’t have a key first-hand from one of the
     other recipients.  However, those keys are not trusted as much as
     from first-hand emails, so the engine warns you with a
     ‘Discouraged’ status.

   • ‘Available’ means a key was found for every recipient, and the
     engine believes all keys are recent and seen from the recipient
     first hand.  However, either you or one of the recipients chose not
     to specify ‘prefer encryption’.

   • ‘Yes’ is the same as ‘Available’, with the addition that you and
     all recipients have specified ‘prefer encryption’.  This value will
     automatically enable encryption, unless you have manually switched
     it off or enabled regular encryption or signing via the
     ‘<pgp-menu>’.

   As mentioned above the ‘<autocrypt-menu>’ function, by default bound
to ‘o’, can be used to change the ‘Encrypt:’ field value.  ‘(e)ncrypt’
will toggle encryption on.  ‘(c)lear’ will toggle encryption off.  If
either of these are chosen, the field will remain in that state despite
what the ‘Recommendation:’ field shows.  Lastly, ‘(a)utomatic’ will set
the value based on the recommendation engine’s output.

   Autocrypt encryption defers to normal encryption or signing.
_Anything_ that enables normal encryption or signing will cause
autocrypt encryption to turn off.  The only exception is when replying
to an autocrypt-encrypted email (i.e.  an email decrypted from the
$autocrypt_dir (*note autocrypt_dir::) keyring).  Then, if
$autocrypt_reply (*note autocrypt_reply::) is _set_, autocrypt mode will
be forced on, overriding the settings $crypt_autosign (*note
crypt_autosign::), $crypt_autoencrypt (*note crypt_autoencrypt::),
$crypt_replyencrypt (*note crypt_replyencrypt::), $crypt_replysign
(*note crypt_replysign::), $crypt_replysignencrypted (*note
crypt_replysignencrypted::), and $crypt_opportunistic_encrypt (*note
crypt_opportunistic_encrypt::).

   When postponing a message, autocrypt will respect $postpone_encrypt
(*note postpone_encrypt::), but will use the autocrypt account key to
encrypt the message.  Be sure to set $postpone_encrypt (*note
postpone_encrypt::) to ensure postponed messages marked for autocrypt
encryption are encrypted.


File: mutt.info,  Node: Account Management,  Next: Alternative Key and Keyring Strategies,  Prev: Compose Menu <1>,  Up: Autocrypt

6.13.4 Account Management
-------------------------

The Autocrypt Account Menu is available from the index via
‘<autocrypt-acct-menu>’, by default bound to ‘A’.  See Autocrypt Account
Menu (*note Autocrypt Account Menu::) for the list of functions and
their default keybindings.

   In this menu, you can create new accounts, delete accounts, toggle an
account active/inactive, and toggle the ‘prefer encryption’ flag for an
account.

   Deleting an account only removes the account from the database.  The
GPG key is kept, to ensure you still have the ability to read past
encrypted emails.

   The Autocrypt 1.1 ‘Setup Message’ feature is not available yet, but
will be added in the future.


File: mutt.info,  Node: Alternative Key and Keyring Strategies,  Prev: Account Management,  Up: Autocrypt

6.13.5 Alternative Key and Keyring Strategies
---------------------------------------------

Mutt by default partitions Autocrypt from normal keyring
encryption/signing.  It does this by using a separate GPG keyring (in
$autocrypt_dir (*note autocrypt_dir::)) and creating a new ECC key in
that keyring for accounts.  There are good reasons for doing this by
default.  It keeps random keys found inside email headers out of your
normal keyring.  ECC keys are compact and better suited for email
headers.  Autocrypt key selection is completely different from ‘web of
trust’ key selection, based on last-seen rules as opposed to trust and
validity.  It also allows Mutt to distinguish Autocrypt encrypted emails
from regular encrypted emails, and set the mode appropriately when
replying to each type of email.

   Still, some users may want to use an existing key from their normal
keyring for Autocrypt too.  There are two ways this can be accomplished.
The _recommended_ way is to set $autocrypt_dir (*note autocrypt_dir::)
to your normal keyring directory (e.g.  ‘~/.gnupg’).  During account
creation, choosing ‘(s)elect existing GPG key’ will then list and allow
selecting your existing key for the new account.

   An alternative is to copy your key over to the Autocrypt keyring, but
there is a severe downside.  Mutt _first_ tries to decrypt messages
using the Autocrypt keyring, and if that fails tries the normal keyring
second.  This means all encrypted emails to that key will be decrypted,
and have signatures verified from, the Autocrypt keyring.  Keys
signatures and web of trust from your normal keyring will no longer show
up in signatures when decrypting.

   For that reason, if you want to use an existing key from your normal
keyring, it is recommended to just set $autocrypt_dir (*note
autocrypt_dir::) to ‘~/.gnupg’.  This allows ‘web of trust’ to show an
appropriate signature message for verified messages.  Autocrypt header
keys will be imported into your keyring, but if you don’t want them
mixed you should strongly consider using a separate autocrypt key and
keyring instead.

   Both methods have a couple additional caveats:

   • Replying to an Autocrypt decrypted message by default forces
     Autocrypt mode on.  By sharing the same key, all replies will then
     start in Autocrypt mode, even if a message wasn’t sent by one of
     your Autocrypt peers.  $autocrypt_reply (*note autocrypt_reply::)
     can be _unset_ to allow manual control of the mode when replying.

   • When Mutt creates an account from a GPG key, it exports the public
     key, base64 encodes it, and stores that value in the sqlite3
     database.  The value is then used in the Autocrypt header added to
     outgoing emails.  The ECC keys Mutt creates don’t change, but if
     you use external keys that expire, when you resign to extend the
     expiration you will need to recreate the Autocrypt account using
     the account menu (*note Account Management::).  Otherwise the
     Autocrypt header will contain the old expired exported keydata.


File: mutt.info,  Node: Security Considerations,  Next: Performance Tuning,  Prev: Optional Features,  Up: Top

7 Security Considerations
*************************

First of all, Mutt contains no security holes included by intention but
may contain unknown security holes.  As a consequence, please run Mutt
only with as few permissions as possible.  Especially, do not run Mutt
as the super user.

   When configuring Mutt, there’re some points to note about secure
setups so please read this chapter carefully.

* Menu:

* Passwords::
* Temporary Files::
* Information Leaks::
* External Applications::


File: mutt.info,  Node: Passwords,  Next: Temporary Files,  Up: Security Considerations

7.1 Passwords
=============

Although Mutt can be told the various passwords for accounts, please
never store passwords in configuration files.  Besides the fact that the
system’s operator can always read them, you could forget to mask it out
when reporting a bug or asking for help via a mailing list.  Even worse,
your mail including your password could be archived by internet search
engines, mail-to-news gateways etc.  It may already be too late before
you notice your mistake.


File: mutt.info,  Node: Temporary Files,  Next: Information Leaks,  Prev: Passwords,  Up: Security Considerations

7.2 Temporary Files
===================

Mutt uses many temporary files for viewing messages, verifying digital
signatures, etc.  As long as being used, these files are visible by
other users and maybe even readable in case of misconfiguration.  Also,
a different location for these files may be desired which can be changed
via the $tmpdir (*note tmpdir::) variable.


File: mutt.info,  Node: Information Leaks,  Next: External Applications,  Prev: Temporary Files,  Up: Security Considerations

7.3 Information Leaks
=====================

* Menu:

* mailto;-style Links::


File: mutt.info,  Node: mailto;-style Links,  Up: Information Leaks

7.3.1 mailto:-style Links
-------------------------

As Mutt be can be set up to be the mail client to handle ‘mailto:’ style
links in websites, there’re security considerations, too.  Arbitrary
header fields can be embedded in these links which could override
existing header fields or attach arbitrary files using the Attach:
pseudoheader (*note Attach; Pseudo Header::).  This may be problematic
if the $edit-headers (*note edit_headers::) variable is _unset_, i.e.
the user doesn’t want to see header fields while editing the message and
doesn’t pay enough attention to the compose menu’s listing of
attachments.

   For example, following a link like


     mailto:joe@host?Attach=~/.gnupg/secring.gpg

   will send out the user’s private gnupg keyring to ‘joe@host’ if the
user doesn’t follow the information on screen carefully enough.

   To prevent these issues, Mutt by default only accepts the ‘Subject’,
‘Body’, ‘Cc’, ‘In-Reply-To’, and ‘References’ headers.  Allowed headers
can be adjusted with the ‘mailto_allow’ (*note Control allowed header
fields in a mailto; URL::) and ‘unmailto_allow’ (*note Control allowed
header fields in a mailto; URL::) commands.


File: mutt.info,  Node: External Applications,  Prev: Information Leaks,  Up: Security Considerations

7.4 External Applications
=========================

Mutt in many places has to rely on external applications or for
convenience supports mechanisms involving external applications.

   One of these is the ‘mailcap’ mechanism as defined by RfC1524.
Details about a secure use of the mailcap mechanisms is given in *note
Secure Use of Mailcap::.

   Besides the mailcap mechanism, Mutt uses a number of other external
utilities for operation, for example to provide crypto support, in
backtick expansion in configuration files or format string filters.  The
same security considerations apply for these as for tools involved via
mailcap.


File: mutt.info,  Node: Performance Tuning,  Next: Reference,  Prev: Security Considerations,  Up: Top

8 Performance Tuning
********************

* Menu:

* Reading and Writing Mailboxes::
* Reading Messages from Remote Folders::
* Searching and Limiting::


File: mutt.info,  Node: Reading and Writing Mailboxes,  Next: Reading Messages from Remote Folders,  Up: Performance Tuning

8.1 Reading and Writing Mailboxes
=================================

Mutt’s performance when reading mailboxes can be improved in two ways:

  1. For remote folders (IMAP and POP) as well as folders using
     one-file-per message storage (Maildir and MH), Mutt’s performance
     can be greatly improved using header caching (*note Header
     Caching::).  using a single database per folder.

  2. Mutt provides the $read_inc (*note read_inc::) and $write_inc
     (*note write_inc::) variables to specify at which rate to update
     progress counters.  If these values are too low, Mutt may spend
     more time on updating the progress counter than it spends on
     actually reading/writing folders.

     For example, when opening a maildir folder with a few thousand
     messages, the default value for $read_inc (*note read_inc::) may be
     too low.  It can be tuned on a folder-basis using ‘folder-hook’s
     (*note Setting Variables Based Upon Mailbox::):


          # use very high $read_inc to speed up reading hcache'd maildirs
          folder-hook . 'set read_inc=1000'
          # use lower value for reading slower remote IMAP folders
          folder-hook ^imap 'set read_inc=100'
          # use even lower value for reading even slower remote POP folders
          folder-hook ^pop 'set read_inc=1'

   These settings work on a per-message basis.  However, as messages may
greatly differ in size and certain operations are much faster than
others, even per-folder settings of the increment variables may not be
desirable as they produce either too few or too much progress updates.
Thus, Mutt allows to limit the number of progress updates per second
it’ll actually send to the terminal using the $time_inc (*note
time_inc::) variable.


File: mutt.info,  Node: Reading Messages from Remote Folders,  Next: Searching and Limiting,  Prev: Reading and Writing Mailboxes,  Up: Performance Tuning

8.2 Reading Messages from Remote Folders
========================================

Reading messages from remote folders such as IMAP an POP can be slow
especially for large mailboxes since Mutt only caches a very limited
number of recently viewed messages (usually 10) per session (so that it
will be gone for the next session.)

   To improve performance and permanently cache whole messages and
headers, please refer to body caching (*note Body Caching::) and header
caching (*note Header Caching::) for details.

   Additionally, it may be worth trying some of Mutt’s experimental
features.  $imap_qresync (*note imap_qresync::) (which requires header
caching) can provide a huge speed boost opening mailboxes if your IMAP
server supports it.  $imap_deflate (*note imap_deflate::) enables
compression, which can also noticeably reduce download time for large
mailboxes and messages.


File: mutt.info,  Node: Searching and Limiting,  Prev: Reading Messages from Remote Folders,  Up: Performance Tuning

8.3 Searching and Limiting
==========================

When searching mailboxes either via a search or a limit action, for some
patterns Mutt distinguishes between regular expression and string
searches.  For regular expressions, patterns are prefixed with ‘~’ and
with ‘=’ for string searches.

   Even though a regular expression search is fast, it’s several times
slower than a pure string search which is noticeable especially on large
folders.  As a consequence, a string search should be used instead of a
regular expression search if the user already knows enough about the
search pattern.

   For example, when limiting a large folder to all messages sent to or
by an author, it’s much faster to search for the initial part of an
e-mail address via ‘=Luser@’ instead of ‘~Luser@’.  This is especially
true for searching message bodies since a larger amount of input has to
be searched.

   As for regular expressions, a lower case string search pattern makes
Mutt perform a case-insensitive search except for IMAP (because for IMAP
Mutt performs server-side searches which don’t support
case-insensitivity).


File: mutt.info,  Node: Reference,  Next: Miscellany <1>,  Prev: Performance Tuning,  Up: Top

9 Reference
***********

* Menu:

* Command-Line Options::
* Configuration Commands::
* Configuration Variables::
* Functions: Functions <1>.


File: mutt.info,  Node: Command-Line Options,  Next: Configuration Commands,  Up: Reference

9.1 Command-Line Options
========================

Running ‘mutt’ with no arguments will make Mutt attempt to read your
spool mailbox.  However, it is possible to read other mailboxes and to
send messages from the command line as well.


   *Command line options*

Option                               Description
-A                                   expand an alias
-a                                   attach a file to a message
-b                                   specify a blind carbon-copy (BCC)
                                     address
-c                                   specify a carbon-copy (Cc) address
-d                                   log debugging output to
                                     ~/.muttdebug0 if mutt was compiled
                                     with +DEBUG; it can range from -5
                                     to 5 and affects verbosity.  A
                                     value of 0 disables debugging.  A
                                     value less than zero disables
                                     automatic log file rotation.  A
                                     value of 2 is recommended for most
                                     diagnostics.
-D                                   print the value of all Mutt
                                     variables to stdout
-E                                   edit the draft (-H) or include
                                     (-i) file
-e                                   specify a config command to be run
                                     after initialization files are
                                     read
-f                                   specify a mailbox to load
-F                                   specify an alternate file to read
                                     initialization commands
-h                                   print help on command line options
-H                                   specify a draft file from which to
                                     read a header and body
-i                                   specify a file to include in a
                                     message composition
-m                                   specify a default mailbox type
-n                                   do not read the system Muttrc
-p                                   recall a postponed message
-Q                                   query a configuration variable
-R                                   open mailbox in read-only mode
-s                                   specify a subject (enclose in
                                     quotes if it contains spaces)
-v                                   show version number and
                                     compile-time definitions
-x                                   simulate the mailx(1) compose mode
-y                                   show a menu containing the files
                                     specified by the ‘mailboxes’
                                     command
-z                                   exit immediately if there are no
                                     messages in the mailbox
-Z                                   open the first folder with new
                                     message, exit immediately if none

   To read messages in a mailbox

     mutt [-nz] [-F muttrc ] [-m type ] [-f mailbox ]

   To compose a new message

     mutt [-En] [-F muttrc ] [-c address ] [-Hi filename ] [-s subject ]
     [ -a file []… -- ] address | mailto_url …

   Mutt also supports a ‘batch’ mode to send prepared messages.  Simply
redirect input from the file you wish to send.  For example,


     mutt -s "data set for run #2" professor@bigschool.edu < ~/run2.dat

   will send a message to ‘<professor@bigschool.edu>’ with a subject of
‘data set for run #2’.  In the body of the message will be the contents
of the file ‘~/run2.dat’.

   An include file passed with ‘-i’ will be used as the body of the
message.  When combined with ‘-E’, the include file will be directly
edited during message composition.  The file will be modified regardless
of whether the message is sent or aborted.

   A draft file passed with ‘-H’ will be used as the initial header and
body for the message.  Multipart messages can be used as a draft file,
and are processed the same in interactive and batch mode; they are not
passed through untouched.  For example, encrypted draft files will be
decrypted.  When combined with ‘-E’, the draft file will be updated to
the final state of the message after composition, regardless of whether
the message is sent, aborted, or even postponed.  Note that if the
message is sent encrypted or signed, the draft file will be saved that
way too.

   All files passed with ‘-a’ _file_ will be attached as a MIME part to
the message.  To attach a single or several files, use ‘–’ to separate
files and recipient addresses:


     mutt -a image.png -- some@one.org

   or


     mutt -a *.png -- some@one.org

     *Note*

     The ‘-a’ option must be last in the option list.

   In addition to accepting a list of email addresses, Mutt also accepts
a URL with the ‘mailto:’ schema as specified in RFC2368.  This is useful
when configuring a web browser to launch Mutt when clicking on mailto
links.


     mutt mailto:some@one.org?subject=test&cc=other@one.org


File: mutt.info,  Node: Configuration Commands,  Next: Configuration Variables,  Prev: Command-Line Options,  Up: Reference

9.2 Configuration Commands
==========================

The following are the commands understood by Mutt:

   • 
          account-hook regexp command

   • 
          alias [ -group name ]… key address [ address ]… unalias [
          -group name ]… { * | key …}

   • 
          alternates [ -group name ]… regexp [ regexp ]… unalternates [
          -group name ]… { * | regexp …}

   • 
          alternative_order mimetype [ mimetype ]… unalternative_order {
          * | mimetype …}

   • 
          attachments { + | - }disposition mime-type unattachments { + |
          - }disposition mime-type attachments ? unattachments *

   • 
          auto_view mimetype [ mimetype ]… unauto_view { * | mimetype …}

   • 
          bind map key function

   • 
          cd directory

   • 
          charset-hook alias charset

   • 
          iconv-hook charset local-charset

   • 
          color object [ attribute ]… foreground background color {
          header | body } [ attribute ]… foreground background regexp
          color index [ attribute ]… foreground background pattern color
          compose composeobject [ attribute ]… foreground background
          uncolor { index | header | body } { * | pattern …}

   • 
          crypt-hook regexp keyid

   • 
          echo message

   • 
          exec function [ function ]…

   • 
          fcc-hook [!]pattern mailbox

   • 
          fcc-save-hook [!]pattern mailbox

   • 
          folder-hook [!]regexp command

   • 
          group [ -group name ]… { -rx expr … | -addr expr …} ungroup [
          -group name ]… { * | -rx expr … | -addr expr …}

   • 
          hdr_order header [ header ]… unhdr_order { * | header …}

   • 
          ignore pattern [ pattern ]… unignore { * | pattern …}

   • 
          index-format-hook name [!]pattern format-string

   • 
          lists [ -group name ] regexp [ regexp ]… unlists [ -group name
          ]… { * | regexp …}

   • 
          macro menu key sequence [ description ]

   • 
          mailboxes [ [ -notify | -nonotify ] [ -poll | -nopoll ] [
          -label label | -nolabel ] mailbox ] []… unmailboxes { * |
          mailbox …}

   • 
          mailto_allow { * | header-field …} unmailto_allow { * |
          header-field …}

   • 
          mbox-hook [!]regexp mailbox

   • 
          message-hook [!]pattern command

   • 
          mime_lookup mimetype [ mimetype ]… unmime_lookup { * |
          mimetype …}

   • 
          mono object attribute mono { header | body } attribute regexp
          mono index attribute pattern mono compose composeobject
          attribute unmono { index | header | body } { * | pattern …}

   • 
          my_hdr string unmy_hdr { * | field …}

   • 
          push string

   • 
          reply-hook [!]pattern command

   • 
          run MuttLisp

   • 
          save-hook [!]pattern mailbox

   • 
          score pattern value unscore { * | pattern …}

   • 
          send-hook [!]pattern command

   • 
          send2-hook [!]pattern command

   • 
          set { [no | inv] variable | variable=value } []… toggle
          variable [ variable ]… unset variable [ variable ]… reset
          variable [ variable ]…

   • 
          setenv [?]variable [ value ] unsetenv variable

   • 
          sidebar_whitelist mailbox [ mailbox ]… unsidebar_whitelist { *
          | mailbox …}

   • 
          source filename

   • 
          spam pattern format nospam { * | pattern }

   • 
          subjectrx pattern replacement unsubjectrx { * | pattern }

   • 
          subscribe [ -group name ]… regexp [ regexp ]… unsubscribe [
          -group name ]… { * | regexp …}

   • 
          unhook { * | hook-type }


File: mutt.info,  Node: Configuration Variables,  Next: Functions <1>,  Prev: Configuration Commands,  Up: Reference

9.3 Configuration Variables
===========================

* Menu:

* abort_noattach::
* abort_noattach_regexp::
* abort_nosubject::
* abort_unmodified::
* alias_file::
* alias_format::
* allow_8bit::
* allow_ansi::
* arrow_cursor::
* ascii_chars::
* askbcc::
* askcc::
* assumed_charset::
* attach_charset::
* attach_format::
* attach_save_charset_convert::
* attach_save_dir::
* attach_sep::
* attach_split::
* attribution::
* attribution_locale::
* auto_subscribe::
* auto_tag::
* autocrypt::
* autocrypt_acct_format::
* autocrypt_dir::
* autocrypt_reply::
* autoedit::
* background_edit::
* background_confirm_quit::
* background_format::
* beep::
* beep_new::
* bounce::
* bounce_delivered::
* braille_friendly::
* browser_abbreviate_mailboxes::
* browser_sticky_cursor::
* certificate_file::
* change_folder_next::
* charset::
* check_mbox_size::
* check_new::
* collapse_unread::
* compose_confirm_detach_first::
* compose_format::
* config_charset::
* confirmappend::
* confirmcreate::
* connect_timeout::
* content_type::
* copy::
* copy_decode_weed::
* count_alternatives::
* cursor_overlay::
* crypt_autoencrypt::
* crypt_autopgp::
* crypt_autosign::
* crypt_autosmime::
* crypt_confirmhook::
* crypt_opportunistic_encrypt::
* crypt_opportunistic_encrypt_strong_keys::
* crypt_protected_headers_read::
* crypt_protected_headers_save::
* crypt_protected_headers_subject::
* crypt_protected_headers_write::
* crypt_replyencrypt::
* crypt_replysign::
* crypt_replysignencrypted::
* crypt_timestamp::
* crypt_use_gpgme::
* crypt_use_pka::
* crypt_verify_sig::
* date_format::
* default_hook::
* delete::
* delete_untag::
* digest_collapse::
* display_filter::
* dotlock_program::
* dsn_notify::
* dsn_return::
* duplicate_threads::
* edit_headers::
* editor::
* encode_from::
* entropy_file::
* envelope_from_address::
* error_history::
* escape::
* fast_reply::
* fcc_attach::
* fcc_before_send::
* fcc_clear::
* fcc_delimiter::
* flag_safe::
* folder::
* folder_format::
* followup_to::
* force_name::
* forward_attachments::
* forward_attribution_intro::
* forward_attribution_trailer::
* forward_decode::
* forward_decrypt::
* forward_edit::
* forward_format::
* forward_quote::
* from::
* gecos_mask::
* hdrs::
* header::
* header_cache::
* header_cache_compress::
* header_cache_pagesize::
* header_color_partial::
* help::
* hidden_host::
* hide_limited::
* hide_missing::
* hide_thread_subject::
* hide_top_limited::
* hide_top_missing::
* history::
* history_file::
* history_remove_dups::
* honor_disposition::
* honor_followup_to::
* hostname::
* idn_decode::
* idn_encode::
* ignore_linear_white_space::
* ignore_list_reply_to::
* imap_authenticators::
* imap_check_subscribed::
* imap_condstore::
* imap_deflate::
* imap_delim_chars::
* imap_fetch_chunk_size::
* imap_headers::
* imap_idle::
* imap_keepalive::
* imap_list_subscribed::
* imap_login::
* imap_oauth_refresh_command::
* imap_pass::
* imap_passive::
* imap_peek::
* imap_pipeline_depth::
* imap_poll_timeout::
* imap_qresync::
* imap_servernoise::
* imap_user::
* implicit_autoview::
* include::
* include_encrypted::
* include_onlyfirst::
* indent_string::
* index_format::
* ispell::
* keep_flagged::
* local_date_header::
* mail_check::
* mail_check_recent::
* mail_check_stats::
* mail_check_stats_interval::
* mailcap_path::
* mailcap_sanitize::
* maildir_header_cache_verify::
* maildir_trash::
* maildir_check_cur::
* mark_macro_prefix::
* mark_old::
* markers::
* mask::
* mbox::
* mbox_type::
* menu_context::
* menu_move_off::
* menu_scroll::
* message_cache_clean::
* message_cachedir::
* message_format::
* message_id_format::
* meta_key::
* metoo::
* mh_purge::
* mh_seq_flagged::
* mh_seq_replied::
* mh_seq_unseen::
* mime_forward::
* mime_forward_decode::
* mime_forward_rest::
* mime_type_query_command::
* mime_type_query_first::
* mix_entry_format::
* mixmaster::
* move::
* muttlisp_inline_eval::
* narrow_tree::
* net_inc::
* new_mail_command::
* pager::
* pager_context::
* pager_format::
* pager_index_lines::
* pager_skip_quoted_context::
* pager_stop::
* pattern_format::
* pgp_auto_decode::
* pgp_autoinline::
* pgp_check_exit::
* pgp_check_gpg_decrypt_status_fd::
* pgp_clearsign_command::
* pgp_decode_command::
* pgp_decrypt_command::
* pgp_decryption_okay::
* pgp_default_key::
* pgp_encrypt_only_command::
* pgp_encrypt_sign_command::
* pgp_entry_format::
* pgp_export_command::
* pgp_getkeys_command::
* pgp_good_sign::
* pgp_ignore_subkeys::
* pgp_import_command::
* pgp_list_pubring_command::
* pgp_list_secring_command::
* pgp_long_ids::
* pgp_mime_auto::
* pgp_replyinline::
* pgp_retainable_sigs::
* pgp_self_encrypt::
* pgp_show_unusable::
* pgp_sign_as::
* pgp_sign_command::
* pgp_sort_keys::
* pgp_strict_enc::
* pgp_timeout::
* pgp_use_gpg_agent::
* pgp_verify_command::
* pgp_verify_key_command::
* pipe_decode::
* pipe_decode_weed::
* pipe_sep::
* pipe_split::
* pop_auth_try_all::
* pop_authenticators::
* pop_checkinterval::
* pop_delete::
* pop_host::
* pop_last::
* pop_oauth_refresh_command::
* pop_pass::
* pop_reconnect::
* pop_user::
* post_indent_string::
* postpone::
* postponed::
* postpone_encrypt::
* postpone_encrypt_as::
* preconnect::
* print::
* print_command::
* print_decode::
* print_decode_weed::
* print_split::
* prompt_after::
* query_command::
* query_format::
* quit::
* quote_regexp::
* read_inc::
* read_only::
* realname::
* recall::
* record::
* reflow_space_quotes::
* reflow_text::
* reflow_wrap::
* reply_regexp::
* reply_self::
* reply_to::
* resolve::
* resume_draft_files::
* resume_edited_draft_files::
* reverse_alias::
* reverse_name::
* reverse_realname::
* rfc2047_parameters::
* save_address::
* save_empty::
* save_history::
* save_name::
* score::
* score_threshold_delete::
* score_threshold_flag::
* score_threshold_read::
* search_context::
* send_charset::
* send_multipart_alternative::
* send_multipart_alternative_filter::
* sendmail::
* sendmail_wait::
* shell::
* sidebar_delim_chars::
* sidebar_divider_char::
* sidebar_folder_indent::
* sidebar_format::
* sidebar_indent_string::
* sidebar_new_mail_only::
* sidebar_next_new_wrap::
* sidebar_relative_shortpath_indent::
* sidebar_short_path::
* sidebar_sort_method::
* sidebar_use_mailbox_shortcuts::
* sidebar_visible::
* sidebar_width::
* sig_dashes::
* sig_on_top::
* signature::
* simple_search::
* size_show_bytes::
* size_show_fractions::
* size_show_mb::
* size_units_on_left::
* sleep_time::
* smart_wrap::
* smileys::
* smime_ask_cert_label::
* smime_ca_location::
* smime_certificates::
* smime_decrypt_command::
* smime_decrypt_use_default_key::
* smime_default_key::
* smime_encrypt_command::
* smime_encrypt_with::
* smime_get_cert_command::
* smime_get_cert_email_command::
* smime_get_signer_cert_command::
* smime_import_cert_command::
* smime_is_default::
* smime_keys::
* smime_pk7out_command::
* smime_self_encrypt::
* smime_sign_as::
* smime_sign_command::
* smime_sign_digest_alg::
* smime_sign_opaque_command::
* smime_timeout::
* smime_verify_command::
* smime_verify_opaque_command::
* smtp_authenticators::
* smtp_oauth_refresh_command::
* smtp_pass::
* smtp_url::
* sort::
* sort_alias::
* sort_aux::
* sort_browser::
* sort_browser_mailboxes::
* sort_re::
* sort_thread_groups::
* spam_separator::
* spoolfile::
* ssl_ca_certificates_file::
* ssl_client_cert::
* ssl_force_tls::
* ssl_min_dh_prime_bits::
* ssl_starttls::
* ssl_use_sslv2::
* ssl_use_sslv3::
* ssl_use_tlsv1::
* ssl_use_tlsv1_1::
* ssl_use_tlsv1_2::
* ssl_use_tlsv1_3::
* ssl_usesystemcerts::
* ssl_verify_dates::
* ssl_verify_host::
* ssl_verify_host_override::
* ssl_verify_partial_chains::
* ssl_ciphers::
* status_chars::
* status_format::
* status_on_top::
* strict_threads::
* suspend::
* text_flowed::
* thorough_search::
* thread_received::
* tilde::
* time_inc::
* timeout::
* tmpdir::
* to_chars::
* trash::
* ts_icon_format::
* ts_enabled::
* ts_status_format::
* tunnel::
* tunnel_is_secure::
* uncollapse_jump::
* uncollapse_new::
* use_8bitmime::
* use_domain::
* use_envelope_from::
* use_from::
* use_ipv6::
* user_agent::
* visual::
* wait_key::
* weed::
* wrap::
* wrap_headers::
* wrap_search::
* wrapmargin::
* write_bcc::
* write_inc::


File: mutt.info,  Node: abort_noattach,  Next: abort_noattach_regexp,  Up: Configuration Variables

9.3.1 abort_noattach
--------------------

     Type: quadoption
     Default: no

   When the body of the message matches $abort_noattach_regexp (*note
abort_noattach_regexp::) and there are no attachments, this quadoption
controls whether to abort sending the message.


File: mutt.info,  Node: abort_noattach_regexp,  Next: abort_nosubject,  Prev: abort_noattach,  Up: Configuration Variables

9.3.2 abort_noattach_regexp
---------------------------

     Type: regular expression
     Default: ‘attach’

   Specifies a regular expression to match against the body of the
message, to determine if an attachment was mentioned but mistakenly
forgotten.  If it matches, $abort_noattach (*note abort_noattach::) will
be consulted to determine if message sending will be aborted.

   Like other regular expressions in Mutt, the search is case sensitive
if the pattern contains at least one upper case letter, and case
insensitive otherwise.


File: mutt.info,  Node: abort_nosubject,  Next: abort_unmodified,  Prev: abort_noattach_regexp,  Up: Configuration Variables

9.3.3 abort_nosubject
---------------------

     Type: quadoption
     Default: ask-yes

   If set to _yes_, when composing messages and no subject is given at
the subject prompt, composition will be aborted.  If set to _no_,
composing messages with no subject given at the subject prompt will
never be aborted.


File: mutt.info,  Node: abort_unmodified,  Next: alias_file,  Prev: abort_nosubject,  Up: Configuration Variables

9.3.4 abort_unmodified
----------------------

     Type: quadoption
     Default: yes

   If set to _yes_, composition will automatically abort after editing
the message body if no changes are made to the file (this check only
happens after the _first_ edit of the file).  When set to _no_,
composition will never be aborted.


File: mutt.info,  Node: alias_file,  Next: alias_format,  Prev: abort_unmodified,  Up: Configuration Variables

9.3.5 alias_file
----------------

     Type: path
     Default: ‘~/.muttrc’

   The default file in which to save aliases created by the
‘<create-alias> (*note create-alias::)’ function.  Entries added to this
file are encoded in the character set specified by $config_charset
(*note config_charset::) if it is _set_ or the current character set
otherwise.

   *Note:* Mutt will not automatically source this file; you must
explicitly use the ‘source (*note Reading Initialization Commands From
Another File::)’ command for it to be executed in case this option
points to a dedicated alias file.

   The default for this option is the currently used muttrc file, or
‘~/.muttrc’ if no user muttrc was found.


File: mutt.info,  Node: alias_format,  Next: allow_8bit,  Prev: alias_file,  Up: Configuration Variables

9.3.6 alias_format
------------------

     Type: string
     Default: ‘%4n %2f %t %-10a   %r’

   Specifies the format of the data displayed for the ‘alias (*note
Defining/Using Aliases::)’ menu.  The following ‘printf(3)’-style
sequences are available:

%a                                   alias name
%f                                   flags - currently, a ‘d’ for an
                                     alias marked for deletion
%n                                   index number
%r                                   address which alias expands to
%t                                   character which indicates if the
                                     alias is tagged for inclusion


File: mutt.info,  Node: allow_8bit,  Next: allow_ansi,  Prev: alias_format,  Up: Configuration Variables

9.3.7 allow_8bit
----------------

     Type: boolean
     Default: yes

   Controls whether 8-bit data is converted to 7-bit using either
Quoted- Printable or Base64 encoding when sending mail.


File: mutt.info,  Node: allow_ansi,  Next: arrow_cursor,  Prev: allow_8bit,  Up: Configuration Variables

9.3.8 allow_ansi
----------------

     Type: boolean
     Default: no

   Controls whether ANSI color codes in messages (and color tags in rich
text messages) are to be interpreted.  Messages containing these codes
are rare, but if this option is _set_, their text will be colored
accordingly.  Note that this may override your color choices, and even
present a security problem, since a message could include a line like


     [-- PGP output follows ...

   and give it the same color as your attachment color (see also
$crypt_timestamp (*note crypt_timestamp::)).


File: mutt.info,  Node: arrow_cursor,  Next: ascii_chars,  Prev: allow_ansi,  Up: Configuration Variables

9.3.9 arrow_cursor
------------------

     Type: boolean
     Default: no

   When _set_, an arrow (‘->’) will be used to indicate the current
entry in menus instead of highlighting the whole line.  On slow network
or modem links this will make response faster because there is less that
has to be redrawn on the screen when moving to the next or previous
entries in the menu.


File: mutt.info,  Node: ascii_chars,  Next: askbcc,  Prev: arrow_cursor,  Up: Configuration Variables

9.3.10 ascii_chars
------------------

     Type: boolean
     Default: no

   If _set_, Mutt will use plain ASCII characters when displaying thread
and attachment trees, instead of the default _ACS_ characters.


File: mutt.info,  Node: askbcc,  Next: askcc,  Prev: ascii_chars,  Up: Configuration Variables

9.3.11 askbcc
-------------

     Type: boolean
     Default: no

   If _set_, Mutt will prompt you for blind-carbon-copy (Bcc) recipients
before editing an outgoing message.


File: mutt.info,  Node: askcc,  Next: assumed_charset,  Prev: askbcc,  Up: Configuration Variables

9.3.12 askcc
------------

     Type: boolean
     Default: no

   If _set_, Mutt will prompt you for carbon-copy (Cc) recipients before
editing the body of an outgoing message.


File: mutt.info,  Node: assumed_charset,  Next: attach_charset,  Prev: askcc,  Up: Configuration Variables

9.3.13 assumed_charset
----------------------

     Type: string
     Default: (empty)

   This variable is a colon-separated list of character encoding schemes
for messages without character encoding indication.  Header field values
and message body content without character encoding indication would be
assumed that they are written in one of this list.  By default, all the
header fields and message body without any charset indication are
assumed to be in ‘us-ascii’.

   For example, Japanese users might prefer this:


     set assumed_charset="iso-2022-jp:euc-jp:shift_jis:utf-8"

   However, only the first content is valid for the message body.


File: mutt.info,  Node: attach_charset,  Next: attach_format,  Prev: assumed_charset,  Up: Configuration Variables

9.3.14 attach_charset
---------------------

     Type: string
     Default: (empty)

   This variable is a colon-separated list of character encoding schemes
for text file attachments.  Mutt uses this setting to guess which
encoding files being attached are encoded in to convert them to a proper
character set given in $send_charset (*note send_charset::).

   If _unset_, the value of $charset (*note charset::) will be used
instead.  For example, the following configuration would work for
Japanese text handling:


     set attach_charset="iso-2022-jp:euc-jp:shift_jis:utf-8"

   Note: for Japanese users, ‘iso-2022-*’ must be put at the head of the
value as shown above if included.


File: mutt.info,  Node: attach_format,  Next: attach_save_charset_convert,  Prev: attach_charset,  Up: Configuration Variables

9.3.15 attach_format
--------------------

     Type: string
     Default: ‘%u%D%I %t%4n %T%.40d%> [%.7m/%.10M, %.6e%?C?, %C?, %s] ’

   This variable describes the format of the ‘attachment’ menu.  The
following ‘printf(3)’-style sequences are understood:

%C                                   charset
%c                                   requires charset conversion (‘n’
                                     or ‘c’)
%D                                   deleted flag
%d                                   description (if none, falls back
                                     to %F)
%e                                   MIME content-transfer-encoding
%F                                   filename in content-disposition
                                     header (if none, falls back to %f)
%f                                   filename
%I                                   disposition (‘I’ for inline, ‘A’
                                     for attachment)
%m                                   major MIME type
%M                                   MIME subtype
%n                                   attachment number
%Q                                   ‘Q’, if MIME part qualifies for
                                     attachment counting
%s                                   size (see formatstrings-size
                                     (*note Bytes size display::))
%t                                   tagged flag
%T                                   graphic tree characters
%u                                   unlink (=to delete) flag
%X                                   number of qualifying MIME parts in
                                     this part and its children (please
                                     see the ‘attachments
                                     (*note Attachment Searching and Counting::)’
                                     section for possible speed
                                     effects)
%>X                                  right justify the rest of the
                                     string and pad with character ‘X’
%|X                                  pad to the end of the line with
                                     character ‘X’
%*X                                  soft-fill with character ‘X’ as
                                     pad

   For an explanation of ‘soft-fill’, see the $index_format (*note
index_format::) documentation.


File: mutt.info,  Node: attach_save_charset_convert,  Next: attach_save_dir,  Prev: attach_format,  Up: Configuration Variables

9.3.16 attach_save_charset_convert
----------------------------------

     Type: quadoption
     Default: ask-yes

   When saving received text-type attachments, this quadoption prompts
to convert the character set if the encoding of the attachment (or
$assumed_charset (*note assumed_charset::) if none is specified) differs
from charset (*note charset::).


File: mutt.info,  Node: attach_save_dir,  Next: attach_sep,  Prev: attach_save_charset_convert,  Up: Configuration Variables

9.3.17 attach_save_dir
----------------------

     Type: path
     Default: (empty)

   The default directory to save attachments from the ‘attachment’ menu.
If it doesn’t exist, Mutt will prompt to create the directory before
saving.

   If the path is invalid (e.g.  not a directory, or cannot be chdir’ed
to), Mutt will fall back to using the current directory.


File: mutt.info,  Node: attach_sep,  Next: attach_split,  Prev: attach_save_dir,  Up: Configuration Variables

9.3.18 attach_sep
-----------------

     Type: string
     Default: ‘\n’

   The separator to add between attachments when operating (saving,
printing, piping, etc) on a list of tagged attachments.


File: mutt.info,  Node: attach_split,  Next: attribution,  Prev: attach_sep,  Up: Configuration Variables

9.3.19 attach_split
-------------------

     Type: boolean
     Default: yes

   If this variable is _unset_, when operating (saving, printing,
piping, etc) on a list of tagged attachments, Mutt will concatenate the
attachments and will operate on them as a single attachment.  The
$attach_sep (*note attach_sep::) separator is added after each
attachment.  When _set_, Mutt will operate on the attachments one by
one.


File: mutt.info,  Node: attribution,  Next: attribution_locale,  Prev: attach_split,  Up: Configuration Variables

9.3.20 attribution
------------------

     Type: string (localized)
     Default: ‘On %d, %n wrote:’

   This is the string that will precede a message which has been
included in a reply.  For a full listing of defined ‘printf(3)’-like
sequences see the section on $index_format (*note index_format::).


File: mutt.info,  Node: attribution_locale,  Next: auto_subscribe,  Prev: attribution,  Up: Configuration Variables

9.3.21 attribution_locale
-------------------------

     Type: string
     Default: (empty)

   The locale used by ‘strftime(3)’ to format dates in the attribution
(*note attribution::) string.  Legal values are the strings your system
accepts for the locale environment variable ‘$LC_TIME’.

   This variable is to allow the attribution date format to be
customized by recipient or folder using hooks.  By default, Mutt will
use your locale environment, so there is no need to set this except to
override that default.


File: mutt.info,  Node: auto_subscribe,  Next: auto_tag,  Prev: attribution_locale,  Up: Configuration Variables

9.3.22 auto_subscribe
---------------------

     Type: boolean
     Default: no

   When _set_, Mutt assumes the presence of a List-Post header means the
recipient is subscribed to the list.  Unless the mailing list is in the
‘unsubscribe’ or ‘unlist’ lists, it will be added to the ‘subscribe
(*note subscribe::)’ list.  Parsing and checking these things slows
header reading down, so this option is disabled by default.


File: mutt.info,  Node: auto_tag,  Next: autocrypt,  Prev: auto_subscribe,  Up: Configuration Variables

9.3.23 auto_tag
---------------

     Type: boolean
     Default: no

   When _set_, functions in the _index_ menu which affect a message will
be applied to all tagged messages (if there are any).  When unset, you
must first use the ‘<tag-prefix>’ function (bound to ‘;’ by default) to
make the next function apply to all tagged messages.


File: mutt.info,  Node: autocrypt,  Next: autocrypt_acct_format,  Prev: auto_tag,  Up: Configuration Variables

9.3.24 autocrypt
----------------

     Type: boolean
     Default: no

   When _set_, enables autocrypt, which provides passive encryption
protection with keys exchanged via headers.  See ‘autocryptdoc (*note
Autocrypt::)’ for more details.  (Autocrypt only)


File: mutt.info,  Node: autocrypt_acct_format,  Next: autocrypt_dir,  Prev: autocrypt,  Up: Configuration Variables

9.3.25 autocrypt_acct_format
----------------------------

     Type: string
     Default: ‘%4n %-30a %20p %10s’

   This variable describes the format of the ‘autocrypt account’ menu.
The following ‘printf(3)’-style sequences are understood

%a                                   email address
%k                                   gpg keyid
%n                                   current entry number
%p                                   prefer-encrypt flag
%s                                   status flag (active/inactive)

   (Autocrypt only)


File: mutt.info,  Node: autocrypt_dir,  Next: autocrypt_reply,  Prev: autocrypt_acct_format,  Up: Configuration Variables

9.3.26 autocrypt_dir
--------------------

     Type: path
     Default: ‘~/.mutt/autocrypt’

   This variable sets where autocrypt files are stored, including the
GPG keyring and sqlite database.  See ‘autocryptdoc (*note Autocrypt::)’
for more details.  (Autocrypt only)


File: mutt.info,  Node: autocrypt_reply,  Next: autoedit,  Prev: autocrypt_dir,  Up: Configuration Variables

9.3.27 autocrypt_reply
----------------------

     Type: boolean
     Default: yes

   When _set_, replying to an autocrypt email automatically enables
autocrypt in the reply.  You may want to unset this if you’re using the
same key for autocrypt as normal web-of-trust, so that autocrypt isn’t
forced on for all encrypted replies.  (Autocrypt only)


File: mutt.info,  Node: autoedit,  Next: background_edit,  Prev: autocrypt_reply,  Up: Configuration Variables

9.3.28 autoedit
---------------

     Type: boolean
     Default: no

   When _set_ along with $edit_headers (*note edit_headers::), Mutt will
skip the initial send-menu (prompting for subject and recipients) and
allow you to immediately begin editing the body of your message.  The
send-menu may still be accessed once you have finished editing the body
of your message.

   *Note:* when this option is _set_, you cannot use send-hooks that
depend on the recipients when composing a new (non-reply) message, as
the initial list of recipients is empty.

   Also see $fast_reply (*note fast_reply::).


File: mutt.info,  Node: background_edit,  Next: background_confirm_quit,  Prev: autoedit,  Up: Configuration Variables

9.3.29 background_edit
----------------------

     Type: boolean
     Default: no

   When _set_, Mutt will run $editor (*note editor::) in the background
during message composition.  A landing page will display, waiting for
the $editor (*note editor::) to exit.  The landing page may be exited,
allowing perusal of the mailbox, or even for other messages to be
composed.  Backgrounded sessions may be returned to via the
‘<background-compose-menu>’ function.

   For background editing to work properly, $editor (*note editor::)
must be set to an editor that does not try to use the Mutt terminal: for
example a graphical editor, or a script launching (and waiting for) the
editor in another Gnu Screen window.

   For more details, see ‘bgedit (*note Background Editing::)’
("Background Editing" in the manual).


File: mutt.info,  Node: background_confirm_quit,  Next: background_format,  Prev: background_edit,  Up: Configuration Variables

9.3.30 background_confirm_quit
------------------------------

     Type: boolean
     Default: yes

   When _set_, if there are any background edit sessions, you will be
prompted to confirm exiting Mutt, in addition to the $quit (*note
quit::) prompt.


File: mutt.info,  Node: background_format,  Next: beep,  Prev: background_confirm_quit,  Up: Configuration Variables

9.3.31 background_format
------------------------

     Type: string
     Default: ‘%10S %7p %s’

   This variable describes the format of the ‘background compose’ menu.
The following ‘printf(3)’-style sequences are understood:

%i                                   parent message id (for replies and
                                     forwarded messages)
%n                                   the running number on the menu
%p                                   pid of the $editor
                                     (*note editor::) process
%r                                   comma separated list of ‘To:’
                                     recipients
%R                                   comma separated list of ‘Cc:’
                                     recipients
%s                                   subject of the message
%S                                   status of the $editor
                                     (*note editor::) process:
                                     running/finished


File: mutt.info,  Node: beep,  Next: beep_new,  Prev: background_format,  Up: Configuration Variables

9.3.32 beep
-----------

     Type: boolean
     Default: yes

   When this variable is _set_, mutt will beep when an error occurs.


File: mutt.info,  Node: beep_new,  Next: bounce,  Prev: beep,  Up: Configuration Variables

9.3.33 beep_new
---------------

     Type: boolean
     Default: no

   When this variable is _set_, mutt will beep whenever it prints a
message notifying you of new mail.  This is independent of the setting
of the $beep (*note beep::) variable.


File: mutt.info,  Node: bounce,  Next: bounce_delivered,  Prev: beep_new,  Up: Configuration Variables

9.3.34 bounce
-------------

     Type: quadoption
     Default: ask-yes

   Controls whether you will be asked to confirm bouncing messages.  If
set to _yes_ you don’t get asked if you want to bounce a message.
Setting this variable to _no_ is not generally useful, and thus not
recommended, because you are unable to bounce messages.


File: mutt.info,  Node: bounce_delivered,  Next: braille_friendly,  Prev: bounce,  Up: Configuration Variables

9.3.35 bounce_delivered
-----------------------

     Type: boolean
     Default: yes

   When this variable is _set_, mutt will include Delivered-To headers
when bouncing messages.  Postfix users may wish to _unset_ this
variable.


File: mutt.info,  Node: braille_friendly,  Next: browser_abbreviate_mailboxes,  Prev: bounce_delivered,  Up: Configuration Variables

9.3.36 braille_friendly
-----------------------

     Type: boolean
     Default: no

   When this variable is _set_, mutt will place the cursor at the
beginning of the current line in menus, even when the $arrow_cursor
(*note arrow_cursor::) variable is _unset_, making it easier for blind
persons using Braille displays to follow these menus.  The option is
_unset_ by default because many visual terminals don’t permit making the
cursor invisible.


File: mutt.info,  Node: browser_abbreviate_mailboxes,  Next: browser_sticky_cursor,  Prev: braille_friendly,  Up: Configuration Variables

9.3.37 browser_abbreviate_mailboxes
-----------------------------------

     Type: boolean
     Default: yes

   When this variable is _set_, mutt will abbreviate mailbox names in
the browser mailbox list, using ’~’ and ’=’ shortcuts.

   The default ‘"alpha"’ setting of $sort_browser (*note sort_browser::)
uses locale-based sorting (using ‘strcoll(3)’), which ignores some
punctuation.  This can lead to some situations where the order doesn’t
make intuitive sense.  In those cases, it may be desirable to _unset_
this variable.


File: mutt.info,  Node: browser_sticky_cursor,  Next: certificate_file,  Prev: browser_abbreviate_mailboxes,  Up: Configuration Variables

9.3.38 browser_sticky_cursor
----------------------------

     Type: boolean
     Default: yes

   When this variable is _set_, the browser will attempt to keep the
cursor on the same mailbox when performing various functions.  These
include moving up a directory, toggling between mailboxes and directory
listing, creating/renaming a mailbox, toggling subscribed mailboxes, and
entering a new mask.


File: mutt.info,  Node: certificate_file,  Next: change_folder_next,  Prev: browser_sticky_cursor,  Up: Configuration Variables

9.3.39 certificate_file
-----------------------

     Type: path
     Default: ‘~/.mutt_certificates’

   This variable specifies the file where the certificates you trust are
saved.  When an unknown certificate is encountered, you are asked if you
accept it or not.  If you accept it, the certificate can also be saved
in this file and further connections are automatically accepted.

   You can also manually add CA certificates in this file.  Any server
certificate that is signed with one of these CA certificates is also
automatically accepted.

   Example:


     set certificate_file=~/.mutt/certificates

   (OpenSSL and GnuTLS only)


File: mutt.info,  Node: change_folder_next,  Next: charset,  Prev: certificate_file,  Up: Configuration Variables

9.3.40 change_folder_next
-------------------------

     Type: boolean
     Default: no

   When this variable is _set_, the ‘<change-folder>’ function mailbox
suggestion will start at the next folder in your ‘mailboxes (*note
Monitoring Incoming Mail::)’ list, instead of starting at the first
folder in the list.


File: mutt.info,  Node: charset,  Next: check_mbox_size,  Prev: change_folder_next,  Up: Configuration Variables

9.3.41 charset
--------------

     Type: string
     Default: (empty)

   Character set your terminal uses to display and enter textual data.
It is also the fallback for $send_charset (*note send_charset::).

   Upon startup Mutt tries to derive this value from environment
variables such as ‘$LC_CTYPE’ or ‘$LANG’.

   *Note:* It should only be set in case Mutt isn’t able to determine
the character set used correctly.


File: mutt.info,  Node: check_mbox_size,  Next: check_new,  Prev: charset,  Up: Configuration Variables

9.3.42 check_mbox_size
----------------------

     Type: boolean
     Default: no

   When this variable is _set_, mutt will use file size attribute
instead of access time when checking for new mail in mbox and mmdf
folders.

   This variable is _unset_ by default and should only be enabled when
new mail detection for these folder types is unreliable or doesn’t work.

   Note that enabling this variable should happen before any ‘mailboxes
(*note Monitoring Incoming Mail::)’ directives occur in configuration
files regarding mbox or mmdf folders because mutt needs to determine the
initial new mail status of such a mailbox by performing a fast mailbox
scan when it is defined.  Afterwards the new mail status is tracked by
file size changes.


File: mutt.info,  Node: check_new,  Next: collapse_unread,  Prev: check_mbox_size,  Up: Configuration Variables

9.3.43 check_new
----------------

     Type: boolean
     Default: yes

   *Note:* this option only affects _maildir_ and _MH_ style mailboxes.

   When _set_, Mutt will check for new mail delivered while the mailbox
is open.  Especially with MH mailboxes, this operation can take quite
some time since it involves scanning the directory and checking each
file to see if it has already been looked at.  If this variable is
_unset_, no check for new mail is performed while the mailbox is open.


File: mutt.info,  Node: collapse_unread,  Next: compose_confirm_detach_first,  Prev: check_new,  Up: Configuration Variables

9.3.44 collapse_unread
----------------------

     Type: boolean
     Default: yes

   When _unset_, Mutt will not collapse a thread if it contains any
unread messages.


File: mutt.info,  Node: compose_confirm_detach_first,  Next: compose_format,  Prev: collapse_unread,  Up: Configuration Variables

9.3.45 compose_confirm_detach_first
-----------------------------------

     Type: boolean
     Default: yes

   When _set_, Mutt will prompt for confirmation when trying to use
‘<detach-file>’ on the first entry in the compose menu.  This is to help
prevent irreversible loss of the typed message by accidentally hitting
’D’ in the menu.

   Note: Mutt only prompts for the first entry.  It doesn’t keep track
of which message is the typed message if the entries are reordered, or
if the first entry was already deleted.


File: mutt.info,  Node: compose_format,  Next: config_charset,  Prev: compose_confirm_detach_first,  Up: Configuration Variables

9.3.46 compose_format
---------------------

     Type: string (localized)
     Default: ‘– Mutt: Compose  [Approx. msg size: %l   Atts: %a]%>-’

   Controls the format of the status line displayed in the ‘compose’
menu.  This string is similar to $status_format (*note status_format::),
but has its own set of ‘printf(3)’-like sequences:

%a                                   total number of attachments
%h                                   local hostname
%l                                   approximate size (in bytes) of the
                                     current message (see
                                     formatstrings-size
                                     (*note Bytes size display::))
%v                                   Mutt version string

   See the text describing the $status_format (*note status_format::)
option for more information on how to set $compose_format (*note
compose_format::).


File: mutt.info,  Node: config_charset,  Next: confirmappend,  Prev: compose_format,  Up: Configuration Variables

9.3.47 config_charset
---------------------

     Type: string
     Default: (empty)

   When defined, Mutt will recode commands in rc files from this
encoding to the current character set as specified by $charset (*note
charset::) and aliases written to $alias_file (*note alias_file::) from
the current character set.

   Please note that if setting $charset (*note charset::) it must be
done before setting $config_charset (*note config_charset::).

   Recoding should be avoided as it may render unconvertable characters
as question marks which can lead to undesired side effects (for example
in regular expressions).


File: mutt.info,  Node: confirmappend,  Next: confirmcreate,  Prev: config_charset,  Up: Configuration Variables

9.3.48 confirmappend
--------------------

     Type: boolean
     Default: yes

   When _set_, Mutt will prompt for confirmation when appending messages
to an existing mailbox.


File: mutt.info,  Node: confirmcreate,  Next: connect_timeout,  Prev: confirmappend,  Up: Configuration Variables

9.3.49 confirmcreate
--------------------

     Type: boolean
     Default: yes

   When _set_, Mutt will prompt for confirmation when saving messages to
a mailbox which does not yet exist before creating it.


File: mutt.info,  Node: connect_timeout,  Next: content_type,  Prev: confirmcreate,  Up: Configuration Variables

9.3.50 connect_timeout
----------------------

     Type: number
     Default: 30

   Causes Mutt to timeout a network connection (for IMAP, POP or SMTP)
after this many seconds if the connection is not able to be established.
A negative value causes Mutt to wait indefinitely for the connection
attempt to succeed.


File: mutt.info,  Node: content_type,  Next: copy,  Prev: connect_timeout,  Up: Configuration Variables

9.3.51 content_type
-------------------

     Type: string
     Default: ‘text/plain’

   Sets the default Content-Type for the body of newly composed
messages.


File: mutt.info,  Node: copy,  Next: copy_decode_weed,  Prev: content_type,  Up: Configuration Variables

9.3.52 copy
-----------

     Type: quadoption
     Default: yes

   This variable controls whether or not copies of your outgoing
messages will be saved for later references.  Also see $record (*note
record::), $save_name (*note save_name::), $force_name (*note
force_name::) and ‘fcc-hook (*note Specify Default Fcc; Mailbox When
Composing::)’.


File: mutt.info,  Node: copy_decode_weed,  Next: count_alternatives,  Prev: copy,  Up: Configuration Variables

9.3.53 copy_decode_weed
-----------------------

     Type: boolean
     Default: no

   Controls whether Mutt will weed headers when invoking the
‘<decode-copy>’ or ‘<decode-save>’ functions.


File: mutt.info,  Node: count_alternatives,  Next: cursor_overlay,  Prev: copy_decode_weed,  Up: Configuration Variables

9.3.54 count_alternatives
-------------------------

     Type: boolean
     Default: no

   When _set_, Mutt will recurse inside multipart/alternatives while
performing attachment searching and counting (see attachments (*note
Attachment Searching and Counting::)).

   Traditionally, multipart/alternative parts have simply represented
different encodings of the main content of the email.  Unfortunately,
some mail clients have started to place email attachments inside one of
alternatives.  Setting this will allow Mutt to find and count matching
attachments hidden there, and include them in the index via %X or
through ~X pattern matching.


File: mutt.info,  Node: cursor_overlay,  Next: crypt_autoencrypt,  Prev: count_alternatives,  Up: Configuration Variables

9.3.55 cursor_overlay
---------------------

     Type: boolean
     Default: no

   When _set_, Mutt will overlay the indicator, tree, sidebar_highlight,
and sidebar_indicator colors onto the currently selected line.  This
will allow ‘default’ colors in those to be overridden, and for
attributes to be merged between the layers.


File: mutt.info,  Node: crypt_autoencrypt,  Next: crypt_autopgp,  Prev: cursor_overlay,  Up: Configuration Variables

9.3.56 crypt_autoencrypt
------------------------

     Type: boolean
     Default: no

   Setting this variable will cause Mutt to always attempt to PGP
encrypt outgoing messages.  This is probably only useful in connection
to the ‘send-hook (*note Change Settings Based Upon Message
Recipients::)’ command.  It can be overridden by use of the pgp menu,
when encryption is not required or signing is requested as well.  If
$smime_is_default (*note smime_is_default::) is _set_, then OpenSSL is
used instead to create S/MIME messages and settings can be overridden by
use of the smime menu instead.  (Crypto only)


File: mutt.info,  Node: crypt_autopgp,  Next: crypt_autosign,  Prev: crypt_autoencrypt,  Up: Configuration Variables

9.3.57 crypt_autopgp
--------------------

     Type: boolean
     Default: yes

   This variable controls whether or not mutt may automatically enable
PGP encryption/signing for messages.  See also $crypt_autoencrypt (*note
crypt_autoencrypt::), $crypt_replyencrypt (*note crypt_replyencrypt::),
$crypt_autosign (*note crypt_autosign::), $crypt_replysign (*note
crypt_replysign::) and $smime_is_default (*note smime_is_default::).


File: mutt.info,  Node: crypt_autosign,  Next: crypt_autosmime,  Prev: crypt_autopgp,  Up: Configuration Variables

9.3.58 crypt_autosign
---------------------

     Type: boolean
     Default: no

   Setting this variable will cause Mutt to always attempt to
cryptographically sign outgoing messages.  This can be overridden by use
of the pgp menu, when signing is not required or encryption is requested
as well.  If $smime_is_default (*note smime_is_default::) is _set_, then
OpenSSL is used instead to create S/MIME messages and settings can be
overridden by use of the smime menu instead of the pgp menu.  (Crypto
only)


File: mutt.info,  Node: crypt_autosmime,  Next: crypt_confirmhook,  Prev: crypt_autosign,  Up: Configuration Variables

9.3.59 crypt_autosmime
----------------------

     Type: boolean
     Default: yes

   This variable controls whether or not mutt may automatically enable
S/MIME encryption/signing for messages.  See also $crypt_autoencrypt
(*note crypt_autoencrypt::), $crypt_replyencrypt (*note
crypt_replyencrypt::), $crypt_autosign (*note crypt_autosign::),
$crypt_replysign (*note crypt_replysign::) and $smime_is_default (*note
smime_is_default::).


File: mutt.info,  Node: crypt_confirmhook,  Next: crypt_opportunistic_encrypt,  Prev: crypt_autosmime,  Up: Configuration Variables

9.3.60 crypt_confirmhook
------------------------

     Type: boolean
     Default: yes

   If set, then you will be prompted for confirmation of keys when using
the _crypt-hook_ command.  If unset, no such confirmation prompt will be
presented.  This is generally considered unsafe, especially where typos
are concerned.


File: mutt.info,  Node: crypt_opportunistic_encrypt,  Next: crypt_opportunistic_encrypt_strong_keys,  Prev: crypt_confirmhook,  Up: Configuration Variables

9.3.61 crypt_opportunistic_encrypt
----------------------------------

     Type: boolean
     Default: no

   Setting this variable will cause Mutt to automatically enable and
disable encryption, based on whether all message recipient keys can be
located by Mutt.

   When this option is enabled, Mutt will enable/disable encryption each
time the TO, CC, and BCC lists are edited.  If $edit_headers (*note
edit_headers::) is set, Mutt will also do so each time the message is
edited.

   While this is set, encryption can’t be manually enabled/disabled.
The pgp or smime menus provide a selection to temporarily disable this
option for the current message.

   If $crypt_autoencrypt (*note crypt_autoencrypt::) or
$crypt_replyencrypt (*note crypt_replyencrypt::) enable encryption for a
message, this option will be disabled for that message.  It can be
manually re-enabled in the pgp or smime menus.  (Crypto only)


File: mutt.info,  Node: crypt_opportunistic_encrypt_strong_keys,  Next: crypt_protected_headers_read,  Prev: crypt_opportunistic_encrypt,  Up: Configuration Variables

9.3.62 crypt_opportunistic_encrypt_strong_keys
----------------------------------------------

     Type: boolean
     Default: no

   When set, this modifies the behavior of $crypt_opportunistic_encrypt
(*note crypt_opportunistic_encrypt::) to only search for "strong keys",
that is, keys with full validity according to the web-of-trust
algorithm.  A key with marginal or no validity will not enable
opportunistic encryption.

   For S/MIME, the behavior depends on the backend.  Classic S/MIME will
filter for certificates with the ’t’ (trusted) flag in the .index file.
The GPGME backend will use the same filters as with OpenPGP, and depends
on GPGME’s logic for assigning the GPGME_VALIDITY_FULL and
GPGME_VALIDITY_ULTIMATE validity flag.


File: mutt.info,  Node: crypt_protected_headers_read,  Next: crypt_protected_headers_save,  Prev: crypt_opportunistic_encrypt_strong_keys,  Up: Configuration Variables

9.3.63 crypt_protected_headers_read
-----------------------------------

     Type: boolean
     Default: yes

   When set, Mutt will display protected headers in the pager, and will
update the index and header cache with revised headers.  Protected
headers are stored inside the encrypted or signed part of an an email,
to prevent disclosure or tampering.  For more information see
https://github.com/autocrypt/protected-headers.  Currently Mutt only
supports the Subject header.

   Encrypted messages using protected headers often substitute the
exposed Subject header with a dummy value (see
$crypt_protected_headers_subject (*note
crypt_protected_headers_subject::)).  Mutt will update its concept of
the correct subject *after* the message is opened, i.e.  via the
‘<display-message>’ function.  If you reply to a message before opening
it, Mutt will end up using the dummy Subject header, so be sure to open
such a message first.  (Crypto only)


File: mutt.info,  Node: crypt_protected_headers_save,  Next: crypt_protected_headers_subject,  Prev: crypt_protected_headers_read,  Up: Configuration Variables

9.3.64 crypt_protected_headers_save
-----------------------------------

     Type: boolean
     Default: no

   When $crypt_protected_headers_read (*note
crypt_protected_headers_read::) is set, and a message with a protected
Subject is opened, Mutt will save the updated Subject into the header
cache by default.  This allows searching/limiting based on the protected
Subject header if the mailbox is re-opened, without having to re-open
the message each time.  However, for mbox/mh mailbox types, or if header
caching is not set up, you would need to re-open the message each time
the mailbox was reopened before you could see or search/limit on the
protected subject again.

   When this variable is set, Mutt additionally saves the protected
Subject back *in the clear-text message headers*.  This provides better
usability, but with the tradeoff of reduced security.  The protected
Subject header, which may have previously been encrypted, is now stored
in clear-text in the message headers.  Copying the message elsewhere,
via Mutt or external tools, could expose this previously encrypted data.
Please make sure you understand the consequences of this before you
enable this variable.  (Crypto only)


File: mutt.info,  Node: crypt_protected_headers_subject,  Next: crypt_protected_headers_write,  Prev: crypt_protected_headers_save,  Up: Configuration Variables

9.3.65 crypt_protected_headers_subject
--------------------------------------

     Type: string
     Default: ‘...’

   When $crypt_protected_headers_write (*note
crypt_protected_headers_write::) is set, and the message is marked for
encryption, this will be substituted into the Subject field in the
message headers.  To prevent a subject from being substituted, unset
this variable, or set it to the empty string.  (Crypto only)


File: mutt.info,  Node: crypt_protected_headers_write,  Next: crypt_replyencrypt,  Prev: crypt_protected_headers_subject,  Up: Configuration Variables

9.3.66 crypt_protected_headers_write
------------------------------------

     Type: boolean
     Default: no

   When set, Mutt will generate protected headers for signed and
encrypted emails.  Protected headers are stored inside the encrypted or
signed part of an an email, to prevent disclosure or tampering.  For
more information see https://github.com/autocrypt/protected-headers.
Currently Mutt only supports the Subject header.  (Crypto only)


File: mutt.info,  Node: crypt_replyencrypt,  Next: crypt_replysign,  Prev: crypt_protected_headers_write,  Up: Configuration Variables

9.3.67 crypt_replyencrypt
-------------------------

     Type: boolean
     Default: yes

   If _set_, automatically PGP or OpenSSL encrypt replies to messages
which are encrypted.  (Crypto only)


File: mutt.info,  Node: crypt_replysign,  Next: crypt_replysignencrypted,  Prev: crypt_replyencrypt,  Up: Configuration Variables

9.3.68 crypt_replysign
----------------------

     Type: boolean
     Default: no

   If _set_, automatically PGP or OpenSSL sign replies to messages which
are signed.

   *Note:* this does not work on messages that are encrypted _and_
signed!  (Crypto only)


File: mutt.info,  Node: crypt_replysignencrypted,  Next: crypt_timestamp,  Prev: crypt_replysign,  Up: Configuration Variables

9.3.69 crypt_replysignencrypted
-------------------------------

     Type: boolean
     Default: no

   If _set_, automatically PGP or OpenSSL sign replies to messages which
are encrypted.  This makes sense in combination with $crypt_replyencrypt
(*note crypt_replyencrypt::), because it allows you to sign all messages
which are automatically encrypted.  This works around the problem noted
in $crypt_replysign (*note crypt_replysign::), that mutt is not able to
find out whether an encrypted message is also signed.  (Crypto only)


File: mutt.info,  Node: crypt_timestamp,  Next: crypt_use_gpgme,  Prev: crypt_replysignencrypted,  Up: Configuration Variables

9.3.70 crypt_timestamp
----------------------

     Type: boolean
     Default: yes

   If _set_, mutt will include a time stamp in the lines surrounding PGP
or S/MIME output, so spoofing such lines is more difficult.  If you are
using colors to mark these lines, and rely on these, you may _unset_
this setting.  (Crypto only)


File: mutt.info,  Node: crypt_use_gpgme,  Next: crypt_use_pka,  Prev: crypt_timestamp,  Up: Configuration Variables

9.3.71 crypt_use_gpgme
----------------------

     Type: boolean
     Default: no

   This variable controls the use of the GPGME-enabled crypto backends.
If it is _set_ and Mutt was built with gpgme support, the gpgme code for
S/MIME and PGP will be used instead of the classic code.  Note that you
need to set this option in .muttrc; it won’t have any effect when used
interactively.

   Note that the GPGME backend does not support creating old-style
inline (traditional) PGP encrypted or signed messages (see
$pgp_autoinline (*note pgp_autoinline::)).


File: mutt.info,  Node: crypt_use_pka,  Next: crypt_verify_sig,  Prev: crypt_use_gpgme,  Up: Configuration Variables

9.3.72 crypt_use_pka
--------------------

     Type: boolean
     Default: no

   Controls whether mutt uses PKA (see
http://www.g10code.de/docs/pka-intro.de.pdf) during signature
verification (only supported by the GPGME backend).


File: mutt.info,  Node: crypt_verify_sig,  Next: date_format,  Prev: crypt_use_pka,  Up: Configuration Variables

9.3.73 crypt_verify_sig
-----------------------

     Type: quadoption
     Default: yes

   If _‘yes’_, always attempt to verify PGP or S/MIME signatures.  If
_‘ask-*’_, ask whether or not to verify the signature.  If _‘no’_, never
attempt to verify cryptographic signatures.  (Crypto only)


File: mutt.info,  Node: date_format,  Next: default_hook,  Prev: crypt_verify_sig,  Up: Configuration Variables

9.3.74 date_format
------------------

     Type: string
     Default: ‘!%a, %b %d, %Y at %I:%M:%S%p %Z’

   This variable controls the format of the date printed by the ‘%d’
sequence in $index_format (*note index_format::).  This is passed to the
‘strftime(3)’ function to process the date, see the man page for the
proper syntax.

   Unless the first character in the string is a bang (‘!’), the month
and week day names are expanded according to the locale.  If the first
character in the string is a bang, the bang is discarded, and the month
and week day names in the rest of the string are expanded in the _C_
locale (that is in US English).


File: mutt.info,  Node: default_hook,  Next: delete,  Prev: date_format,  Up: Configuration Variables

9.3.75 default_hook
-------------------

     Type: string
     Default: ‘~f %s !~P | (~P ~C %s)’

   This variable controls how ‘message-hook (*note Change Settings
Before Formatting a Message::)’, ‘reply-hook (*note reply-hook::)’,
‘send-hook (*note Change Settings Based Upon Message Recipients::)’,
‘send2-hook (*note send2-hook::)’, ‘save-hook (*note Specify Default
Save Mailbox::)’, and ‘fcc-hook (*note Specify Default Fcc; Mailbox When
Composing::)’ will be interpreted if they are specified with only a
simple regexp, instead of a matching pattern.  The hooks are expanded
when they are declared, so a hook will be interpreted according to the
value of this variable at the time the hook is declared.

   The default value matches if the message is either from a user
matching the regular expression given, or if it is from you (if the from
address matches ‘alternates (*note Alternative Addresses::)’) and is to
or cc’ed to a user matching the given regular expression.


File: mutt.info,  Node: delete,  Next: delete_untag,  Prev: default_hook,  Up: Configuration Variables

9.3.76 delete
-------------

     Type: quadoption
     Default: ask-yes

   Controls whether or not messages are really deleted when closing or
synchronizing a mailbox.  If set to _yes_, messages marked for deleting
will automatically be purged without prompting.  If set to _no_,
messages marked for deletion will be kept in the mailbox.

   This option is ignored for maildir-style mailboxes when
$maildir_trash (*note maildir_trash::) is set.


File: mutt.info,  Node: delete_untag,  Next: digest_collapse,  Prev: delete,  Up: Configuration Variables

9.3.77 delete_untag
-------------------

     Type: boolean
     Default: yes

   If this option is _set_, mutt will untag messages when marking them
for deletion.  This applies when you either explicitly delete a message,
or when you save it to another folder.


File: mutt.info,  Node: digest_collapse,  Next: display_filter,  Prev: delete_untag,  Up: Configuration Variables

9.3.78 digest_collapse
----------------------

     Type: boolean
     Default: yes

   If this option is _set_, mutt’s received-attachments menu will not
show the subparts of individual messages in a multipart/digest.  To see
these subparts, press ‘v’ on that menu.


File: mutt.info,  Node: display_filter,  Next: dotlock_program,  Prev: digest_collapse,  Up: Configuration Variables

9.3.79 display_filter
---------------------

     Type: path
     Default: (empty)

   When set, specifies a command used to filter messages.  When a
message is viewed it is passed as standard input to $display_filter
(*note display_filter::), and the filtered message is read from the
standard output.


File: mutt.info,  Node: dotlock_program,  Next: dsn_notify,  Prev: display_filter,  Up: Configuration Variables

9.3.80 dotlock_program
----------------------

     Type: path
     Default: ‘/usr/local/bin/mutt_dotlock’

   Contains the path of the ‘mutt_dotlock(1)’ binary to be used by mutt.


File: mutt.info,  Node: dsn_notify,  Next: dsn_return,  Prev: dotlock_program,  Up: Configuration Variables

9.3.81 dsn_notify
-----------------

     Type: string
     Default: (empty)

   This variable sets the request for when notification is returned.
The string consists of a comma separated list (no spaces!)  of one or
more of the following: _never_, to never request notification,
_failure_, to request notification on transmission failure, _delay_, to
be notified of message delays, _success_, to be notified of successful
transmission.

   Example:


     set dsn_notify="failure,delay"

   *Note:* when using $sendmail (*note sendmail::) for delivery, you
should not enable this unless you are either using Sendmail 8.8.x or
greater or a MTA providing a ‘sendmail(1)’-compatible interface
supporting the ‘-N’ option for DSN. For SMTP delivery, DSN support is
auto-detected so that it depends on the server whether DSN will be used
or not.


File: mutt.info,  Node: dsn_return,  Next: duplicate_threads,  Prev: dsn_notify,  Up: Configuration Variables

9.3.82 dsn_return
-----------------

     Type: string
     Default: (empty)

   This variable controls how much of your message is returned in DSN
messages.  It may be set to either _hdrs_ to return just the message
header, or _full_ to return the full message.

   Example:


     set dsn_return=hdrs

   *Note:* when using $sendmail (*note sendmail::) for delivery, you
should not enable this unless you are either using Sendmail 8.8.x or
greater or a MTA providing a ‘sendmail(1)’-compatible interface
supporting the ‘-R’ option for DSN. For SMTP delivery, DSN support is
auto-detected so that it depends on the server whether DSN will be used
or not.


File: mutt.info,  Node: duplicate_threads,  Next: edit_headers,  Prev: dsn_return,  Up: Configuration Variables

9.3.83 duplicate_threads
------------------------

     Type: boolean
     Default: yes

   This variable controls whether mutt, when $sort (*note sort::) is set
to _threads_, threads messages with the same Message-Id together.  If it
is _set_, it will indicate that it thinks they are duplicates of each
other with an equals sign in the thread tree.


File: mutt.info,  Node: edit_headers,  Next: editor,  Prev: duplicate_threads,  Up: Configuration Variables

9.3.84 edit_headers
-------------------

     Type: boolean
     Default: no

   This option allows you to edit the header of your outgoing messages
along with the body of your message.

   Although the compose menu may have localized header labels, the
labels passed to your editor will be standard RFC 2822 headers, (e.g.
To:, Cc:, Subject:).  Headers added in your editor must also be RFC 2822
headers, or one of the pseudo headers listed in ‘edit-header (*note
Editing the Message Header::)’.  Mutt will not understand localized
header labels, just as it would not when parsing an actual email.

   *Note* that changes made to the References: and Date: headers are
ignored for interoperability reasons.


File: mutt.info,  Node: editor,  Next: encode_from,  Prev: edit_headers,  Up: Configuration Variables

9.3.85 editor
-------------

     Type: path
     Default: (empty)

   This variable specifies which editor is used by mutt.  It defaults to
the value of the ‘$VISUAL’, or ‘$EDITOR’, environment variable, or to
the string ‘vi’ if neither of those are set.

   The ‘$editor (*note editor::)’ string may contain a _%s_ escape,
which will be replaced by the name of the file to be edited.  If the
_%s_ escape does not appear in ‘$editor (*note editor::)’, a space and
the name to be edited are appended.

   The resulting string is then executed by running


     sh -c 'string'

   where _string_ is the expansion of ‘$editor (*note editor::)’
described above.


File: mutt.info,  Node: encode_from,  Next: entropy_file,  Prev: editor,  Up: Configuration Variables

9.3.86 encode_from
------------------

     Type: boolean
     Default: no

   When _set_, mutt will quoted-printable encode messages when they
contain the string ‘From ’ (note the trailing space) in the beginning of
a line.  This is useful to avoid the tampering certain mail delivery and
transport agents tend to do with messages (in order to prevent tools
from misinterpreting the line as a mbox message separator).


File: mutt.info,  Node: entropy_file,  Next: envelope_from_address,  Prev: encode_from,  Up: Configuration Variables

9.3.87 entropy_file
-------------------

     Type: path
     Default: (empty)

   The file which includes random data that is used to initialize SSL
library functions.  (OpenSSL only)


File: mutt.info,  Node: envelope_from_address,  Next: error_history,  Prev: entropy_file,  Up: Configuration Variables

9.3.88 envelope_from_address
----------------------------

     Type: e-mail address
     Default: (empty)

   Manually sets the _envelope_ sender for outgoing messages.  This
value is ignored if $use_envelope_from (*note use_envelope_from::) is
_unset_.


File: mutt.info,  Node: error_history,  Next: escape,  Prev: envelope_from_address,  Up: Configuration Variables

9.3.89 error_history
--------------------

     Type: number
     Default: 30

   This variable controls the size (in number of strings remembered) of
the error messages displayed by mutt.  These can be shown with the
‘<error-history>’ function.  The history is cleared each time this
variable is set.


File: mutt.info,  Node: escape,  Next: fast_reply,  Prev: error_history,  Up: Configuration Variables

9.3.90 escape
-------------

     Type: string
     Default: ‘~’

   Escape character to use for functions in the built-in editor.


File: mutt.info,  Node: fast_reply,  Next: fcc_attach,  Prev: escape,  Up: Configuration Variables

9.3.91 fast_reply
-----------------

     Type: boolean
     Default: no

   When _set_, the initial prompt for recipients and subject are skipped
when replying to messages, and the initial prompt for subject is skipped
when forwarding messages.

   *Note:* this variable has no effect when the $autoedit (*note
autoedit::) variable is _set_.


File: mutt.info,  Node: fcc_attach,  Next: fcc_before_send,  Prev: fast_reply,  Up: Configuration Variables

9.3.92 fcc_attach
-----------------

     Type: quadoption
     Default: yes

   This variable controls whether or not attachments on outgoing
messages are saved along with the main body of your message.

   Note: $fcc_before_send (*note fcc_before_send::) forces the default
(set) behavior of this option.


File: mutt.info,  Node: fcc_before_send,  Next: fcc_clear,  Prev: fcc_attach,  Up: Configuration Variables

9.3.93 fcc_before_send
----------------------

     Type: boolean
     Default: no

   When this variable is _set_, FCCs will occur before sending the
message.  Before sending, the message cannot be manipulated, so it will
be stored the exact same as sent: $fcc_attach (*note fcc_attach::) and
$fcc_clear (*note fcc_clear::) will be ignored (using their default
values).

   When _unset_, the default, FCCs will occur after sending.  Variables
$fcc_attach (*note fcc_attach::) and $fcc_clear (*note fcc_clear::) will
be respected, allowing it to be stored without attachments or
encryption/signing if desired.


File: mutt.info,  Node: fcc_clear,  Next: fcc_delimiter,  Prev: fcc_before_send,  Up: Configuration Variables

9.3.94 fcc_clear
----------------

     Type: boolean
     Default: no

   When this variable is _set_, FCCs will be stored unencrypted and
unsigned, even when the actual message is encrypted and/or signed.

   Note: $fcc_before_send (*note fcc_before_send::) forces the default
(unset) behavior of this option.  (PGP only)

   See also $pgp_self_encrypt (*note pgp_self_encrypt::),
$smime_self_encrypt (*note smime_self_encrypt::).


File: mutt.info,  Node: fcc_delimiter,  Next: flag_safe,  Prev: fcc_clear,  Up: Configuration Variables

9.3.95 fcc_delimiter
--------------------

     Type: string
     Default: (empty)

   When specified, this allows the ability to Fcc to more than one
mailbox.  The fcc value will be split by this delimiter and Mutt will
evaluate each part as a mailbox separately.

   See $record (*note record::), ‘fcc-hook (*note Specify Default Fcc;
Mailbox When Composing::)’, and ‘fcc-save-hook (*note Specify Default
Save Filename and Default Fcc; Mailbox at Once::)’.


File: mutt.info,  Node: flag_safe,  Next: folder,  Prev: fcc_delimiter,  Up: Configuration Variables

9.3.96 flag_safe
----------------

     Type: boolean
     Default: no

   If set, flagged messages cannot be deleted.


File: mutt.info,  Node: folder,  Next: folder_format,  Prev: flag_safe,  Up: Configuration Variables

9.3.97 folder
-------------

     Type: path
     Default: ‘~/Mail’

   Specifies the default location of your mailboxes.  A ‘+’ or ‘=’ at
the beginning of a pathname will be expanded to the value of this
variable.  Note that if you change this variable (from the default)
value you need to make sure that the assignment occurs _before_ you use
‘+’ or ‘=’ for any other variables since expansion takes place when
handling the ‘mailboxes (*note Monitoring Incoming Mail::)’ command.


File: mutt.info,  Node: folder_format,  Next: followup_to,  Prev: folder,  Up: Configuration Variables

9.3.98 folder_format
--------------------

     Type: string
     Default: ‘%2C %t %N %F %2l %-8.8u %-8.8g %8s %d %f’

   This variable allows you to customize the file browser display to
your personal taste.  This string is similar to $index_format (*note
index_format::), but has its own set of ‘printf(3)’-like sequences:

%C                                   current file number
%d                                   date/time folder was last modified
%D                                   date/time folder was last modified
                                     using $date_format
                                     (*note date_format::).
%f                                   filename (‘/’ is appended to
                                     directory names, ‘@’ to symbolic
                                     links and ‘*’ to executable files)
%F                                   file permissions
%g                                   group name (or numeric gid, if
                                     missing)
%l                                   number of hard links
%m                                   number of messages in the mailbox
                                     *
%n                                   number of unread messages in the
                                     mailbox *
%N                                   N if mailbox has new mail, blank
                                     otherwise
%s                                   size in bytes (see
                                     formatstrings-size
                                     (*note Bytes size display::))
%t                                   ‘*’ if the file is tagged, blank
                                     otherwise
%u                                   owner name (or numeric uid, if
                                     missing)
%>X                                  right justify the rest of the
                                     string and pad with character ‘X’
%|X                                  pad to the end of the line with
                                     character ‘X’
%*X                                  soft-fill with character ‘X’ as
                                     pad

   For an explanation of ‘soft-fill’, see the $index_format (*note
index_format::) documentation.

   * = can be optionally printed if nonzero

   %m, %n, and %N only work for monitored mailboxes.  %m requires
$mail_check_stats (*note mail_check_stats::) to be set.  %n requires
$mail_check_stats (*note mail_check_stats::) to be set (except for IMAP
mailboxes).


File: mutt.info,  Node: followup_to,  Next: force_name,  Prev: folder_format,  Up: Configuration Variables

9.3.99 followup_to
------------------

     Type: boolean
     Default: yes

   Controls whether or not the ‘Mail-Followup-To:’ header field is
generated when sending mail.  When _set_, Mutt will generate this field
when you are replying to a known mailing list, specified with the
‘subscribe (*note subscribe::)’ or ‘lists (*note Mailing Lists <1>::)’
commands.

   This field has two purposes.  First, preventing you from receiving
duplicate copies of replies to messages which you send to mailing lists,
and second, ensuring that you do get a reply separately for any messages
sent to known lists to which you are not subscribed.

   The header will contain only the list’s address for subscribed lists,
and both the list address and your own email address for unsubscribed
lists.  Without this header, a group reply to your message sent to a
subscribed list will be sent to both the list and your address,
resulting in two copies of the same email for you.


File: mutt.info,  Node: force_name,  Next: forward_attachments,  Prev: followup_to,  Up: Configuration Variables

9.3.100 force_name
------------------

     Type: boolean
     Default: no

   This variable is similar to $save_name (*note save_name::), except
that Mutt will store a copy of your outgoing message by the username of
the address you are sending to even if that mailbox does not exist.

   Also see the $record (*note record::) variable.


File: mutt.info,  Node: forward_attachments,  Next: forward_attribution_intro,  Prev: force_name,  Up: Configuration Variables

9.3.101 forward_attachments
---------------------------

     Type: quadoption
     Default: ask-yes

   When forwarding inline (i.e.  $mime_forward (*note mime_forward::)
_unset_ or answered with ‘no’ and $forward_decode (*note
forward_decode::) _set_), attachments which cannot be decoded in a
reasonable manner will be attached to the newly composed message if this
quadoption is _set_ or answered with ‘yes’.


File: mutt.info,  Node: forward_attribution_intro,  Next: forward_attribution_trailer,  Prev: forward_attachments,  Up: Configuration Variables

9.3.102 forward_attribution_intro
---------------------------------

     Type: string (localized)
     Default: ‘—– Forwarded message from %f —–’

   This is the string that will precede a message which has been
forwarded in the main body of a message (when $mime_forward (*note
mime_forward::) is unset).  For a full listing of defined
‘printf(3)’-like sequences see the section on $index_format (*note
index_format::).  See also $attribution_locale (*note
attribution_locale::).


File: mutt.info,  Node: forward_attribution_trailer,  Next: forward_decode,  Prev: forward_attribution_intro,  Up: Configuration Variables

9.3.103 forward_attribution_trailer
-----------------------------------

     Type: string (localized)
     Default: ‘—– End forwarded message —–’

   This is the string that will follow a message which has been
forwarded in the main body of a message (when $mime_forward (*note
mime_forward::) is unset).  For a full listing of defined
‘printf(3)’-like sequences see the section on $index_format (*note
index_format::).  See also $attribution_locale (*note
attribution_locale::).


File: mutt.info,  Node: forward_decode,  Next: forward_decrypt,  Prev: forward_attribution_trailer,  Up: Configuration Variables

9.3.104 forward_decode
----------------------

     Type: boolean
     Default: yes

   Controls the decoding of complex MIME messages into ‘text/plain’ when
forwarding a message.  The message header is also RFC2047 decoded.  This
variable is only used, if $mime_forward (*note mime_forward::) is
_unset_, otherwise $mime_forward_decode (*note mime_forward_decode::) is
used instead.


File: mutt.info,  Node: forward_decrypt,  Next: forward_edit,  Prev: forward_decode,  Up: Configuration Variables

9.3.105 forward_decrypt
-----------------------

     Type: quadoption
     Default: yes

   This quadoption controls the handling of encrypted messages when
forwarding or attaching a message.  When set to or answered ‘yes’, the
outer layer of encryption is stripped off.

   This variable is used if $mime_forward (*note mime_forward::) is
_set_ and $mime_forward_decode (*note mime_forward_decode::) is _unset_.
It is also used when attaching a message via ‘<attach-message>’ in the
compose menu.  (PGP only)


File: mutt.info,  Node: forward_edit,  Next: forward_format,  Prev: forward_decrypt,  Up: Configuration Variables

9.3.106 forward_edit
--------------------

     Type: quadoption
     Default: yes

   This quadoption controls whether or not the user is automatically
placed in the editor when forwarding messages.  For those who always
want to forward with no modification, use a setting of ‘no’.


File: mutt.info,  Node: forward_format,  Next: forward_quote,  Prev: forward_edit,  Up: Configuration Variables

9.3.107 forward_format
----------------------

     Type: string
     Default: ‘[%a: %s]’

   This variable controls the default subject when forwarding a message.
It uses the same format sequences as the $index_format (*note
index_format::) variable.


File: mutt.info,  Node: forward_quote,  Next: from,  Prev: forward_format,  Up: Configuration Variables

9.3.108 forward_quote
---------------------

     Type: boolean
     Default: no

   When _set_, forwarded messages included in the main body of the
message (when $mime_forward (*note mime_forward::) is _unset_) will be
quoted using $indent_string (*note indent_string::).


File: mutt.info,  Node: from,  Next: gecos_mask,  Prev: forward_quote,  Up: Configuration Variables

9.3.109 from
------------

     Type: e-mail address
     Default: (empty)

   When _set_, this variable contains a default from address.  It can be
overridden using ‘my_hdr (*note User-Defined Headers::)’ (including from
a ‘send-hook (*note Change Settings Based Upon Message Recipients::)’)
and $reverse_name (*note reverse_name::).  This variable is ignored if
$use_from (*note use_from::) is _unset_.

   This setting defaults to the contents of the environment variable
‘$EMAIL’.


File: mutt.info,  Node: gecos_mask,  Next: hdrs,  Prev: from,  Up: Configuration Variables

9.3.110 gecos_mask
------------------

     Type: regular expression
     Default: ‘^[^,]*’

   A regular expression used by mutt to parse the GECOS field of a
password entry when expanding the alias.  The default value will return
the string up to the first ‘,’ encountered.  If the GECOS field contains
a string like ‘lastname, firstname’ then you should set it to ‘‘.*’’.

   This can be useful if you see the following behavior: you address an
e-mail to user ID ‘stevef’ whose full name is ‘Steve Franklin’.  If mutt
expands ‘stevef’ to ‘"Franklin" stevef@foo.bar’ then you should set the
$gecos_mask (*note gecos_mask::) to a regular expression that will match
the whole name so mutt will expand ‘Franklin’ to ‘Franklin, Steve’.


File: mutt.info,  Node: hdrs,  Next: header,  Prev: gecos_mask,  Up: Configuration Variables

9.3.111 hdrs
------------

     Type: boolean
     Default: yes

   When _unset_, the header fields normally added by the ‘my_hdr (*note
User-Defined Headers::)’ command are not created.  This variable _must_
be unset before composing a new message or replying in order to take
effect.  If _set_, the user defined header fields are added to every new
message.


File: mutt.info,  Node: header,  Next: header_cache,  Prev: hdrs,  Up: Configuration Variables

9.3.112 header
--------------

     Type: boolean
     Default: no

   When _set_, this variable causes Mutt to include the header of the
message you are replying to into the edit buffer.  The $weed (*note
weed::) setting applies.


File: mutt.info,  Node: header_cache,  Next: header_cache_compress,  Prev: header,  Up: Configuration Variables

9.3.113 header_cache
--------------------

     Type: path
     Default: (empty)

   This variable points to the header cache database.  If pointing to a
directory Mutt will contain a header cache database file per folder, if
pointing to a file that file will be a single global header cache.  By
default it is _unset_ so no header caching will be used.  If pointing to
a directory, it must be created in advance.

   Header caching can greatly improve speed when opening POP, IMAP MH or
Maildir folders, see ‘caching (*note Local Caching::)’ for details.


File: mutt.info,  Node: header_cache_compress,  Next: header_cache_pagesize,  Prev: header_cache,  Up: Configuration Variables

9.3.114 header_cache_compress
-----------------------------

     Type: boolean
     Default: yes

   When mutt is compiled with qdbm, tokyocabinet, or kyotocabinet as
header cache backend, this option determines whether the database will
be compressed.  Compression results in database files roughly being one
fifth of the usual diskspace, but the decompression can result in a
slower opening of cached folder(s) which in general is still much faster
than opening non header cached folders.


File: mutt.info,  Node: header_cache_pagesize,  Next: header_color_partial,  Prev: header_cache_compress,  Up: Configuration Variables

9.3.115 header_cache_pagesize
-----------------------------

     Type: number (long)
     Default: 16384

   When mutt is compiled with either gdbm or bdb4 as the header cache
backend, this option changes the database page size.  Too large or too
small values can waste space, memory, or CPU time.  The default should
be more or less optimal for most use cases.


File: mutt.info,  Node: header_color_partial,  Next: help,  Prev: header_cache_pagesize,  Up: Configuration Variables

9.3.116 header_color_partial
----------------------------

     Type: boolean
     Default: no

   When _set_, color header regexps behave like color body regexps:
color is applied to the exact text matched by the regexp.  When _unset_,
color is applied to the entire header.

   One use of this option might be to apply color to just the header
labels.

   See ‘color (*note Using Color and Mono Video Attributes::)’ for more
details.


File: mutt.info,  Node: help,  Next: hidden_host,  Prev: header_color_partial,  Up: Configuration Variables

9.3.117 help
------------

     Type: boolean
     Default: yes

   When _set_, help lines describing the bindings for the major
functions provided by each menu are displayed on the first line of the
screen.

   *Note:* The binding will not be displayed correctly if the function
is bound to a sequence rather than a single keystroke.  Also, the help
line may not be updated if a binding is changed while Mutt is running.
Since this variable is primarily aimed at new users, neither of these
should present a major problem.


File: mutt.info,  Node: hidden_host,  Next: hide_limited,  Prev: help,  Up: Configuration Variables

9.3.118 hidden_host
-------------------

     Type: boolean
     Default: no

   When _set_, mutt will skip the host name part of $hostname (*note
hostname::) variable when adding the domain part to addresses.  This
variable does not affect the generation of Message-IDs, and it will not
lead to the cut-off of first-level domains.


File: mutt.info,  Node: hide_limited,  Next: hide_missing,  Prev: hidden_host,  Up: Configuration Variables

9.3.119 hide_limited
--------------------

     Type: boolean
     Default: no

   When _set_, mutt will not show the presence of messages that are
hidden by limiting, in the thread tree.


File: mutt.info,  Node: hide_missing,  Next: hide_thread_subject,  Prev: hide_limited,  Up: Configuration Variables

9.3.120 hide_missing
--------------------

     Type: boolean
     Default: yes

   When _set_, mutt will not show the presence of missing messages in
the thread tree.


File: mutt.info,  Node: hide_thread_subject,  Next: hide_top_limited,  Prev: hide_missing,  Up: Configuration Variables

9.3.121 hide_thread_subject
---------------------------

     Type: boolean
     Default: yes

   When _set_, mutt will not show the subject of messages in the thread
tree that have the same subject as their parent or closest previously
displayed sibling.


File: mutt.info,  Node: hide_top_limited,  Next: hide_top_missing,  Prev: hide_thread_subject,  Up: Configuration Variables

9.3.122 hide_top_limited
------------------------

     Type: boolean
     Default: no

   When _set_, mutt will not show the presence of messages that are
hidden by limiting, at the top of threads in the thread tree.  Note that
when $hide_limited (*note hide_limited::) is _set_, this option will
have no effect.


File: mutt.info,  Node: hide_top_missing,  Next: history,  Prev: hide_top_limited,  Up: Configuration Variables

9.3.123 hide_top_missing
------------------------

     Type: boolean
     Default: yes

   When _set_, mutt will not show the presence of missing messages at
the top of threads in the thread tree.  Note that when $hide_missing
(*note hide_missing::) is _set_, this option will have no effect.


File: mutt.info,  Node: history,  Next: history_file,  Prev: hide_top_missing,  Up: Configuration Variables

9.3.124 history
---------------

     Type: number
     Default: 10

   This variable controls the size (in number of strings remembered) of
the string history buffer per category.  The buffer is cleared each time
the variable is set.


File: mutt.info,  Node: history_file,  Next: history_remove_dups,  Prev: history,  Up: Configuration Variables

9.3.125 history_file
--------------------

     Type: path
     Default: ‘~/.mutthistory’

   The file in which Mutt will save its history.

   Also see $save_history (*note save_history::).


File: mutt.info,  Node: history_remove_dups,  Next: honor_disposition,  Prev: history_file,  Up: Configuration Variables

9.3.126 history_remove_dups
---------------------------

     Type: boolean
     Default: no

   When _set_, all of the string history will be scanned for duplicates
when a new entry is added.  Duplicate entries in the $history_file
(*note history_file::) will also be removed when it is periodically
compacted.


File: mutt.info,  Node: honor_disposition,  Next: honor_followup_to,  Prev: history_remove_dups,  Up: Configuration Variables

9.3.127 honor_disposition
-------------------------

     Type: boolean
     Default: no

   When _set_, Mutt will not display attachments with a disposition of
‘attachment’ inline even if it could render the part to plain text.
These MIME parts can only be viewed from the attachment menu.

   If _unset_, Mutt will render all MIME parts it can properly transform
to plain text.


File: mutt.info,  Node: honor_followup_to,  Next: hostname,  Prev: honor_disposition,  Up: Configuration Variables

9.3.128 honor_followup_to
-------------------------

     Type: quadoption
     Default: yes

   This variable controls whether or not a Mail-Followup-To header is
honored when group-replying to a message.


File: mutt.info,  Node: hostname,  Next: idn_decode,  Prev: honor_followup_to,  Up: Configuration Variables

9.3.129 hostname
----------------

     Type: string
     Default: (empty)

   Specifies the fully-qualified hostname of the system mutt is running
on containing the host’s name and the DNS domain it belongs to.  It is
used as the domain part (after ‘@’) for local email addresses as well as
Message-Id headers.

   Its value is determined at startup as follows: the node’s hostname is
first determined by the ‘uname(3)’ function.  The domain is then looked
up using the ‘gethostname(2)’ and ‘getaddrinfo(3)’ functions.  If those
calls are unable to determine the domain, the full value returned by
uname is used.  Optionally, Mutt can be compiled with a fixed domain
name in which case a detected one is not used.

   Starting in Mutt 2.0, the operations described in the previous
paragraph are performed after the muttrc is processed, instead of
beforehand.  This way, if the DNS operations are creating delays at
startup, you can avoid those by manually setting the value in your
muttrc.

   Also see $use_domain (*note use_domain::) and $hidden_host (*note
hidden_host::).


File: mutt.info,  Node: idn_decode,  Next: idn_encode,  Prev: hostname,  Up: Configuration Variables

9.3.130 idn_decode
------------------

     Type: boolean
     Default: yes

   When _set_, Mutt will show you international domain names decoded.
Note: You can use IDNs for addresses even if this is _unset_.  This
variable only affects decoding.  (IDN only)


File: mutt.info,  Node: idn_encode,  Next: ignore_linear_white_space,  Prev: idn_decode,  Up: Configuration Variables

9.3.131 idn_encode
------------------

     Type: boolean
     Default: yes

   When _set_, Mutt will encode international domain names using IDN.
Unset this if your SMTP server can handle newer (RFC 6531) UTF-8 encoded
domains.  (IDN only)


File: mutt.info,  Node: ignore_linear_white_space,  Next: ignore_list_reply_to,  Prev: idn_encode,  Up: Configuration Variables

9.3.132 ignore_linear_white_space
---------------------------------

     Type: boolean
     Default: no

   This option replaces linear-white-space between encoded-word and text
to a single space to prevent the display of MIME-encoded ‘Subject:’
field from being divided into multiple lines.


File: mutt.info,  Node: ignore_list_reply_to,  Next: imap_authenticators,  Prev: ignore_linear_white_space,  Up: Configuration Variables

9.3.133 ignore_list_reply_to
----------------------------

     Type: boolean
     Default: no

   Affects the behavior of the ‘<reply>’ function when replying to
messages from mailing lists (as defined by the ‘subscribe (*note
subscribe::)’ or ‘lists (*note Mailing Lists <1>::)’ commands).  When
_set_, if the ‘Reply-To:’ field is set to the same value as the ‘To:’
field, Mutt assumes that the ‘Reply-To:’ field was set by the mailing
list to automate responses to the list, and will ignore this field.  To
direct a response to the mailing list when this option is _set_, use the
‘<list-reply> (*note list-reply::)’ function; ‘<group-reply>’ will reply
to both the sender and the list.


File: mutt.info,  Node: imap_authenticators,  Next: imap_check_subscribed,  Prev: ignore_list_reply_to,  Up: Configuration Variables

9.3.134 imap_authenticators
---------------------------

     Type: string
     Default: (empty)

   This is a colon-delimited list of authentication methods mutt may
attempt to use to log in to an IMAP server, in the order mutt should try
them.  Authentication methods are either ‘login’ or the right side of an
IMAP ‘AUTH=xxx’ capability string, e.g.  ‘digest-md5’, ‘gssapi’ or
‘cram-md5’.  This option is case-insensitive.  If it’s _unset_ (the
default) mutt will try all available methods, in order from most-secure
to least-secure.

   Example:


     set imap_authenticators="gssapi:cram-md5:login"

   *Note:* Mutt will only fall back to other authentication methods if
the previous methods are unavailable.  If a method is available but
authentication fails, mutt will not connect to the IMAP server.


File: mutt.info,  Node: imap_check_subscribed,  Next: imap_condstore,  Prev: imap_authenticators,  Up: Configuration Variables

9.3.135 imap_check_subscribed
-----------------------------

     Type: boolean
     Default: no

   When _set_, mutt will fetch the set of subscribed folders from your
server on connection, and add them to the set of mailboxes it polls for
new mail just as if you had issued individual ‘mailboxes (*note
Monitoring Incoming Mail::)’ commands.


File: mutt.info,  Node: imap_condstore,  Next: imap_deflate,  Prev: imap_check_subscribed,  Up: Configuration Variables

9.3.136 imap_condstore
----------------------

     Type: boolean
     Default: no

   When _set_, mutt will use the CONDSTORE extension (RFC 7162) if
advertised by the server.  Mutt’s current implementation is basic, used
only for initial message fetching and flag updates.

   For some IMAP servers, enabling this will slightly speed up
downloading initial messages.  Unfortunately, Gmail is not one those,
and displays worse performance when enabled.  Your mileage may vary.


File: mutt.info,  Node: imap_deflate,  Next: imap_delim_chars,  Prev: imap_condstore,  Up: Configuration Variables

9.3.137 imap_deflate
--------------------

     Type: boolean
     Default: no

   When _set_, mutt will use the COMPRESS=DEFLATE extension (RFC 4978)
if advertised by the server.

   In general a good compression efficiency can be achieved, which
speeds up reading large mailboxes also on fairly good connections.


File: mutt.info,  Node: imap_delim_chars,  Next: imap_fetch_chunk_size,  Prev: imap_deflate,  Up: Configuration Variables

9.3.138 imap_delim_chars
------------------------

     Type: string
     Default: ‘/.’

   This contains the list of characters which you would like to treat as
folder separators for displaying IMAP paths.  In particular it helps in
using the ‘=’ shortcut for your _folder_ variable.


File: mutt.info,  Node: imap_fetch_chunk_size,  Next: imap_headers,  Prev: imap_delim_chars,  Up: Configuration Variables

9.3.139 imap_fetch_chunk_size
-----------------------------

     Type: number (long)
     Default: 0

   When set to a value greater than 0, new headers will be downloaded in
groups of this many headers per request.  If you have a very large
mailbox, this might prevent a timeout and disconnect when opening the
mailbox, by sending a FETCH per set of this many headers, instead of a
single FETCH for all new headers.


File: mutt.info,  Node: imap_headers,  Next: imap_idle,  Prev: imap_fetch_chunk_size,  Up: Configuration Variables

9.3.140 imap_headers
--------------------

     Type: string
     Default: (empty)

   Mutt requests these header fields in addition to the default headers
(‘Date:’, ‘From:’, ‘Sender:’, ‘Subject:’, ‘To:’, ‘Cc:’, ‘Message-Id:’,
‘References:’, ‘Content-Type:’, ‘Content-Description:’, ‘In-Reply-To:’,
‘Reply-To:’, ‘Lines:’, ‘List-Post:’, ‘X-Label:’) from IMAP servers
before displaying the index menu.  You may want to add more headers for
spam detection.

   *Note:* This is a space separated list, items should be uppercase and
not contain the colon, e.g.  ‘X-BOGOSITY X-SPAM-STATUS’ for the
‘X-Bogosity:’ and ‘X-Spam-Status:’ header fields.


File: mutt.info,  Node: imap_idle,  Next: imap_keepalive,  Prev: imap_headers,  Up: Configuration Variables

9.3.141 imap_idle
-----------------

     Type: boolean
     Default: no

   When _set_, mutt will attempt to use the IMAP IDLE extension to check
for new mail in the current mailbox.  Some servers (dovecot was the
inspiration for this option) react badly to mutt’s implementation.  If
your connection seems to freeze up periodically, try unsetting this.


File: mutt.info,  Node: imap_keepalive,  Next: imap_list_subscribed,  Prev: imap_idle,  Up: Configuration Variables

9.3.142 imap_keepalive
----------------------

     Type: number
     Default: 300

   This variable specifies the maximum amount of time in seconds that
mutt will wait before polling open IMAP connections, to prevent the
server from closing them before mutt has finished with them.  The
default is well within the RFC-specified minimum amount of time (30
minutes) before a server is allowed to do this, but in practice the RFC
does get violated every now and then.  Reduce this number if you find
yourself getting disconnected from your IMAP server due to inactivity.


File: mutt.info,  Node: imap_list_subscribed,  Next: imap_login,  Prev: imap_keepalive,  Up: Configuration Variables

9.3.143 imap_list_subscribed
----------------------------

     Type: boolean
     Default: no

   This variable configures whether IMAP folder browsing will look for
only subscribed folders or all folders.  This can be toggled in the IMAP
browser with the ‘<toggle-subscribed>’ function.


File: mutt.info,  Node: imap_login,  Next: imap_oauth_refresh_command,  Prev: imap_list_subscribed,  Up: Configuration Variables

9.3.144 imap_login
------------------

     Type: string
     Default: (empty)

   Your login name on the IMAP server.

   This variable defaults to the value of $imap_user (*note
imap_user::).


File: mutt.info,  Node: imap_oauth_refresh_command,  Next: imap_pass,  Prev: imap_login,  Up: Configuration Variables

9.3.145 imap_oauth_refresh_command
----------------------------------

     Type: string
     Default: (empty)

   The command to run to generate an OAUTH refresh token for authorizing
your connection to your IMAP server.  This command will be run on every
connection attempt that uses the OAUTHBEARER authentication mechanism.
See ‘oauth (*note OAUTHBEARER Support::)’ for details.


File: mutt.info,  Node: imap_pass,  Next: imap_passive,  Prev: imap_oauth_refresh_command,  Up: Configuration Variables

9.3.146 imap_pass
-----------------

     Type: string
     Default: (empty)

   Specifies the password for your IMAP account.  If _unset_, Mutt will
prompt you for your password when you invoke the ‘<imap-fetch-mail>’
function or try to open an IMAP folder.

   *Warning*: you should only use this option when you are on a fairly
secure machine, because the superuser can read your muttrc even if you
are the only one who can read the file.


File: mutt.info,  Node: imap_passive,  Next: imap_peek,  Prev: imap_pass,  Up: Configuration Variables

9.3.147 imap_passive
--------------------

     Type: boolean
     Default: yes

   When _set_, mutt will not open new IMAP connections to check for new
mail.  Mutt will only check for new mail over existing IMAP connections.
This is useful if you don’t want to be prompted for user/password pairs
on mutt invocation, or if opening the connection is slow.


File: mutt.info,  Node: imap_peek,  Next: imap_pipeline_depth,  Prev: imap_passive,  Up: Configuration Variables

9.3.148 imap_peek
-----------------

     Type: boolean
     Default: yes

   When _set_, mutt will avoid implicitly marking your mail as read
whenever you fetch a message from the server.  This is generally a good
thing, but can make closing an IMAP folder somewhat slower.  This option
exists to appease speed freaks.


File: mutt.info,  Node: imap_pipeline_depth,  Next: imap_poll_timeout,  Prev: imap_peek,  Up: Configuration Variables

9.3.149 imap_pipeline_depth
---------------------------

     Type: number
     Default: 15

   Controls the number of IMAP commands that may be queued up before
they are sent to the server.  A deeper pipeline reduces the amount of
time mutt must wait for the server, and can make IMAP servers feel much
more responsive.  But not all servers correctly handle pipelined
commands, so if you have problems you might want to try setting this
variable to 0.

   *Note:* Changes to this variable have no effect on open connections.


File: mutt.info,  Node: imap_poll_timeout,  Next: imap_qresync,  Prev: imap_pipeline_depth,  Up: Configuration Variables

9.3.150 imap_poll_timeout
-------------------------

     Type: number
     Default: 15

   This variable specifies the maximum amount of time in seconds that
mutt will wait for a response when polling IMAP connections for new
mail, before timing out and closing the connection.  Set to 0 to disable
timing out.


File: mutt.info,  Node: imap_qresync,  Next: imap_servernoise,  Prev: imap_poll_timeout,  Up: Configuration Variables

9.3.151 imap_qresync
--------------------

     Type: boolean
     Default: no

   When _set_, mutt will use the QRESYNC extension (RFC 7162) if
advertised by the server.  Mutt’s current implementation is basic, used
only for initial message fetching and flag updates.

   Note: this feature is currently experimental.  If you experience
strange behavior, such as duplicate or missing messages please file a
bug report to let us know.


File: mutt.info,  Node: imap_servernoise,  Next: imap_user,  Prev: imap_qresync,  Up: Configuration Variables

9.3.152 imap_servernoise
------------------------

     Type: boolean
     Default: yes

   When _set_, mutt will display warning messages from the IMAP server
as error messages.  Since these messages are often harmless, or
generated due to configuration problems on the server which are out of
the users’ hands, you may wish to suppress them at some point.


File: mutt.info,  Node: imap_user,  Next: implicit_autoview,  Prev: imap_servernoise,  Up: Configuration Variables

9.3.153 imap_user
-----------------

     Type: string
     Default: (empty)

   The name of the user whose mail you intend to access on the IMAP
server.

   This variable defaults to your user name on the local machine.


File: mutt.info,  Node: implicit_autoview,  Next: include,  Prev: imap_user,  Up: Configuration Variables

9.3.154 implicit_autoview
-------------------------

     Type: boolean
     Default: no

   If set to ‘yes’, mutt will look for a mailcap entry with the
‘‘copiousoutput’’ flag set for _every_ MIME attachment it doesn’t have
an internal viewer defined for.  If such an entry is found, mutt will
use the viewer defined in that entry to convert the body part to text
form.


File: mutt.info,  Node: include,  Next: include_encrypted,  Prev: implicit_autoview,  Up: Configuration Variables

9.3.155 include
---------------

     Type: quadoption
     Default: ask-yes

   Controls whether or not a copy of the message(s) you are replying to
is included in your reply.


File: mutt.info,  Node: include_encrypted,  Next: include_onlyfirst,  Prev: include,  Up: Configuration Variables

9.3.156 include_encrypted
-------------------------

     Type: boolean
     Default: no

   Controls whether or not Mutt includes separately encrypted attachment
contents when replying.

   This variable was added to prevent accidental exposure of encrypted
contents when replying to an attacker.  If a previously encrypted
message were attached by the attacker, they could trick an unwary
recipient into decrypting and including the message in their reply.


File: mutt.info,  Node: include_onlyfirst,  Next: indent_string,  Prev: include_encrypted,  Up: Configuration Variables

9.3.157 include_onlyfirst
-------------------------

     Type: boolean
     Default: no

   Controls whether or not Mutt includes only the first attachment of
the message you are replying.


File: mutt.info,  Node: indent_string,  Next: index_format,  Prev: include_onlyfirst,  Up: Configuration Variables

9.3.158 indent_string
---------------------

     Type: string
     Default: ‘> ’

   Specifies the string to prepend to each line of text quoted in a
message to which you are replying.  You are strongly encouraged not to
change this value, as it tends to agitate the more fanatical netizens.

   The value of this option is ignored if $text_flowed (*note
text_flowed::) is set, because the quoting mechanism is strictly defined
for format=flowed.

   This option is a format string, please see the description of
$index_format (*note index_format::) for supported ‘printf(3)’-style
sequences.


File: mutt.info,  Node: index_format,  Next: ispell,  Prev: indent_string,  Up: Configuration Variables

9.3.159 index_format
--------------------

     Type: string
     Default: ‘%4C %Z %{%b %d} %-15.15L (%?l?%4l&%4c?) %s’

   This variable allows you to customize the message index display to
your personal taste.

   ‘Format strings’ are similar to the strings used in the C function
‘printf(3)’ to format output (see the man page for more details).  For
an explanation of the %?  construct, see the $status_format (*note
status_format::) description.  The following sequences are defined in
Mutt:

%a                                   address of the author
%A                                   reply-to address (if present;
                                     otherwise: address of author)
%b                                   filename of the original message
                                     folder (think mailbox)
%B                                   the list to which the letter was
                                     sent, or else the folder name
                                     (%b).
%c                                   number of characters (bytes) in
                                     the message (see
                                     formatstrings-size
                                     (*note Bytes size display::))
%C                                   current message number
%d                                   date and time of the message in
                                     the format specified by
                                     $date_format (*note date_format::)
                                     converted to sender’s time zone
%D                                   date and time of the message in
                                     the format specified by
                                     $date_format (*note date_format::)
                                     converted to the local time zone
%e                                   current message number in thread
%E                                   number of messages in current
                                     thread
%f                                   sender (address + real name),
                                     either From: or Return-Path:
%F                                   author name, or recipient name if
                                     the message is from you
%H                                   spam attribute(s) of this message
%i                                   message-id of the current message
%l                                   number of lines in the unprocessed
                                     message (may not work with
                                     maildir, mh, and IMAP folders)
%L                                   If an address in the ‘To:’ or
                                     ‘Cc:’ header field matches an
                                     address defined by the users
                                     ‘subscribe (*note subscribe::)’
                                     command, this displays "To
                                     <list-name>", otherwise the same
                                     as %F.
%m                                   total number of message in the
                                     mailbox
%M                                   number of hidden messages if the
                                     thread is collapsed.
%N                                   message score
%n                                   author’s real name (or address if
                                     missing)
%O                                   original save folder where mutt
                                     would formerly have stashed the
                                     message: list name or recipient
                                     name if not sent to a list
%P                                   progress indicator for the
                                     built-in pager (how much of the
                                     file has been displayed)
%r                                   comma separated list of ‘To:’
                                     recipients
%R                                   comma separated list of ‘Cc:’
                                     recipients
%s                                   subject of the message
%S                                   single character status of the
                                     message
                                     (‘N’/‘O’/‘D’/‘d’/‘!’/‘r’/‘*’)
%t                                   ‘To:’ field (recipients)
%T                                   the appropriate character from the
                                     $to_chars (*note to_chars::)
                                     string
%u                                   user (login) name of the author
%v                                   first name of the author, or the
                                     recipient if the message is from
                                     you
%X                                   number of attachments (please see
                                     the ‘attachments
                                     (*note Attachment Searching and Counting::)’
                                     section for possible speed
                                     effects)
%y                                   ‘X-Label:’ field, if present
%Y                                   ‘X-Label:’ field, if present, and
                                     _(1)_ not at part of a thread
                                     tree, _(2)_ at the top of a
                                     thread, or _(3)_‘X-Label:’ is
                                     different from preceding message’s
                                     ‘X-Label:’.
%Z                                   a three character set of message
                                     status flags.  the first character
                                     is new/read/replied flags
                                     (‘n’/‘o’/‘r’/‘O’/‘N’).  the second
                                     is deleted or encryption flags
                                     (‘D’/‘d’/‘S’/‘P’/‘s’/‘K’).  the
                                     third is either tagged/flagged
                                     (‘*’/‘!’), or one of the
                                     characters listed in $to_chars
                                     (*note to_chars::).
%@name@                              insert and evaluate format-string
                                     from the matching
                                     ‘index-format-hook
                                     (*note Dynamically Changing $index_format using Patterns::)’
                                     command
%{fmt}                               the date and time of the message
                                     is converted to sender’s time
                                     zone, and ‘fmt’ is expanded by the
                                     library function ‘strftime(3)’; a
                                     leading bang disables locales
%[fmt]                               the date and time of the message
                                     is converted to the local time
                                     zone, and ‘fmt’ is expanded by the
                                     library function ‘strftime(3)’; a
                                     leading bang disables locales
%(fmt)                               the local date and time when the
                                     message was received.  ‘fmt’ is
                                     expanded by the library function
                                     ‘strftime(3)’; a leading bang
                                     disables locales
%<fmt>                               the current local time.  ‘fmt’ is
                                     expanded by the library function
                                     ‘strftime(3)’; a leading bang
                                     disables locales.
%>X                                  right justify the rest of the
                                     string and pad with character ‘X’
%|X                                  pad to the end of the line with
                                     character ‘X’
%*X                                  soft-fill with character ‘X’ as
                                     pad

   Note that for mbox/mmdf, ‘%l’ applies to the unprocessed message, and
for maildir/mh, the value comes from the ‘Lines:’ header field when
present (the meaning is normally the same).  Thus the value depends on
the encodings used in the different parts of the message and has little
meaning in practice.

   ‘Soft-fill’ deserves some explanation: Normal right-justification
will print everything to the left of the ‘%>’, displaying padding and
whatever lies to the right only if there’s room.  By contrast, soft-fill
gives priority to the right-hand side, guaranteeing space to display it
and showing padding only if there’s still room.  If necessary, soft-fill
will eat text leftwards to make room for rightward text.

   Note that these expandos are supported in ‘save-hook (*note Specify
Default Save Mailbox::)’, ‘fcc-hook (*note Specify Default Fcc; Mailbox
When Composing::)’, ‘fcc-save-hook (*note Specify Default Save Filename
and Default Fcc; Mailbox at Once::)’, and ‘index-format-hook (*note
Dynamically Changing $index_format using Patterns::)’.

   They are also supported in the configuration variables $attribution
(*note attribution::), $forward_attribution_intro (*note
forward_attribution_intro::), $forward_attribution_trailer (*note
forward_attribution_trailer::), $forward_format (*note
forward_format::), $indent_string (*note indent_string::),
$message_format (*note message_format::), $pager_format (*note
pager_format::), and $post_indent_string (*note post_indent_string::).


File: mutt.info,  Node: ispell,  Next: keep_flagged,  Prev: index_format,  Up: Configuration Variables

9.3.160 ispell
--------------

     Type: path
     Default: ‘/usr/bin/ispell’

   How to invoke ispell (GNU’s spell-checking software).


File: mutt.info,  Node: keep_flagged,  Next: local_date_header,  Prev: ispell,  Up: Configuration Variables

9.3.161 keep_flagged
--------------------

     Type: boolean
     Default: no

   If _set_, read messages marked as flagged will not be moved from your
spool mailbox to your $mbox (*note mbox::) mailbox, or as a result of a
‘mbox-hook (*note Using Multiple Spool Mailboxes::)’ command.


File: mutt.info,  Node: local_date_header,  Next: mail_check,  Prev: keep_flagged,  Up: Configuration Variables

9.3.162 local_date_header
-------------------------

     Type: boolean
     Default: yes

   If _set_, the date in the Date header of emails that you send will be
in your local timezone.  If unset a UTC date will be used instead to
avoid leaking information about your current location.


File: mutt.info,  Node: mail_check,  Next: mail_check_recent,  Prev: local_date_header,  Up: Configuration Variables

9.3.163 mail_check
------------------

     Type: number
     Default: 5

   This variable configures how often (in seconds) mutt should look for
new mail.  Also see the $timeout (*note timeout::) variable.


File: mutt.info,  Node: mail_check_recent,  Next: mail_check_stats,  Prev: mail_check,  Up: Configuration Variables

9.3.164 mail_check_recent
-------------------------

     Type: boolean
     Default: yes

   When _set_, Mutt will only notify you about new mail that has been
received since the last time you opened the mailbox.  When _unset_, Mutt
will notify you if any new mail exists in the mailbox, regardless of
whether you have visited it recently.


File: mutt.info,  Node: mail_check_stats,  Next: mail_check_stats_interval,  Prev: mail_check_recent,  Up: Configuration Variables

9.3.165 mail_check_stats
------------------------

     Type: boolean
     Default: no

   When _set_, mutt will periodically calculate message statistics of a
mailbox while polling for new mail.  It will check for unread, flagged,
and total message counts.  (Note: IMAP mailboxes only support unread and
total counts).

   Because this operation is more performance intensive, it defaults to
_unset_, and has a separate option, $mail_check_stats_interval (*note
mail_check_stats_interval::), to control how often to update these
counts.

   Message statistics can also be explicitly calculated by invoking the
‘<check-stats>’ function.


File: mutt.info,  Node: mail_check_stats_interval,  Next: mailcap_path,  Prev: mail_check_stats,  Up: Configuration Variables

9.3.166 mail_check_stats_interval
---------------------------------

     Type: number
     Default: 60

   When $mail_check_stats (*note mail_check_stats::) is _set_, this
variable configures how often (in seconds) mutt will update message
counts.


File: mutt.info,  Node: mailcap_path,  Next: mailcap_sanitize,  Prev: mail_check_stats_interval,  Up: Configuration Variables

9.3.167 mailcap_path
--------------------

     Type: string
     Default: (empty)

   This variable specifies which files to consult when attempting to
display MIME bodies not directly supported by Mutt.  The default value
is generated during startup: see the ‘mailcap (*note MIME Viewer
Configuration with Mailcap::)’ section of the manual.


File: mutt.info,  Node: mailcap_sanitize,  Next: maildir_header_cache_verify,  Prev: mailcap_path,  Up: Configuration Variables

9.3.168 mailcap_sanitize
------------------------

     Type: boolean
     Default: yes

   If _set_, mutt will restrict possible characters in mailcap %
expandos to a well-defined set of safe characters.  This is the safe
setting, but we are not sure it doesn’t break some more advanced MIME
stuff.

   *DON’T CHANGE THIS SETTING UNLESS YOU ARE REALLY SURE WHAT YOU ARE
DOING!*


File: mutt.info,  Node: maildir_header_cache_verify,  Next: maildir_trash,  Prev: mailcap_sanitize,  Up: Configuration Variables

9.3.169 maildir_header_cache_verify
-----------------------------------

     Type: boolean
     Default: yes

   Check for Maildir unaware programs other than mutt having modified
maildir files when the header cache is in use.  This incurs one
‘stat(2)’ per message every time the folder is opened (which can be very
slow for NFS folders).


File: mutt.info,  Node: maildir_trash,  Next: maildir_check_cur,  Prev: maildir_header_cache_verify,  Up: Configuration Variables

9.3.170 maildir_trash
---------------------

     Type: boolean
     Default: no

   If _set_, messages marked as deleted will be saved with the maildir
trashed flag instead of unlinked.  *Note:* this only applies to
maildir-style mailboxes.  Setting it will have no effect on other
mailbox types.


File: mutt.info,  Node: maildir_check_cur,  Next: mark_macro_prefix,  Prev: maildir_trash,  Up: Configuration Variables

9.3.171 maildir_check_cur
-------------------------

     Type: boolean
     Default: no

   If _set_, mutt will poll both the new and cur directories of a
maildir folder for new messages.  This might be useful if other programs
interacting with the folder (e.g.  dovecot) are moving new messages to
the cur directory.  Note that setting this option may slow down polling
for new messages in large folders, since mutt has to scan all cur
messages.


File: mutt.info,  Node: mark_macro_prefix,  Next: mark_old,  Prev: maildir_check_cur,  Up: Configuration Variables

9.3.172 mark_macro_prefix
-------------------------

     Type: string
     Default: ‘’’

   Prefix for macros created using mark-message.  A new macro
automatically generated with _<mark-message>a_ will be composed from
this prefix and the letter _a_.


File: mutt.info,  Node: mark_old,  Next: markers,  Prev: mark_macro_prefix,  Up: Configuration Variables

9.3.173 mark_old
----------------

     Type: boolean
     Default: yes

   Controls whether or not mutt marks _new_ *unread* messages as _old_
if you exit a mailbox without reading them.  With this option _set_, the
next time you start mutt, the messages will show up with an ‘O’ next to
them in the index menu, indicating that they are old.


File: mutt.info,  Node: markers,  Next: mask,  Prev: mark_old,  Up: Configuration Variables

9.3.174 markers
---------------

     Type: boolean
     Default: yes

   Controls the display of wrapped lines in the internal pager.  If set,
a ‘+’ marker is displayed at the beginning of wrapped lines.

   Also see the $smart_wrap (*note smart_wrap::) variable.


File: mutt.info,  Node: mask,  Next: mbox,  Prev: markers,  Up: Configuration Variables

9.3.175 mask
------------

     Type: regular expression
     Default: ‘!^\\.[^.]’

   A regular expression used in the file browser, optionally preceded by
the _not_ operator ‘!’.  Only files whose names match this mask will be
shown.  The match is always case-sensitive.


File: mutt.info,  Node: mbox,  Next: mbox_type,  Prev: mask,  Up: Configuration Variables

9.3.176 mbox
------------

     Type: path
     Default: ‘~/mbox’

   This specifies the folder into which read mail in your $spoolfile
(*note spoolfile::) folder will be appended.

   Also see the $move (*note move::) variable.


File: mutt.info,  Node: mbox_type,  Next: menu_context,  Prev: mbox,  Up: Configuration Variables

9.3.177 mbox_type
-----------------

     Type: folder magic
     Default: mbox

   The default mailbox type used when creating new folders.  May be any
of ‘mbox’, ‘MMDF’, ‘MH’ and ‘Maildir’.  This is overridden by the ‘-m’
command-line option.


File: mutt.info,  Node: menu_context,  Next: menu_move_off,  Prev: mbox_type,  Up: Configuration Variables

9.3.178 menu_context
--------------------

     Type: number
     Default: 0

   This variable controls the number of lines of context that are given
when scrolling through menus.  (Similar to $pager_context (*note
pager_context::).)


File: mutt.info,  Node: menu_move_off,  Next: menu_scroll,  Prev: menu_context,  Up: Configuration Variables

9.3.179 menu_move_off
---------------------

     Type: boolean
     Default: yes

   When _unset_, the bottom entry of menus will never scroll up past the
bottom of the screen, unless there are less entries than lines.  When
_set_, the bottom entry may move off the bottom.


File: mutt.info,  Node: menu_scroll,  Next: message_cache_clean,  Prev: menu_move_off,  Up: Configuration Variables

9.3.180 menu_scroll
-------------------

     Type: boolean
     Default: no

   When _set_, menus will be scrolled up or down one line when you
attempt to move across a screen boundary.  If _unset_, the screen is
cleared and the next or previous page of the menu is displayed (useful
for slow links to avoid many redraws).


File: mutt.info,  Node: message_cache_clean,  Next: message_cachedir,  Prev: menu_scroll,  Up: Configuration Variables

9.3.181 message_cache_clean
---------------------------

     Type: boolean
     Default: no

   If _set_, mutt will clean out obsolete entries from the message cache
when the mailbox is synchronized.  You probably only want to set it
every once in a while, since it can be a little slow (especially for
large folders).


File: mutt.info,  Node: message_cachedir,  Next: message_format,  Prev: message_cache_clean,  Up: Configuration Variables

9.3.182 message_cachedir
------------------------

     Type: path
     Default: (empty)

   Set this to a directory and mutt will cache copies of messages from
your IMAP and POP servers here.  You are free to remove entries at any
time.

   When setting this variable to a directory, mutt needs to fetch every
remote message only once and can perform regular expression searches as
fast as for local folders.

   Also see the $message_cache_clean (*note message_cache_clean::)
variable.


File: mutt.info,  Node: message_format,  Next: message_id_format,  Prev: message_cachedir,  Up: Configuration Variables

9.3.183 message_format
----------------------

     Type: string
     Default: ‘%s’

   This is the string displayed in the ‘attachment’ menu for attachments
of type ‘message/rfc822’.  For a full listing of defined
‘printf(3)’-like sequences see the section on $index_format (*note
index_format::).


File: mutt.info,  Node: message_id_format,  Next: meta_key,  Prev: message_format,  Up: Configuration Variables

9.3.184 message_id_format
-------------------------

     Type: string
     Default: ‘<%z@%f>’

   This variable describes the format of the Message-ID generated when
sending messages.  Mutt 2.0 introduced a more compact format, but this
variable allows the ability to choose your own format.  The value may
end in ‘|’ to invoke an external filter.  See formatstrings-filters
(*note Filters::).

   Please note that the Message-ID value follows a strict syntax, and
you are responsible for ensuring correctness if you change this from the
default.  In particular, the value must follow the syntax in RFC 5322:
‘‘"<" id-left "@" id-right ">"’’.  No spaces are allowed, and ‘id-left’
should follow the dot-atom-text syntax in the RFC. The ‘id-right’ should
generally be left at %f.

   The old Message-ID format can be used by setting this to:
‘‘<%Y%02m%02d%02H%02M%02S.G%c%p@%f>’’

   The following ‘printf(3)’-style sequences are understood:

%c                                   step counter looping from ‘A’ to
                                     ‘Z’
%d                                   current day of the month (GMT)
%f                                   $hostname (*note hostname::)
%H                                   current hour using a 24-hour clock
                                     (GMT)
%m                                   current month number (GMT)
%M                                   current minute of the hour (GMT)
%p                                   pid of the running mutt process
%r                                   3 bytes of pseudorandom data
                                     encoded in Base64
%S                                   current second of the minute (GMT)
%x                                   1 byte of pseudorandom data hex
                                     encoded (example: ’1b’)
%Y                                   current year using 4 digits (GMT)
%z                                   4 byte timestamp + 8 bytes of
                                     pseudorandom data encoded in
                                     Base64


File: mutt.info,  Node: meta_key,  Next: metoo,  Prev: message_id_format,  Up: Configuration Variables

9.3.185 meta_key
----------------

     Type: boolean
     Default: no

   If _set_, forces Mutt to interpret keystrokes with the high bit (bit
8) set as if the user had pressed the Esc key and whatever key remains
after having the high bit removed.  For example, if the key pressed has
an ASCII value of ‘0xf8’, then this is treated as if the user had
pressed Esc then ‘x’.  This is because the result of removing the high
bit from ‘0xf8’ is ‘0x78’, which is the ASCII character ‘x’.


File: mutt.info,  Node: metoo,  Next: mh_purge,  Prev: meta_key,  Up: Configuration Variables

9.3.186 metoo
-------------

     Type: boolean
     Default: no

   If _unset_, Mutt will remove your address (see the ‘alternates (*note
Alternative Addresses::)’ command) from the list of recipients when
replying to a message.


File: mutt.info,  Node: mh_purge,  Next: mh_seq_flagged,  Prev: metoo,  Up: Configuration Variables

9.3.187 mh_purge
----------------

     Type: boolean
     Default: no

   When _unset_, mutt will mimic mh’s behavior and rename deleted
messages to _,<old file name>_ in mh folders instead of really deleting
them.  This leaves the message on disk but makes programs reading the
folder ignore it.  If the variable is _set_, the message files will
simply be deleted.

   This option is similar to $maildir_trash (*note maildir_trash::) for
Maildir folders.


File: mutt.info,  Node: mh_seq_flagged,  Next: mh_seq_replied,  Prev: mh_purge,  Up: Configuration Variables

9.3.188 mh_seq_flagged
----------------------

     Type: string
     Default: ‘flagged’

   The name of the MH sequence used for flagged messages.


File: mutt.info,  Node: mh_seq_replied,  Next: mh_seq_unseen,  Prev: mh_seq_flagged,  Up: Configuration Variables

9.3.189 mh_seq_replied
----------------------

     Type: string
     Default: ‘replied’

   The name of the MH sequence used to tag replied messages.


File: mutt.info,  Node: mh_seq_unseen,  Next: mime_forward,  Prev: mh_seq_replied,  Up: Configuration Variables

9.3.190 mh_seq_unseen
---------------------

     Type: string
     Default: ‘unseen’

   The name of the MH sequence used for unseen messages.


File: mutt.info,  Node: mime_forward,  Next: mime_forward_decode,  Prev: mh_seq_unseen,  Up: Configuration Variables

9.3.191 mime_forward
--------------------

     Type: quadoption
     Default: no

   When _set_, the message you are forwarding will be attached as a
separate ‘message/rfc822’ MIME part instead of included in the main body
of the message.  This is useful for forwarding MIME messages so the
receiver can properly view the message as it was delivered to you.  If
you like to switch between MIME and not MIME from mail to mail, set this
variable to ‘ask-no’ or ‘ask-yes’.

   Also see $forward_decode (*note forward_decode::) and
$mime_forward_decode (*note mime_forward_decode::).


File: mutt.info,  Node: mime_forward_decode,  Next: mime_forward_rest,  Prev: mime_forward,  Up: Configuration Variables

9.3.192 mime_forward_decode
---------------------------

     Type: boolean
     Default: no

   Controls the decoding of complex MIME messages into ‘text/plain’ when
forwarding a message while $mime_forward (*note mime_forward::) is
_set_.  Otherwise $forward_decode (*note forward_decode::) is used
instead.


File: mutt.info,  Node: mime_forward_rest,  Next: mime_type_query_command,  Prev: mime_forward_decode,  Up: Configuration Variables

9.3.193 mime_forward_rest
-------------------------

     Type: quadoption
     Default: yes

   When forwarding multiple attachments of a MIME message from the
attachment menu, attachments which cannot be decoded in a reasonable
manner will be attached to the newly composed message if this option is
_set_.


File: mutt.info,  Node: mime_type_query_command,  Next: mime_type_query_first,  Prev: mime_forward_rest,  Up: Configuration Variables

9.3.194 mime_type_query_command
-------------------------------

     Type: string
     Default: (empty)

   This specifies a command to run, to determine the mime type of a new
attachment when composing a message.  Unless $mime_type_query_first
(*note mime_type_query_first::) is set, this will only be run if the
attachment’s extension is not found in the mime.types file.

   The string may contain a ‘%s’, which will be substituted with the
attachment filename.  Mutt will add quotes around the string substituted
for ‘%s’ automatically according to shell quoting rules, so you should
avoid adding your own.  If no ‘%s’ is found in the string, Mutt will
append the attachment filename to the end of the string.

   The command should output a single line containing the attachment’s
mime type.

   Suggested values are ‘xdg-mime query filetype’ or ‘file -bi’.


File: mutt.info,  Node: mime_type_query_first,  Next: mix_entry_format,  Prev: mime_type_query_command,  Up: Configuration Variables

9.3.195 mime_type_query_first
-----------------------------

     Type: boolean
     Default: no

   When _set_, the $mime_type_query_command (*note
mime_type_query_command::) will be run before the mime.types lookup.


File: mutt.info,  Node: mix_entry_format,  Next: mixmaster,  Prev: mime_type_query_first,  Up: Configuration Variables

9.3.196 mix_entry_format
------------------------

     Type: string
     Default: ‘%4n %c %-16s %a’

   This variable describes the format of a remailer line on the
mixmaster chain selection screen.  The following ‘printf(3)’-like
sequences are supported:

%n                                   The running number on the menu.
%c                                   Remailer capabilities.
%s                                   The remailer’s short name.
%a                                   The remailer’s e-mail address.

   (Mixmaster only)


File: mutt.info,  Node: mixmaster,  Next: move,  Prev: mix_entry_format,  Up: Configuration Variables

9.3.197 mixmaster
-----------------

     Type: path
     Default: ‘mixmaster’

   This variable contains the path to the Mixmaster binary on your
system.  It is used with various sets of parameters to gather the list
of known remailers, and to finally send a message through the mixmaster
chain.  (Mixmaster only)


File: mutt.info,  Node: move,  Next: muttlisp_inline_eval,  Prev: mixmaster,  Up: Configuration Variables

9.3.198 move
------------

     Type: quadoption
     Default: no

   Controls whether or not Mutt will move read messages from your spool
mailbox to your $mbox (*note mbox::) mailbox, or as a result of a
‘mbox-hook (*note Using Multiple Spool Mailboxes::)’ command.


File: mutt.info,  Node: muttlisp_inline_eval,  Next: narrow_tree,  Prev: move,  Up: Configuration Variables

9.3.199 muttlisp_inline_eval
----------------------------

     Type: boolean
     Default: no

   If _set_, Mutt will evaluate bare parenthesis arguments to commands
as MuttLisp expressions.


File: mutt.info,  Node: narrow_tree,  Next: net_inc,  Prev: muttlisp_inline_eval,  Up: Configuration Variables

9.3.200 narrow_tree
-------------------

     Type: boolean
     Default: no

   This variable, when _set_, makes the thread tree narrower, allowing
deeper threads to fit on the screen.


File: mutt.info,  Node: net_inc,  Next: new_mail_command,  Prev: narrow_tree,  Up: Configuration Variables

9.3.201 net_inc
---------------

     Type: number
     Default: 10

   Operations that expect to transfer a large amount of data over the
network will update their progress every $net_inc (*note net_inc::)
kilobytes.  If set to 0, no progress messages will be displayed.

   See also $read_inc (*note read_inc::), $write_inc (*note write_inc::)
and $net_inc (*note net_inc::).


File: mutt.info,  Node: new_mail_command,  Next: pager,  Prev: net_inc,  Up: Configuration Variables

9.3.202 new_mail_command
------------------------

     Type: path
     Default: (empty)

   If _set_, Mutt will call this command after a new message is
received.  See the $status_format (*note status_format::) documentation
for the values that can be formatted into this command.


File: mutt.info,  Node: pager,  Next: pager_context,  Prev: new_mail_command,  Up: Configuration Variables

9.3.203 pager
-------------

     Type: path
     Default: ‘builtin’

   This variable specifies which pager you would like to use to view
messages.  The value ‘builtin’ means to use the built-in pager,
otherwise this variable should specify the pathname of the external
pager you would like to use.

   The string may contain a ‘%s’, which will be substituted with the
generated message filename.  Mutt will add quotes around the string
substituted for ‘%s’ automatically according to shell quoting rules, so
you should avoid adding your own.  If no ‘%s’ is found in the string,
Mutt will append the message filename to the end of the string.

   Using an external pager may have some disadvantages: Additional
keystrokes are necessary because you can’t call mutt functions directly
from the pager, and screen resizes cause lines longer than the screen
width to be badly formatted in the help menu.

   When using an external pager, also see $prompt_after (*note
prompt_after::) which defaults _set_.


File: mutt.info,  Node: pager_context,  Next: pager_format,  Prev: pager,  Up: Configuration Variables

9.3.204 pager_context
---------------------

     Type: number
     Default: 0

   This variable controls the number of lines of context that are given
when displaying the next or previous page in the internal pager.  By
default, Mutt will display the line after the last one on the screen at
the top of the next page (0 lines of context).

   This variable also specifies the amount of context given for search
results.  If positive, this many lines will be given before a match, if
0, the match will be top-aligned.


File: mutt.info,  Node: pager_format,  Next: pager_index_lines,  Prev: pager_context,  Up: Configuration Variables

9.3.205 pager_format
--------------------

     Type: string
     Default: ‘-%Z- %C/%m: %-20.20n   %s%*  – (%P)’

   This variable controls the format of the one-line message ‘status’
displayed before each message in either the internal or an external
pager.  The valid sequences are listed in the $index_format (*note
index_format::) section.


File: mutt.info,  Node: pager_index_lines,  Next: pager_skip_quoted_context,  Prev: pager_format,  Up: Configuration Variables

9.3.206 pager_index_lines
-------------------------

     Type: number
     Default: 0

   Determines the number of lines of a mini-index which is shown when in
the pager.  The current message, unless near the top or bottom of the
folder, will be roughly one third of the way down this mini-index,
giving the reader the context of a few messages before and after the
message.  This is useful, for example, to determine how many messages
remain to be read in the current thread.  One of the lines is reserved
for the status bar from the index, so a setting of 6 will only show 5
lines of the actual index.  A value of 0 results in no index being
shown.  If the number of messages in the current folder is less than
$pager_index_lines (*note pager_index_lines::), then the index will only
use as many lines as it needs.


File: mutt.info,  Node: pager_skip_quoted_context,  Next: pager_stop,  Prev: pager_index_lines,  Up: Configuration Variables

9.3.207 pager_skip_quoted_context
---------------------------------

     Type: number
     Default: 0

   Determines the number of lines of context to show before the unquoted
text when using ‘<skip-quoted> (*note skip-quoted::)’.  When set to a
positive number at most that many lines of the previous quote are
displayed.  If the previous quote is shorter the whole quote is
displayed.


File: mutt.info,  Node: pager_stop,  Next: pattern_format,  Prev: pager_skip_quoted_context,  Up: Configuration Variables

9.3.208 pager_stop
------------------

     Type: boolean
     Default: no

   When _set_, the internal-pager will *not* move to the next message
when you are at the end of a message and invoke the ‘<next-page>’
function.


File: mutt.info,  Node: pattern_format,  Next: pgp_auto_decode,  Prev: pager_stop,  Up: Configuration Variables

9.3.209 pattern_format
----------------------

     Type: string
     Default: ‘%2n %-15e  %d’

   This variable describes the format of the ‘pattern completion’ menu.
The following ‘printf(3)’-style sequences are understood:

%d                                   pattern description
%e                                   pattern expression
%n                                   index number


File: mutt.info,  Node: pgp_auto_decode,  Next: pgp_autoinline,  Prev: pattern_format,  Up: Configuration Variables

9.3.210 pgp_auto_decode
-----------------------

     Type: boolean
     Default: no

   If _set_, mutt will automatically attempt to decrypt traditional PGP
messages whenever the user performs an operation which ordinarily would
result in the contents of the message being operated on.  For example,
if the user displays a pgp-traditional message which has not been
manually checked with the ‘<check-traditional-pgp> (*note
check-traditional-pgp::)’ function, mutt will automatically check the
message for traditional pgp.


File: mutt.info,  Node: pgp_autoinline,  Next: pgp_check_exit,  Prev: pgp_auto_decode,  Up: Configuration Variables

9.3.211 pgp_autoinline
----------------------

     Type: boolean
     Default: no

   This option controls whether Mutt generates old-style inline
(traditional) PGP encrypted or signed messages under certain
circumstances.  This can be overridden by use of the pgp menu, when
inline is not required.  The GPGME backend does not support this option.

   Note that Mutt might automatically use PGP/MIME for messages which
consist of more than a single MIME part.  Mutt can be configured to ask
before sending PGP/MIME messages when inline (traditional) would not
work.

   Also see the $pgp_mime_auto (*note pgp_mime_auto::) variable.

   Also note that using the old-style PGP message format is *strongly*
*deprecated*.  (PGP only)


File: mutt.info,  Node: pgp_check_exit,  Next: pgp_check_gpg_decrypt_status_fd,  Prev: pgp_autoinline,  Up: Configuration Variables

9.3.212 pgp_check_exit
----------------------

     Type: boolean
     Default: yes

   If _set_, mutt will check the exit code of the PGP subprocess when
signing or encrypting.  A non-zero exit code means that the subprocess
failed.  (PGP only)


File: mutt.info,  Node: pgp_check_gpg_decrypt_status_fd,  Next: pgp_clearsign_command,  Prev: pgp_check_exit,  Up: Configuration Variables

9.3.213 pgp_check_gpg_decrypt_status_fd
---------------------------------------

     Type: boolean
     Default: yes

   If _set_, mutt will check the status file descriptor output of
$pgp_decrypt_command (*note pgp_decrypt_command::) and
$pgp_decode_command (*note pgp_decode_command::) for GnuPG status codes
indicating successful decryption.  This will check for the presence of
DECRYPTION_OKAY, absence of DECRYPTION_FAILED, and that all PLAINTEXT
occurs between the BEGIN_DECRYPTION and END_DECRYPTION status codes.

   If _unset_, mutt will instead match the status fd output against
$pgp_decryption_okay (*note pgp_decryption_okay::).  (PGP only)


File: mutt.info,  Node: pgp_clearsign_command,  Next: pgp_decode_command,  Prev: pgp_check_gpg_decrypt_status_fd,  Up: Configuration Variables

9.3.214 pgp_clearsign_command
-----------------------------

     Type: string
     Default: (empty)

   This format is used to create an old-style ‘clearsigned’ PGP message.
Note that the use of this format is *strongly* *deprecated*.

   This is a format string, see the $pgp_decode_command (*note
pgp_decode_command::) command for possible ‘printf(3)’-like sequences.
(PGP only)


File: mutt.info,  Node: pgp_decode_command,  Next: pgp_decrypt_command,  Prev: pgp_clearsign_command,  Up: Configuration Variables

9.3.215 pgp_decode_command
--------------------------

     Type: string
     Default: (empty)

   This format strings specifies a command which is used to decode
application/pgp attachments.

   The PGP command formats have their own set of ‘printf(3)’-like
sequences:

%p                                   Expands to PGPPASSFD=0 when a pass
                                     phrase is needed, to an empty
                                     string otherwise.  Note: This may
                                     be used with a %?  construct.
%f                                   Expands to the name of a file
                                     containing a message.
%s                                   Expands to the name of a file
                                     containing the signature part of a
                                     ‘multipart/signed’ attachment when
                                     verifying it.
%a                                   The value of $pgp_sign_as
                                     (*note pgp_sign_as::) if set,
                                     otherwise the value of
                                     $pgp_default_key
                                     (*note pgp_default_key::).
%r                                   One or more key IDs (or
                                     fingerprints if available).

   For examples on how to configure these formats for the various
versions of PGP which are floating around, see the pgp and gpg sample
configuration files in the ‘samples/’ subdirectory which has been
installed on your system alongside the documentation.  (PGP only)


File: mutt.info,  Node: pgp_decrypt_command,  Next: pgp_decryption_okay,  Prev: pgp_decode_command,  Up: Configuration Variables

9.3.216 pgp_decrypt_command
---------------------------

     Type: string
     Default: (empty)

   This command is used to decrypt a PGP encrypted message.

   This is a format string, see the $pgp_decode_command (*note
pgp_decode_command::) command for possible ‘printf(3)’-like sequences.
(PGP only)


File: mutt.info,  Node: pgp_decryption_okay,  Next: pgp_default_key,  Prev: pgp_decrypt_command,  Up: Configuration Variables

9.3.217 pgp_decryption_okay
---------------------------

     Type: regular expression
     Default: (empty)

   If you assign text to this variable, then an encrypted PGP message is
only considered successfully decrypted if the output from
$pgp_decrypt_command (*note pgp_decrypt_command::) contains the text.
This is used to protect against a spoofed encrypted message, with
multipart/encrypted headers but containing a block that is not actually
encrypted.  (e.g.  simply signed and ascii armored text).

   Note that if $pgp_check_gpg_decrypt_status_fd (*note
pgp_check_gpg_decrypt_status_fd::) is set, this variable is ignored.
(PGP only)


File: mutt.info,  Node: pgp_default_key,  Next: pgp_encrypt_only_command,  Prev: pgp_decryption_okay,  Up: Configuration Variables

9.3.218 pgp_default_key
-----------------------

     Type: string
     Default: (empty)

   This is the default key-pair to use for PGP operations.  It will be
used for encryption (see $postpone_encrypt (*note postpone_encrypt::)
and $pgp_self_encrypt (*note pgp_self_encrypt::)).

   It will also be used for signing unless $pgp_sign_as (*note
pgp_sign_as::) is set.

   The (now deprecated) _pgp_self_encrypt_as_ is an alias for this
variable, and should no longer be used.  (PGP only)


File: mutt.info,  Node: pgp_encrypt_only_command,  Next: pgp_encrypt_sign_command,  Prev: pgp_default_key,  Up: Configuration Variables

9.3.219 pgp_encrypt_only_command
--------------------------------

     Type: string
     Default: (empty)

   This command is used to encrypt a body part without signing it.

   This is a format string, see the $pgp_decode_command (*note
pgp_decode_command::) command for possible ‘printf(3)’-like sequences.
(PGP only)


File: mutt.info,  Node: pgp_encrypt_sign_command,  Next: pgp_entry_format,  Prev: pgp_encrypt_only_command,  Up: Configuration Variables

9.3.220 pgp_encrypt_sign_command
--------------------------------

     Type: string
     Default: (empty)

   This command is used to both sign and encrypt a body part.

   This is a format string, see the $pgp_decode_command (*note
pgp_decode_command::) command for possible ‘printf(3)’-like sequences.
(PGP only)


File: mutt.info,  Node: pgp_entry_format,  Next: pgp_export_command,  Prev: pgp_encrypt_sign_command,  Up: Configuration Variables

9.3.221 pgp_entry_format
------------------------

     Type: string
     Default: ‘%4n %t%f %4l/0x%k %-4a %2c %u’

   This variable allows you to customize the PGP key selection menu to
your personal taste.  This string is similar to $index_format (*note
index_format::), but has its own set of ‘printf(3)’-like sequences:

%n                                   number
%k                                   key id
%u                                   user id
%a                                   algorithm
%l                                   key length
%f                                   flags
%c                                   capabilities
%t                                   trust/validity of the key-uid
                                     association
%[<s>]                               date of the key where <s> is an
                                     ‘strftime(3)’ expression

   (PGP only)


File: mutt.info,  Node: pgp_export_command,  Next: pgp_getkeys_command,  Prev: pgp_entry_format,  Up: Configuration Variables

9.3.222 pgp_export_command
--------------------------

     Type: string
     Default: (empty)

   This command is used to export a public key from the user’s key ring.

   This is a format string, see the $pgp_decode_command (*note
pgp_decode_command::) command for possible ‘printf(3)’-like sequences.
(PGP only)


File: mutt.info,  Node: pgp_getkeys_command,  Next: pgp_good_sign,  Prev: pgp_export_command,  Up: Configuration Variables

9.3.223 pgp_getkeys_command
---------------------------

     Type: string
     Default: (empty)

   This command is invoked whenever Mutt needs to fetch the public key
associated with an email address.  Of the sequences supported by
$pgp_decode_command (*note pgp_decode_command::), %r is the only
‘printf(3)’-like sequence used with this format.  Note that in this
case, %r expands to the email address, not the public key ID (the key ID
is unknown, which is why Mutt is invoking this command).  (PGP only)


File: mutt.info,  Node: pgp_good_sign,  Next: pgp_ignore_subkeys,  Prev: pgp_getkeys_command,  Up: Configuration Variables

9.3.224 pgp_good_sign
---------------------

     Type: regular expression
     Default: (empty)

   If you assign a text to this variable, then a PGP signature is only
considered verified if the output from $pgp_verify_command (*note
pgp_verify_command::) contains the text.  Use this variable if the exit
code from the command is 0 even for bad signatures.  (PGP only)


File: mutt.info,  Node: pgp_ignore_subkeys,  Next: pgp_import_command,  Prev: pgp_good_sign,  Up: Configuration Variables

9.3.225 pgp_ignore_subkeys
--------------------------

     Type: boolean
     Default: yes

   Setting this variable will cause Mutt to ignore OpenPGP subkeys.
Instead, the principal key will inherit the subkeys’ capabilities.
_Unset_ this if you want to play interesting key selection games.  (PGP
only)


File: mutt.info,  Node: pgp_import_command,  Next: pgp_list_pubring_command,  Prev: pgp_ignore_subkeys,  Up: Configuration Variables

9.3.226 pgp_import_command
--------------------------

     Type: string
     Default: (empty)

   This command is used to import a key from a message into the user’s
public key ring.

   This is a format string, see the $pgp_decode_command (*note
pgp_decode_command::) command for possible ‘printf(3)’-like sequences.
(PGP only)


File: mutt.info,  Node: pgp_list_pubring_command,  Next: pgp_list_secring_command,  Prev: pgp_import_command,  Up: Configuration Variables

9.3.227 pgp_list_pubring_command
--------------------------------

     Type: string
     Default: (empty)

   This command is used to list the public key ring’s contents.  The
output format must be analogous to the one used by


     gpg --list-keys --with-colons --with-fingerprint

   This format is also generated by the ‘mutt_pgpring’ utility which
comes with mutt.

   Note: gpg’s ‘fixed-list-mode’ option should not be used.  It produces
a different date format which may result in mutt showing incorrect key
generation dates.

   This is a format string, see the $pgp_decode_command (*note
pgp_decode_command::) command for possible ‘printf(3)’-like sequences.
Note that in this case, %r expands to the search string, which is a list
of one or more quoted values such as email address, name, or keyid.
(PGP only)


File: mutt.info,  Node: pgp_list_secring_command,  Next: pgp_long_ids,  Prev: pgp_list_pubring_command,  Up: Configuration Variables

9.3.228 pgp_list_secring_command
--------------------------------

     Type: string
     Default: (empty)

   This command is used to list the secret key ring’s contents.  The
output format must be analogous to the one used by:


     gpg --list-keys --with-colons --with-fingerprint

   This format is also generated by the ‘mutt_pgpring’ utility which
comes with mutt.

   Note: gpg’s ‘fixed-list-mode’ option should not be used.  It produces
a different date format which may result in mutt showing incorrect key
generation dates.

   This is a format string, see the $pgp_decode_command (*note
pgp_decode_command::) command for possible ‘printf(3)’-like sequences.
Note that in this case, %r expands to the search string, which is a list
of one or more quoted values such as email address, name, or keyid.
(PGP only)


File: mutt.info,  Node: pgp_long_ids,  Next: pgp_mime_auto,  Prev: pgp_list_secring_command,  Up: Configuration Variables

9.3.229 pgp_long_ids
--------------------

     Type: boolean
     Default: yes

   If _set_, use 64 bit PGP key IDs, if _unset_ use the normal 32 bit
key IDs.  NOTE: Internally, Mutt has transitioned to using fingerprints
(or long key IDs as a fallback).  This option now only controls the
display of key IDs in the key selection menu and a few other places.
(PGP only)


File: mutt.info,  Node: pgp_mime_auto,  Next: pgp_replyinline,  Prev: pgp_long_ids,  Up: Configuration Variables

9.3.230 pgp_mime_auto
---------------------

     Type: quadoption
     Default: ask-yes

   This option controls whether Mutt will prompt you for automatically
sending a (signed/encrypted) message using PGP/MIME when inline
(traditional) fails (for any reason).

   Also note that using the old-style PGP message format is *strongly*
*deprecated*.  (PGP only)


File: mutt.info,  Node: pgp_replyinline,  Next: pgp_retainable_sigs,  Prev: pgp_mime_auto,  Up: Configuration Variables

9.3.231 pgp_replyinline
-----------------------

     Type: boolean
     Default: no

   Setting this variable will cause Mutt to always attempt to create an
inline (traditional) message when replying to a message which is PGP
encrypted/signed inline.  This can be overridden by use of the pgp menu,
when inline is not required.  This option does not automatically detect
if the (replied-to) message is inline; instead it relies on Mutt
internals for previously checked/flagged messages.

   Note that Mutt might automatically use PGP/MIME for messages which
consist of more than a single MIME part.  Mutt can be configured to ask
before sending PGP/MIME messages when inline (traditional) would not
work.

   Also see the $pgp_mime_auto (*note pgp_mime_auto::) variable.

   Also note that using the old-style PGP message format is *strongly*
*deprecated*.  (PGP only)


File: mutt.info,  Node: pgp_retainable_sigs,  Next: pgp_self_encrypt,  Prev: pgp_replyinline,  Up: Configuration Variables

9.3.232 pgp_retainable_sigs
---------------------------

     Type: boolean
     Default: no

   If _set_, signed and encrypted messages will consist of nested
‘multipart/signed’ and ‘multipart/encrypted’ body parts.

   This is useful for applications like encrypted and signed mailing
lists, where the outer layer (‘multipart/encrypted’) can be easily
removed, while the inner ‘multipart/signed’ part is retained.  (PGP
only)


File: mutt.info,  Node: pgp_self_encrypt,  Next: pgp_show_unusable,  Prev: pgp_retainable_sigs,  Up: Configuration Variables

9.3.233 pgp_self_encrypt
------------------------

     Type: boolean
     Default: yes

   When _set_, PGP encrypted messages will also be encrypted using the
key in $pgp_default_key (*note pgp_default_key::).  (PGP only)


File: mutt.info,  Node: pgp_show_unusable,  Next: pgp_sign_as,  Prev: pgp_self_encrypt,  Up: Configuration Variables

9.3.234 pgp_show_unusable
-------------------------

     Type: boolean
     Default: yes

   If _set_, mutt will display non-usable keys on the PGP key selection
menu.  This includes keys which have been revoked, have expired, or have
been marked as ‘disabled’ by the user.  (PGP only)


File: mutt.info,  Node: pgp_sign_as,  Next: pgp_sign_command,  Prev: pgp_show_unusable,  Up: Configuration Variables

9.3.235 pgp_sign_as
-------------------

     Type: string
     Default: (empty)

   If you have a different key pair to use for signing, you should set
this to the signing key.  Most people will only need to set
$pgp_default_key (*note pgp_default_key::).  It is recommended that you
use the keyid form to specify your key (e.g.  ‘0x00112233’).  (PGP only)


File: mutt.info,  Node: pgp_sign_command,  Next: pgp_sort_keys,  Prev: pgp_sign_as,  Up: Configuration Variables

9.3.236 pgp_sign_command
------------------------

     Type: string
     Default: (empty)

   This command is used to create the detached PGP signature for a
‘multipart/signed’ PGP/MIME body part.

   This is a format string, see the $pgp_decode_command (*note
pgp_decode_command::) command for possible ‘printf(3)’-like sequences.
(PGP only)


File: mutt.info,  Node: pgp_sort_keys,  Next: pgp_strict_enc,  Prev: pgp_sign_command,  Up: Configuration Variables

9.3.237 pgp_sort_keys
---------------------

     Type: sort order
     Default: address

   Specifies how the entries in the pgp menu are sorted.  The following
are legal values:

address                              sort alphabetically by user id
keyid                                sort alphabetically by key id
date                                 sort by key creation date
trust                                sort by the trust of the key

   If you prefer reverse order of the above values, prefix it with
‘reverse-’.  (PGP only)


File: mutt.info,  Node: pgp_strict_enc,  Next: pgp_timeout,  Prev: pgp_sort_keys,  Up: Configuration Variables

9.3.238 pgp_strict_enc
----------------------

     Type: boolean
     Default: yes

   If _set_, Mutt will automatically encode PGP/MIME signed messages as
quoted-printable.  Please note that unsetting this variable may lead to
problems with non-verifyable PGP signatures, so only change this if you
know what you are doing.  (PGP only)


File: mutt.info,  Node: pgp_timeout,  Next: pgp_use_gpg_agent,  Prev: pgp_strict_enc,  Up: Configuration Variables

9.3.239 pgp_timeout
-------------------

     Type: number (long)
     Default: 300

   The number of seconds after which a cached passphrase will expire if
not used.  (PGP only)


File: mutt.info,  Node: pgp_use_gpg_agent,  Next: pgp_verify_command,  Prev: pgp_timeout,  Up: Configuration Variables

9.3.240 pgp_use_gpg_agent
-------------------------

     Type: boolean
     Default: yes

   If _set_, mutt expects a ‘gpg-agent(1)’ process will handle private
key passphrase prompts.  If _unset_, mutt will prompt for the passphrase
and pass it via stdin to the pgp command.

   Note that as of version 2.1, GnuPG automatically spawns an agent and
requires the agent be used for passphrase management.  Since that
version is increasingly prevalent, this variable now defaults _set_.

   Mutt works with a GUI or curses pinentry program.  A TTY pinentry
should not be used.

   If you are using an older version of GnuPG without an agent running,
or another encryption program without an agent, you will need to _unset_
this variable.  (PGP only)


File: mutt.info,  Node: pgp_verify_command,  Next: pgp_verify_key_command,  Prev: pgp_use_gpg_agent,  Up: Configuration Variables

9.3.241 pgp_verify_command
--------------------------

     Type: string
     Default: (empty)

   This command is used to verify PGP signatures.

   This is a format string, see the $pgp_decode_command (*note
pgp_decode_command::) command for possible ‘printf(3)’-like sequences.
(PGP only)


File: mutt.info,  Node: pgp_verify_key_command,  Next: pipe_decode,  Prev: pgp_verify_command,  Up: Configuration Variables

9.3.242 pgp_verify_key_command
------------------------------

     Type: string
     Default: (empty)

   This command is used to verify key information from the key selection
menu.

   This is a format string, see the $pgp_decode_command (*note
pgp_decode_command::) command for possible ‘printf(3)’-like sequences.
(PGP only)


File: mutt.info,  Node: pipe_decode,  Next: pipe_decode_weed,  Prev: pgp_verify_key_command,  Up: Configuration Variables

9.3.243 pipe_decode
-------------------

     Type: boolean
     Default: no

   Used in connection with the ‘<pipe-message>’ function.  When _unset_,
Mutt will pipe the messages without any preprocessing.  When _set_, Mutt
will attempt to decode the messages first.

   Also see $pipe_decode_weed (*note pipe_decode_weed::), which controls
whether headers will be weeded when this is _set_.


File: mutt.info,  Node: pipe_decode_weed,  Next: pipe_sep,  Prev: pipe_decode,  Up: Configuration Variables

9.3.244 pipe_decode_weed
------------------------

     Type: boolean
     Default: yes

   For ‘<pipe-message>’, when $pipe_decode (*note pipe_decode::) is set,
this further controls whether Mutt will weed headers.


File: mutt.info,  Node: pipe_sep,  Next: pipe_split,  Prev: pipe_decode_weed,  Up: Configuration Variables

9.3.245 pipe_sep
----------------

     Type: string
     Default: ‘\n’

   The separator to add between messages when piping a list of tagged
messages to an external Unix command.


File: mutt.info,  Node: pipe_split,  Next: pop_auth_try_all,  Prev: pipe_sep,  Up: Configuration Variables

9.3.246 pipe_split
------------------

     Type: boolean
     Default: no

   Used in connection with the ‘<pipe-message>’ function following
‘<tag-prefix>’.  If this variable is _unset_, when piping a list of
tagged messages Mutt will concatenate the messages and will pipe them
all concatenated.  When _set_, Mutt will pipe the messages one by one.
In both cases the messages are piped in the current sorted order, and
the $pipe_sep (*note pipe_sep::) separator is added after each message.


File: mutt.info,  Node: pop_auth_try_all,  Next: pop_authenticators,  Prev: pipe_split,  Up: Configuration Variables

9.3.247 pop_auth_try_all
------------------------

     Type: boolean
     Default: yes

   If _set_, Mutt will try all available authentication methods.  When
_unset_, Mutt will only fall back to other authentication methods if the
previous methods are unavailable.  If a method is available but
authentication fails, Mutt will not connect to the POP server.


File: mutt.info,  Node: pop_authenticators,  Next: pop_checkinterval,  Prev: pop_auth_try_all,  Up: Configuration Variables

9.3.248 pop_authenticators
--------------------------

     Type: string
     Default: (empty)

   This is a colon-delimited list of authentication methods mutt may
attempt to use to log in to an POP server, in the order mutt should try
them.  Authentication methods are either ‘user’, ‘apop’ or any SASL
mechanism, e.g.  ‘digest-md5’, ‘gssapi’ or ‘cram-md5’.  This option is
case-insensitive.  If this option is _unset_ (the default) mutt will try
all available methods, in order from most-secure to least-secure.

   Example:


     set pop_authenticators="digest-md5:apop:user"


File: mutt.info,  Node: pop_checkinterval,  Next: pop_delete,  Prev: pop_authenticators,  Up: Configuration Variables

9.3.249 pop_checkinterval
-------------------------

     Type: number
     Default: 60

   This variable configures how often (in seconds) mutt should look for
new mail in the currently selected mailbox if it is a POP mailbox.


File: mutt.info,  Node: pop_delete,  Next: pop_host,  Prev: pop_checkinterval,  Up: Configuration Variables

9.3.250 pop_delete
------------------

     Type: quadoption
     Default: ask-no

   If _set_, Mutt will delete successfully downloaded messages from the
POP server when using the ‘<fetch-mail> (*note fetch-mail::)’ function.
When _unset_, Mutt will download messages but also leave them on the POP
server.


File: mutt.info,  Node: pop_host,  Next: pop_last,  Prev: pop_delete,  Up: Configuration Variables

9.3.251 pop_host
----------------

     Type: string
     Default: (empty)

   The name of your POP server for the ‘<fetch-mail> (*note
fetch-mail::)’ function.  You can also specify an alternative port,
username and password, i.e.:


     [pop[s]://][username[:password]@]popserver[:port]

   where ‘[...]’ denotes an optional part.


File: mutt.info,  Node: pop_last,  Next: pop_oauth_refresh_command,  Prev: pop_host,  Up: Configuration Variables

9.3.252 pop_last
----------------

     Type: boolean
     Default: no

   If this variable is _set_, mutt will try to use the ‘‘LAST’’ POP
command for retrieving only unread messages from the POP server when
using the ‘<fetch-mail> (*note fetch-mail::)’ function.


File: mutt.info,  Node: pop_oauth_refresh_command,  Next: pop_pass,  Prev: pop_last,  Up: Configuration Variables

9.3.253 pop_oauth_refresh_command
---------------------------------

     Type: string
     Default: (empty)

   The command to run to generate an OAUTH refresh token for authorizing
your connection to your POP server.  This command will be run on every
connection attempt that uses the OAUTHBEARER authentication mechanism.
See ‘oauth (*note OAUTHBEARER Support::)’ for details.


File: mutt.info,  Node: pop_pass,  Next: pop_reconnect,  Prev: pop_oauth_refresh_command,  Up: Configuration Variables

9.3.254 pop_pass
----------------

     Type: string
     Default: (empty)

   Specifies the password for your POP account.  If _unset_, Mutt will
prompt you for your password when you open a POP mailbox.

   *Warning*: you should only use this option when you are on a fairly
secure machine, because the superuser can read your muttrc even if you
are the only one who can read the file.


File: mutt.info,  Node: pop_reconnect,  Next: pop_user,  Prev: pop_pass,  Up: Configuration Variables

9.3.255 pop_reconnect
---------------------

     Type: quadoption
     Default: ask-yes

   Controls whether or not Mutt will try to reconnect to the POP server
if the connection is lost.


File: mutt.info,  Node: pop_user,  Next: post_indent_string,  Prev: pop_reconnect,  Up: Configuration Variables

9.3.256 pop_user
----------------

     Type: string
     Default: (empty)

   Your login name on the POP server.

   This variable defaults to your user name on the local machine.


File: mutt.info,  Node: post_indent_string,  Next: postpone,  Prev: pop_user,  Up: Configuration Variables

9.3.257 post_indent_string
--------------------------

     Type: string
     Default: (empty)

   Similar to the $attribution (*note attribution::) variable, Mutt will
append this string after the inclusion of a message which is being
replied to.  For a full listing of defined ‘printf(3)’-like sequences
see the section on $index_format (*note index_format::).


File: mutt.info,  Node: postpone,  Next: postponed,  Prev: post_indent_string,  Up: Configuration Variables

9.3.258 postpone
----------------

     Type: quadoption
     Default: ask-yes

   Controls whether or not messages are saved in the $postponed (*note
postponed::) mailbox when you elect not to send immediately.

   Also see the $recall (*note recall::) variable.


File: mutt.info,  Node: postponed,  Next: postpone_encrypt,  Prev: postpone,  Up: Configuration Variables

9.3.259 postponed
-----------------

     Type: path
     Default: ‘~/postponed’

   Mutt allows you to indefinitely ‘postpone (*note postpone::) sending
a message’ which you are editing.  When you choose to postpone a
message, Mutt saves it in the mailbox specified by this variable.

   Also see the $postpone (*note postpone::) variable.


File: mutt.info,  Node: postpone_encrypt,  Next: postpone_encrypt_as,  Prev: postponed,  Up: Configuration Variables

9.3.260 postpone_encrypt
------------------------

     Type: boolean
     Default: no

   When _set_, postponed messages that are marked for encryption will be
self-encrypted.  Mutt will first try to encrypt using the value
specified in $pgp_default_key (*note pgp_default_key::) or
$smime_default_key (*note smime_default_key::).  If those are not set,
it will try the deprecated $postpone_encrypt_as (*note
postpone_encrypt_as::).  (Crypto only)


File: mutt.info,  Node: postpone_encrypt_as,  Next: preconnect,  Prev: postpone_encrypt,  Up: Configuration Variables

9.3.261 postpone_encrypt_as
---------------------------

     Type: string
     Default: (empty)

   This is a deprecated fall-back variable for $postpone_encrypt (*note
postpone_encrypt::).  Please use $pgp_default_key (*note
pgp_default_key::) or $smime_default_key (*note smime_default_key::).
(Crypto only)


File: mutt.info,  Node: preconnect,  Next: print,  Prev: postpone_encrypt_as,  Up: Configuration Variables

9.3.262 preconnect
------------------

     Type: string
     Default: (empty)

   If _set_, a shell command to be executed if mutt fails to establish a
connection to the server.  This is useful for setting up secure
connections, e.g.  with ‘ssh(1)’.  If the command returns a nonzero
status, mutt gives up opening the server.  Example:


     set preconnect="ssh -f -q -L 1234:mailhost.net:143 mailhost.net \
     sleep 20 < /dev/null > /dev/null"

   Mailbox ‘foo’ on ‘mailhost.net’ can now be reached as
‘{localhost:1234}foo’.

   Note: For this example to work, you must be able to log in to the
remote machine without having to enter a password.


File: mutt.info,  Node: print,  Next: print_command,  Prev: preconnect,  Up: Configuration Variables

9.3.263 print
-------------

     Type: quadoption
     Default: ask-no

   Controls whether or not Mutt really prints messages.  This is set to
‘ask-no’ by default, because some people accidentally hit ‘p’ often.


File: mutt.info,  Node: print_command,  Next: print_decode,  Prev: print,  Up: Configuration Variables

9.3.264 print_command
---------------------

     Type: path
     Default: ‘lpr’

   This specifies the command pipe that should be used to print
messages.


File: mutt.info,  Node: print_decode,  Next: print_decode_weed,  Prev: print_command,  Up: Configuration Variables

9.3.265 print_decode
--------------------

     Type: boolean
     Default: yes

   Used in connection with the ‘<print-message>’ function.  If this
option is _set_, the message is decoded before it is passed to the
external command specified by $print_command (*note print_command::).
If this option is _unset_, no processing will be applied to the message
when printing it.  The latter setting may be useful if you are using
some advanced printer filter which is able to properly format e-mail
messages for printing.

   Also see $print_decode_weed (*note print_decode_weed::), which
controls whether headers will be weeded when this is _set_.


File: mutt.info,  Node: print_decode_weed,  Next: print_split,  Prev: print_decode,  Up: Configuration Variables

9.3.266 print_decode_weed
-------------------------

     Type: boolean
     Default: yes

   For ‘<print-message>’, when $print_decode (*note print_decode::) is
set, this further controls whether Mutt will weed headers.


File: mutt.info,  Node: print_split,  Next: prompt_after,  Prev: print_decode_weed,  Up: Configuration Variables

9.3.267 print_split
-------------------

     Type: boolean
     Default: no

   Used in connection with the ‘<print-message>’ function.  If this
option is _set_, the command specified by $print_command (*note
print_command::) is executed once for each message which is to be
printed.  If this option is _unset_, the command specified by
$print_command (*note print_command::) is executed only once, and all
the messages are concatenated, with a form feed as the message
separator.

   Those who use the ‘enscript’(1) program’s mail-printing mode will
most likely want to _set_ this option.


File: mutt.info,  Node: prompt_after,  Next: query_command,  Prev: print_split,  Up: Configuration Variables

9.3.268 prompt_after
--------------------

     Type: boolean
     Default: yes

   If you use an _external_ $pager (*note pager::), setting this
variable will cause Mutt to prompt you for a command when the pager
exits rather than returning to the index menu.  If _unset_, Mutt will
return to the index menu when the external pager exits.


File: mutt.info,  Node: query_command,  Next: query_format,  Prev: prompt_after,  Up: Configuration Variables

9.3.269 query_command
---------------------

     Type: path
     Default: (empty)

   This specifies the command Mutt will use to make external address
queries.  The string may contain a ‘%s’, which will be substituted with
the query string the user types.  Mutt will add quotes around the string
substituted for ‘%s’ automatically according to shell quoting rules, so
you should avoid adding your own.  If no ‘%s’ is found in the string,
Mutt will append the user’s query to the end of the string.  See ‘query
(*note External Address Queries::)’ for more information.


File: mutt.info,  Node: query_format,  Next: quit,  Prev: query_command,  Up: Configuration Variables

9.3.270 query_format
--------------------

     Type: string
     Default: ‘%4c %t %-25.25a %-25.25n %?e?(%e)?’

   This variable describes the format of the ‘query’ menu.  The
following ‘printf(3)’-style sequences are understood:

%a                                   destination address
%c                                   current entry number
%e                                   extra information *
%n                                   destination name
%t                                   ‘*’ if current entry is tagged, a
                                     space otherwise
%>X                                  right justify the rest of the
                                     string and pad with ‘X’
%|X                                  pad to the end of the line with
                                     ‘X’
%*X                                  soft-fill with character ‘X’ as
                                     pad

   For an explanation of ‘soft-fill’, see the $index_format (*note
index_format::) documentation.

   * = can be optionally printed if nonzero, see the $status_format
(*note status_format::) documentation.


File: mutt.info,  Node: quit,  Next: quote_regexp,  Prev: query_format,  Up: Configuration Variables

9.3.271 quit
------------

     Type: quadoption
     Default: yes

   This variable controls whether ‘quit’ and ‘exit’ actually quit from
mutt.  If this option is _set_, they do quit, if it is _unset_, they
have no effect, and if it is set to _ask-yes_ or _ask-no_, you are
prompted for confirmation when you try to quit.


File: mutt.info,  Node: quote_regexp,  Next: read_inc,  Prev: quit,  Up: Configuration Variables

9.3.272 quote_regexp
--------------------

     Type: regular expression
     Default: ‘^([ \t]*[|>:}#])+’

   A regular expression used in the internal pager to determine quoted
sections of text in the body of a message.  Quoted text may be filtered
out using the ‘<toggle-quoted>’ command, or colored according to the
‘color quoted’ family of directives.

   Higher levels of quoting may be colored differently (‘color quoted1’,
‘color quoted2’, etc.).  The quoting level is determined by removing the
last character from the matched text and recursively reapplying the
regular expression until it fails to produce a match.

   Match detection may be overridden by the $smileys (*note smileys::)
regular expression.


File: mutt.info,  Node: read_inc,  Next: read_only,  Prev: quote_regexp,  Up: Configuration Variables

9.3.273 read_inc
----------------

     Type: number
     Default: 10

   If set to a value greater than 0, Mutt will display which message it
is currently on when reading a mailbox or when performing search actions
such as search and limit.  The message is printed after this many
messages have been read or searched (e.g., if set to 25, Mutt will print
a message when it is at message 25, and then again when it gets to
message 50).  This variable is meant to indicate progress when reading
or searching large mailboxes which may take some time.  When set to 0,
only a single message will appear before the reading the mailbox.

   Also see the $write_inc (*note write_inc::), $net_inc (*note
net_inc::) and $time_inc (*note time_inc::) variables and the ‘tuning
(*note Performance Tuning::)’ section of the manual for performance
considerations.


File: mutt.info,  Node: read_only,  Next: realname,  Prev: read_inc,  Up: Configuration Variables

9.3.274 read_only
-----------------

     Type: boolean
     Default: no

   If _set_, all folders are opened in read-only mode.


File: mutt.info,  Node: realname,  Next: recall,  Prev: read_only,  Up: Configuration Variables

9.3.275 realname
----------------

     Type: string
     Default: (empty)

   This variable specifies what ‘real’ or ‘personal’ name should be used
when sending messages.

   By default, this is the GECOS field from ‘/etc/passwd’.  Note that
this variable will _not_ be used when the user has set a real name in
the $from (*note from::) variable.


File: mutt.info,  Node: recall,  Next: record,  Prev: realname,  Up: Configuration Variables

9.3.276 recall
--------------

     Type: quadoption
     Default: ask-yes

   Controls whether or not Mutt recalls postponed messages when
composing a new message.

   Setting this variable to _yes_ is not generally useful, and thus not
recommended.  Note that the ‘<recall-message>’ function can be used to
manually recall postponed messages.

   Also see $postponed (*note postponed::) variable.


File: mutt.info,  Node: record,  Next: reflow_space_quotes,  Prev: recall,  Up: Configuration Variables

9.3.277 record
--------------

     Type: path
     Default: ‘~/sent’

   This specifies the file into which your outgoing messages should be
appended.  (This is meant as the primary method for saving a copy of
your messages, but another way to do this is using the ‘my_hdr (*note
User-Defined Headers::)’ command to create a ‘Bcc:’ field with your
email address in it.)

   The value of _$record (*note record::)_ is overridden by the
$force_name (*note force_name::) and $save_name (*note save_name::)
variables, and the ‘fcc-hook (*note Specify Default Fcc; Mailbox When
Composing::)’ command.  Also see $copy (*note copy::) and $write_bcc
(*note write_bcc::).

   Multiple mailboxes may be specified if $fcc_delimiter (*note
fcc_delimiter::) is set to a string delimiter.


File: mutt.info,  Node: reflow_space_quotes,  Next: reflow_text,  Prev: record,  Up: Configuration Variables

9.3.278 reflow_space_quotes
---------------------------

     Type: boolean
     Default: yes

   This option controls how quotes from format=flowed messages are
displayed in the pager and when replying (with $text_flowed (*note
text_flowed::) _unset_).  When set, this option adds spaces after each
level of quote marks, turning ">>>foo" into "> > > foo".

   *Note:* If $reflow_text (*note reflow_text::) is _unset_, this option
has no effect.  Also, this option does not affect replies when
$text_flowed (*note text_flowed::) is _set_.


File: mutt.info,  Node: reflow_text,  Next: reflow_wrap,  Prev: reflow_space_quotes,  Up: Configuration Variables

9.3.279 reflow_text
-------------------

     Type: boolean
     Default: yes

   When _set_, Mutt will reformat paragraphs in text/plain parts marked
format=flowed.  If _unset_, Mutt will display paragraphs unaltered from
how they appear in the message body.  See RFC3676 for details on the
_format=flowed_ format.

   Also see $reflow_wrap (*note reflow_wrap::), and $wrap (*note
wrap::).


File: mutt.info,  Node: reflow_wrap,  Next: reply_regexp,  Prev: reflow_text,  Up: Configuration Variables

9.3.280 reflow_wrap
-------------------

     Type: number
     Default: 78

   This variable controls the maximum paragraph width when reformatting
text/plain parts when $reflow_text (*note reflow_text::) is _set_.  When
the value is 0, paragraphs will be wrapped at the terminal’s right
margin.  A positive value sets the paragraph width relative to the left
margin.  A negative value set the paragraph width relative to the right
margin.

   Also see $wrap (*note wrap::).


File: mutt.info,  Node: reply_regexp,  Next: reply_self,  Prev: reflow_wrap,  Up: Configuration Variables

9.3.281 reply_regexp
--------------------

     Type: regular expression (localized)
     Default: ‘^(re)(\\[[0-9]+\\])*:[ \t]*’

   A regular expression used to recognize reply messages when threading
and replying.  The default value corresponds to the standard Latin "Re:"
prefix.

   This value may have been localized by the translator for your locale,
adding other prefixes that are common in the locale.  You can add your
own prefixes by appending inside ‘"^(re)"’.  For example: ‘"^(re|se)"’
or ‘"^(re|aw|se)"’.

   The second parenthesized expression matches zero or more bracketed
numbers following the prefix, such as ‘"Re[1]: "’.  The initial ‘"\\["’
means a literal left-bracket character.  Note the backslash must be
doubled when used inside a double quoted string in the muttrc.
‘"[0-9]+"’ means one or more numbers.  ‘"\\]"’ means a literal
right-bracket.  Finally the whole parenthesized expression has a ‘"*"’
suffix, meaning it can occur zero or more times.

   The last part matches a colon followed by an optional space or tab.
Note ‘"\t"’ is converted to a literal tab inside a double quoted string.
If you use a single quoted string, you would have to type an actual tab
character, and would need to convert the double-backslashes to single
backslashes.

   Note: the result of this regexp match against the subject is stored
in the header cache.  Mutt isn’t smart enough to invalidate a header
cache entry based on changing $reply_regexp (*note reply_regexp::), so
if you aren’t seeing correct values in the index, try temporarily
turning off the header cache.  If that fixes the problem, then once the
variable is set to your liking, remove your stale header cache files and
turn the header cache back on.


File: mutt.info,  Node: reply_self,  Next: reply_to,  Prev: reply_regexp,  Up: Configuration Variables

9.3.282 reply_self
------------------

     Type: boolean
     Default: no

   If _unset_ and you are replying to a message sent by you, Mutt will
assume that you want to reply to the recipients of that message rather
than to yourself.

   Also see the ‘alternates (*note Alternative Addresses::)’ command.


File: mutt.info,  Node: reply_to,  Next: resolve,  Prev: reply_self,  Up: Configuration Variables

9.3.283 reply_to
----------------

     Type: quadoption
     Default: ask-yes

   If _set_, when replying to a message, Mutt will use the address
listed in the Reply-to: header as the recipient of the reply.  If
_unset_, it will use the address in the From: header field instead.
This option is useful for reading a mailing list that sets the Reply-To:
header field to the list address and you want to send a private message
to the author of a message.


File: mutt.info,  Node: resolve,  Next: resume_draft_files,  Prev: reply_to,  Up: Configuration Variables

9.3.284 resolve
---------------

     Type: boolean
     Default: yes

   When _set_, the cursor will be automatically advanced to the next
(possibly undeleted) message whenever a command that modifies the
current message is executed.


File: mutt.info,  Node: resume_draft_files,  Next: resume_edited_draft_files,  Prev: resolve,  Up: Configuration Variables

9.3.285 resume_draft_files
--------------------------

     Type: boolean
     Default: no

   If _set_, draft files (specified by ‘-H’ on the command line) are
processed similarly to when resuming a postponed message.  Recipients
are not prompted for; send-hooks are not evaluated; no alias expansion
takes place; user-defined headers and signatures are not added to the
message.


File: mutt.info,  Node: resume_edited_draft_files,  Next: reverse_alias,  Prev: resume_draft_files,  Up: Configuration Variables

9.3.286 resume_edited_draft_files
---------------------------------

     Type: boolean
     Default: yes

   If _set_, draft files previously edited (via ‘-E -H’ on the command
line) will have $resume_draft_files (*note resume_draft_files::)
automatically set when they are used as a draft file again.

   The first time a draft file is saved, mutt will add a header,
X-Mutt-Resume-Draft to the saved file.  The next time the draft file is
read in, if mutt sees the header, it will set $resume_draft_files (*note
resume_draft_files::).

   This option is designed to prevent multiple signatures, user-defined
headers, and other processing effects from being made multiple times to
the draft file.


File: mutt.info,  Node: reverse_alias,  Next: reverse_name,  Prev: resume_edited_draft_files,  Up: Configuration Variables

9.3.287 reverse_alias
---------------------

     Type: boolean
     Default: no

   This variable controls whether or not Mutt will display the
‘personal’ name from your aliases in the index menu if it finds an alias
that matches the message’s sender.  For example, if you have the
following alias:


     alias juser abd30425@somewhere.net (Joe User)

   and then you receive mail which contains the following header:


     From: abd30425@somewhere.net

   It would be displayed in the index menu as ‘Joe User’ instead of
‘abd30425@somewhere.net.’ This is useful when the person’s e-mail
address is not human friendly.


File: mutt.info,  Node: reverse_name,  Next: reverse_realname,  Prev: reverse_alias,  Up: Configuration Variables

9.3.288 reverse_name
--------------------

     Type: boolean
     Default: no

   It may sometimes arrive that you receive mail to a certain machine,
move the messages to another machine, and reply to some the messages
from there.  If this variable is _set_, the default _From:_ line of the
reply messages is built using the address where you received the
messages you are replying to *if* that address matches your ‘alternates
(*note Alternative Addresses::)’.  If the variable is _unset_, or the
address that would be used doesn’t match your ‘alternates (*note
Alternative Addresses::)’, the _From:_ line will use your address on the
current machine.

   Also see the ‘alternates (*note Alternative Addresses::)’ command and
$reverse_realname (*note reverse_realname::).


File: mutt.info,  Node: reverse_realname,  Next: rfc2047_parameters,  Prev: reverse_name,  Up: Configuration Variables

9.3.289 reverse_realname
------------------------

     Type: boolean
     Default: yes

   This variable fine-tunes the behavior of the $reverse_name (*note
reverse_name::) feature.

   When it is _unset_, Mutt will remove the real name part of a matching
address.  This allows the use of the email address without having to
also use what the sender put in the real name field.

   When it is _set_, Mutt will use the matching address as-is.

   In either case, a missing real name will be filled in afterwards
using the value of $realname (*note realname::).


File: mutt.info,  Node: rfc2047_parameters,  Next: save_address,  Prev: reverse_realname,  Up: Configuration Variables

9.3.290 rfc2047_parameters
--------------------------

     Type: boolean
     Default: yes

   When this variable is _set_, Mutt will decode RFC2047-encoded MIME
parameters.  You want to set this variable when mutt suggests you to
save attachments to files named like:


     =?iso-8859-1?Q?file=5F=E4=5F991116=2Ezip?=

   When this variable is _set_ interactively, the change won’t be active
until you change folders.

   Note that this use of RFC2047’s encoding is explicitly prohibited by
the standard, but nevertheless encountered in the wild.

   Also note that setting this parameter will _not_ have the effect that
mutt _generates_ this kind of encoding.  Instead, mutt will
unconditionally use the encoding specified in RFC2231.


File: mutt.info,  Node: save_address,  Next: save_empty,  Prev: rfc2047_parameters,  Up: Configuration Variables

9.3.291 save_address
--------------------

     Type: boolean
     Default: no

   If _set_, mutt will take the sender’s full address when choosing a
default folder for saving a mail.  If $save_name (*note save_name::) or
$force_name (*note force_name::) is _set_ too, the selection of the Fcc
folder will be changed as well.


File: mutt.info,  Node: save_empty,  Next: save_history,  Prev: save_address,  Up: Configuration Variables

9.3.292 save_empty
------------------

     Type: boolean
     Default: yes

   When _unset_, mailboxes which contain no saved messages will be
removed when closed (the exception is $spoolfile (*note spoolfile::)
which is never removed).  If _set_, mailboxes are never removed.

   *Note:* This only applies to mbox and MMDF folders, Mutt does not
delete MH and Maildir directories.


File: mutt.info,  Node: save_history,  Next: save_name,  Prev: save_empty,  Up: Configuration Variables

9.3.293 save_history
--------------------

     Type: number
     Default: 0

   This variable controls the size of the history (per category) saved
in the $history_file (*note history_file::) file.


File: mutt.info,  Node: save_name,  Next: score,  Prev: save_history,  Up: Configuration Variables

9.3.294 save_name
-----------------

     Type: boolean
     Default: no

   This variable controls how copies of outgoing messages are saved.
When _set_, a check is made to see if a mailbox specified by the
recipient address exists (this is done by searching for a mailbox in the
$folder (*note folder::) directory with the _username_ part of the
recipient address).  If the mailbox exists, the outgoing message will be
saved to that mailbox, otherwise the message is saved to the $record
(*note record::) mailbox.

   Also see the $force_name (*note force_name::) variable.


File: mutt.info,  Node: score,  Next: score_threshold_delete,  Prev: save_name,  Up: Configuration Variables

9.3.295 score
-------------

     Type: boolean
     Default: yes

   When this variable is _unset_, scoring is turned off.  This can be
useful to selectively disable scoring for certain folders when the
$score_threshold_delete (*note score_threshold_delete::) variable and
related are used.


File: mutt.info,  Node: score_threshold_delete,  Next: score_threshold_flag,  Prev: score,  Up: Configuration Variables

9.3.296 score_threshold_delete
------------------------------

     Type: number
     Default: -1

   Messages which have been assigned a score equal to or lower than the
value of this variable are automatically marked for deletion by mutt.
Since mutt scores are always greater than or equal to zero, the default
setting of this variable will never mark a message for deletion.


File: mutt.info,  Node: score_threshold_flag,  Next: score_threshold_read,  Prev: score_threshold_delete,  Up: Configuration Variables

9.3.297 score_threshold_flag
----------------------------

     Type: number
     Default: 9999

   Messages which have been assigned a score greater than or equal to
this variable’s value are automatically marked "flagged".


File: mutt.info,  Node: score_threshold_read,  Next: search_context,  Prev: score_threshold_flag,  Up: Configuration Variables

9.3.298 score_threshold_read
----------------------------

     Type: number
     Default: -1

   Messages which have been assigned a score equal to or lower than the
value of this variable are automatically marked as read by mutt.  Since
mutt scores are always greater than or equal to zero, the default
setting of this variable will never mark a message read.


File: mutt.info,  Node: search_context,  Next: send_charset,  Prev: score_threshold_read,  Up: Configuration Variables

9.3.299 search_context
----------------------

     Type: number
     Default: 0

   For the pager, this variable specifies the number of lines shown
before search results.  By default, search results will be top-aligned.


File: mutt.info,  Node: send_charset,  Next: send_multipart_alternative,  Prev: search_context,  Up: Configuration Variables

9.3.300 send_charset
--------------------

     Type: string
     Default: ‘us-ascii:iso-8859-1:utf-8’

   A colon-delimited list of character sets for outgoing messages.  Mutt
will use the first character set into which the text can be converted
exactly.  If your $charset (*note charset::) is not ‘iso-8859-1’ and
recipients may not understand ‘UTF-8’, it is advisable to include in the
list an appropriate widely used standard character set (such as
‘iso-8859-2’, ‘koi8-r’ or ‘iso-2022-jp’) either instead of or after
‘iso-8859-1’.

   In case the text cannot be converted into one of these exactly, mutt
uses $charset (*note charset::) as a fallback.


File: mutt.info,  Node: send_multipart_alternative,  Next: send_multipart_alternative_filter,  Prev: send_charset,  Up: Configuration Variables

9.3.301 send_multipart_alternative
----------------------------------

     Type: quadoption
     Default: no

   If _set_, Mutt will generate a multipart/alternative container and an
alternative part using the filter script specified in
$send_multipart_alternative_filter (*note
send_multipart_alternative_filter::).  See the section ‘MIME
Multipart/Alternative’ (alternative-order (*note MIME
Multipart/Alternative::)).

   Note that enabling multipart/alternative is not compatible with
inline PGP encryption.  Mutt will prompt to use PGP/MIME in that case.


File: mutt.info,  Node: send_multipart_alternative_filter,  Next: sendmail,  Prev: send_multipart_alternative,  Up: Configuration Variables

9.3.302 send_multipart_alternative_filter
-----------------------------------------

     Type: path
     Default: (empty)

   This specifies a filter script, which will convert the main
(composed) message of the email to an alternative format.  The message
will be piped to the filter’s stdin.  The expected output of the filter
is the generated mime type, e.g.  text/html, followed by a blank line,
and then the converted content.  See the section ‘MIME
Multipart/Alternative’ (alternative-order (*note MIME
Multipart/Alternative::)).


File: mutt.info,  Node: sendmail,  Next: sendmail_wait,  Prev: send_multipart_alternative_filter,  Up: Configuration Variables

9.3.303 sendmail
----------------

     Type: path
     Default: ‘/usr/sbin/sendmail -oem -oi’

   Specifies the program and arguments used to deliver mail sent by
Mutt.  Mutt expects that the specified program interprets additional
arguments as recipient addresses.  Mutt appends all recipients after
adding a ‘--’ delimiter (if not already present).  Additional flags,
such as for $use_8bitmime (*note use_8bitmime::), $use_envelope_from
(*note use_envelope_from::), $dsn_notify (*note dsn_notify::), or
$dsn_return (*note dsn_return::) will be added before the delimiter.

   *Note:* This command is invoked differently from most other commands
in Mutt.  It is tokenized by space, and invoked directly via ‘execvp(3)’
with an array of arguments - so commands or arguments with spaces in
them are not supported.  The shell is not used to run the command, so
shell quoting is also not supported.

   *See also:* $write_bcc (*note write_bcc::).


File: mutt.info,  Node: sendmail_wait,  Next: shell,  Prev: sendmail,  Up: Configuration Variables

9.3.304 sendmail_wait
---------------------

     Type: number
     Default: 0

   Specifies the number of seconds to wait for the $sendmail (*note
sendmail::) process to finish before giving up and putting delivery in
the background.

   Mutt interprets the value of this variable as follows:

>0                                   number of seconds to wait for
                                     sendmail to finish before
                                     continuing
0                                    wait forever for sendmail to
                                     finish
<0                                   always put sendmail in the
                                     background without waiting

   Note that if you specify a value other than 0, the output of the
child process will be put in a temporary file.  If there is some error,
you will be informed as to where to find the output.


File: mutt.info,  Node: shell,  Next: sidebar_delim_chars,  Prev: sendmail_wait,  Up: Configuration Variables

9.3.305 shell
-------------

     Type: path
     Default: (empty)

   Command to use when spawning a subshell.  By default, the user’s
login shell from ‘/etc/passwd’ is used.


File: mutt.info,  Node: sidebar_delim_chars,  Next: sidebar_divider_char,  Prev: shell,  Up: Configuration Variables

9.3.306 sidebar_delim_chars
---------------------------

     Type: string
     Default: ‘/.’

   This contains the list of characters which you would like to treat as
folder separators for displaying paths in the sidebar.

   Local mail is often arranged in directories: ‘dir1/dir2/mailbox’.


     set sidebar_delim_chars='/'

   IMAP mailboxes are often named: ‘folder1.folder2.mailbox’.


     set sidebar_delim_chars='.'

   *See also:* $sidebar_short_path (*note sidebar_short_path::),
$sidebar_folder_indent (*note sidebar_folder_indent::),
$sidebar_indent_string (*note sidebar_indent_string::).


File: mutt.info,  Node: sidebar_divider_char,  Next: sidebar_folder_indent,  Prev: sidebar_delim_chars,  Up: Configuration Variables

9.3.307 sidebar_divider_char
----------------------------

     Type: string
     Default: ‘|’

   This specifies the characters to be drawn between the sidebar (when
visible) and the other Mutt panels.  ASCII and Unicode line-drawing
characters are supported.


File: mutt.info,  Node: sidebar_folder_indent,  Next: sidebar_format,  Prev: sidebar_divider_char,  Up: Configuration Variables

9.3.308 sidebar_folder_indent
-----------------------------

     Type: boolean
     Default: no

   Set this to indent mailboxes in the sidebar.

   *See also:* $sidebar_short_path (*note sidebar_short_path::),
$sidebar_indent_string (*note sidebar_indent_string::),
$sidebar_delim_chars (*note sidebar_delim_chars::).


File: mutt.info,  Node: sidebar_format,  Next: sidebar_indent_string,  Prev: sidebar_folder_indent,  Up: Configuration Variables

9.3.309 sidebar_format
----------------------

     Type: string
     Default: ‘%B%*  %n’

   This variable allows you to customize the sidebar display.  This
string is similar to $index_format (*note index_format::), but has its
own set of ‘printf(3)’-like sequences:

%B                                   Name of the mailbox
%S                                   * Size of mailbox (total number of
                                     messages)
%N                                   * Number of unread messages in the
                                     mailbox
%n                                   N if mailbox has new mail, blank
                                     otherwise
%F                                   * Number of Flagged messages in
                                     the mailbox
%!                                   ‘!’ : one flagged message; ‘!!’ :
                                     two flagged messages; ‘n!’ : n
                                     flagged messages (for n > 2).
                                     Otherwise prints nothing.
%d                                   * @ Number of deleted messages
%L                                   * @ Number of messages after
                                     limiting
%t                                   * @ Number of tagged messages
%>X                                  right justify the rest of the
                                     string and pad with ‘X’
%|X                                  pad to the end of the line with
                                     ‘X’
%*X                                  soft-fill with character ‘X’ as
                                     pad

   * = Can be optionally printed if nonzero @ = Only applicable to the
current folder

   In order to use %S, %N, %F, and %!, $mail_check_stats (*note
mail_check_stats::) must be _set_.  When thus set, a suggested value for
this option is "%B%?F? [%F]?%* %?N?%N/?%S".


File: mutt.info,  Node: sidebar_indent_string,  Next: sidebar_new_mail_only,  Prev: sidebar_format,  Up: Configuration Variables

9.3.310 sidebar_indent_string
-----------------------------

     Type: string
     Default: ‘  ’

   This specifies the string that is used to indent mailboxes in the
sidebar.  It defaults to two spaces.

   *See also:* $sidebar_short_path (*note sidebar_short_path::),
$sidebar_folder_indent (*note sidebar_folder_indent::),
$sidebar_delim_chars (*note sidebar_delim_chars::).


File: mutt.info,  Node: sidebar_new_mail_only,  Next: sidebar_next_new_wrap,  Prev: sidebar_indent_string,  Up: Configuration Variables

9.3.311 sidebar_new_mail_only
-----------------------------

     Type: boolean
     Default: no

   When set, the sidebar will only display mailboxes containing new, or
flagged, mail.

   *See also:* sidebar_whitelist (*note Commands <1>::).


File: mutt.info,  Node: sidebar_next_new_wrap,  Next: sidebar_relative_shortpath_indent,  Prev: sidebar_new_mail_only,  Up: Configuration Variables

9.3.312 sidebar_next_new_wrap
-----------------------------

     Type: boolean
     Default: no

   When set, the ‘<sidebar-next-new>’ command will not stop and the end
of the list of mailboxes, but wrap around to the beginning.  The
‘<sidebar-prev-new>’ command is similarly affected, wrapping around to
the end of the list.


File: mutt.info,  Node: sidebar_relative_shortpath_indent,  Next: sidebar_short_path,  Prev: sidebar_next_new_wrap,  Up: Configuration Variables

9.3.313 sidebar_relative_shortpath_indent
-----------------------------------------

     Type: boolean
     Default: no

   When set, this option changes how $sidebar_short_path (*note
sidebar_short_path::) and $sidebar_folder_indent (*note
sidebar_folder_indent::) perform shortening and indentation: both will
look at the previous sidebar entries and shorten/indent relative to the
most recent parent.

   An example of this option set/unset for mailboxes listed in this
order, with $sidebar_short_path (*note sidebar_short_path::)=yes,
$sidebar_folder_indent (*note sidebar_folder_indent::)=yes, and
$sidebar_indent_string (*note sidebar_indent_string::)="→":

*mailbox*                            *set**unset*
‘=a.b’                               ‘=a.b’‘→b’
‘=a.b.c.d’                           ‘→c.d’‘→→→d’
‘=a.b.e’                             ‘→e’‘→→e’

   The second line illustrates most clearly.  With this option set,
‘=a.b.c.d’ is shortened relative to ‘=a.b’, becoming ‘c.d’; it is also
indented one place relative to ‘=a.b’.  With this option unset
‘=a.b.c.d’ is always shortened to the last part of the mailbox, ‘d’ and
is indented three places, with respect to $folder (*note folder::)
(represented by ’=’).

   When set, the third line will also be indented and shortened relative
to the first line.


File: mutt.info,  Node: sidebar_short_path,  Next: sidebar_sort_method,  Prev: sidebar_relative_shortpath_indent,  Up: Configuration Variables

9.3.314 sidebar_short_path
--------------------------

     Type: boolean
     Default: no

   By default the sidebar will show the mailbox’s path, relative to the
$folder (*note folder::) variable.  Setting ‘sidebar_shortpath=yes’ will
shorten the names relative to the previous name.  Here’s an example:

*shortpath=no*                       *shortpath=yes**shortpath=yes,
                                     folderindent=yes, indentstr=".."*
‘fruit’                              ‘fruit’‘fruit’
‘fruit.apple’                        ‘apple’‘..apple’
‘fruit.banana’                       ‘banana’‘..banana’
‘fruit.cherry’                       ‘cherry’‘..cherry’

   *See also:* $sidebar_delim_chars (*note sidebar_delim_chars::),
$sidebar_folder_indent (*note sidebar_folder_indent::),
$sidebar_indent_string (*note sidebar_indent_string::).


File: mutt.info,  Node: sidebar_sort_method,  Next: sidebar_use_mailbox_shortcuts,  Prev: sidebar_short_path,  Up: Configuration Variables

9.3.315 sidebar_sort_method
---------------------------

     Type: sort order
     Default: unsorted

   Specifies how to sort mailbox entries in the sidebar.  By default,
the entries are sorted alphabetically.  Valid values:

   • alpha (alphabetically)

   • count (all message count)

   • flagged (flagged message count)

   • name (alphabetically)

   • new (unread message count)

   • path (alphabetically)

   • unread (unread message count)

   • unsorted

   You may optionally use the ‘reverse-’ prefix to specify reverse
sorting order (example: ‘‘set sidebar_sort_method=reverse-alpha’’).


File: mutt.info,  Node: sidebar_use_mailbox_shortcuts,  Next: sidebar_visible,  Prev: sidebar_sort_method,  Up: Configuration Variables

9.3.316 sidebar_use_mailbox_shortcuts
-------------------------------------

     Type: boolean
     Default: no

   When set, sidebar mailboxes will be displayed with mailbox shortcut
prefixes "=" or "~".

   When unset, the sidebar will trim off a matching $folder (*note
folder::) prefix but otherwise not use mailbox shortcuts.


File: mutt.info,  Node: sidebar_visible,  Next: sidebar_width,  Prev: sidebar_use_mailbox_shortcuts,  Up: Configuration Variables

9.3.317 sidebar_visible
-----------------------

     Type: boolean
     Default: no

   This specifies whether or not to show sidebar.  The sidebar shows a
list of all your mailboxes.

   *See also:* $sidebar_format (*note sidebar_format::), $sidebar_width
(*note sidebar_width::)


File: mutt.info,  Node: sidebar_width,  Next: sig_dashes,  Prev: sidebar_visible,  Up: Configuration Variables

9.3.318 sidebar_width
---------------------

     Type: number
     Default: 30

   This controls the width of the sidebar.  It is measured in screen
columns.  For example: sidebar_width=20 could display 20 ASCII
characters, or 10 Chinese characters.


File: mutt.info,  Node: sig_dashes,  Next: sig_on_top,  Prev: sidebar_width,  Up: Configuration Variables

9.3.319 sig_dashes
------------------

     Type: boolean
     Default: yes

   If _set_, a line containing ‘– ’ (note the trailing space) will be
inserted before your $signature (*note signature::).  It is *strongly*
recommended that you not _unset_ this variable unless your signature
contains just your name.  The reason for this is because many software
packages use ‘– \n’ to detect your signature.  For example, Mutt has the
ability to highlight the signature in a different color in the built-in
pager.


File: mutt.info,  Node: sig_on_top,  Next: signature,  Prev: sig_dashes,  Up: Configuration Variables

9.3.320 sig_on_top
------------------

     Type: boolean
     Default: no

   If _set_, the signature will be included before any quoted or
forwarded text.  It is *strongly* recommended that you do not set this
variable unless you really know what you are doing, and are prepared to
take some heat from netiquette guardians.


File: mutt.info,  Node: signature,  Next: simple_search,  Prev: sig_on_top,  Up: Configuration Variables

9.3.321 signature
-----------------

     Type: path
     Default: ‘~/.signature’

   Specifies the filename of your signature, which is appended to all
outgoing messages.  If the filename ends with a pipe (‘|’), it is
assumed that filename is a shell command and input should be read from
its standard output.


File: mutt.info,  Node: simple_search,  Next: size_show_bytes,  Prev: signature,  Up: Configuration Variables

9.3.322 simple_search
---------------------

     Type: string
     Default: ‘~f %s | ~s %s’

   Specifies how Mutt should expand a simple search into a real search
pattern.  A simple search is one that does not contain any of the ‘~’
pattern modifiers.  See ‘patterns (*note Patterns; Searching; Limiting
and Tagging::)’ for more information on search patterns.

   For example, if you simply type ‘joe’ at a search or limit prompt,
Mutt will automatically expand it to the value specified by this
variable by replacing ‘%s’ with the supplied string.  For the default
value, ‘joe’ would be expanded to: ‘~f joe | ~s joe’.


File: mutt.info,  Node: size_show_bytes,  Next: size_show_fractions,  Prev: simple_search,  Up: Configuration Variables

9.3.323 size_show_bytes
-----------------------

     Type: boolean
     Default: no

   If _set_, message sizes will display bytes for values less than 1
kilobyte.  See formatstrings-size (*note Bytes size display::).


File: mutt.info,  Node: size_show_fractions,  Next: size_show_mb,  Prev: size_show_bytes,  Up: Configuration Variables

9.3.324 size_show_fractions
---------------------------

     Type: boolean
     Default: yes

   If _set_, message sizes will be displayed with a single decimal value
for sizes from 0 to 10 kilobytes and 1 to 10 megabytes.  See
formatstrings-size (*note Bytes size display::).


File: mutt.info,  Node: size_show_mb,  Next: size_units_on_left,  Prev: size_show_fractions,  Up: Configuration Variables

9.3.325 size_show_mb
--------------------

     Type: boolean
     Default: yes

   If _set_, message sizes will display megabytes for values greater
than or equal to 1 megabyte.  See formatstrings-size (*note Bytes size
display::).


File: mutt.info,  Node: size_units_on_left,  Next: sleep_time,  Prev: size_show_mb,  Up: Configuration Variables

9.3.326 size_units_on_left
--------------------------

     Type: boolean
     Default: no

   If _set_, message sizes units will be displayed to the left of the
number.  See formatstrings-size (*note Bytes size display::).


File: mutt.info,  Node: sleep_time,  Next: smart_wrap,  Prev: size_units_on_left,  Up: Configuration Variables

9.3.327 sleep_time
------------------

     Type: number
     Default: 1

   Specifies time, in seconds, to pause while displaying certain
informational messages, while moving from folder to folder and after
expunging messages from the current folder.  The default is to pause one
second, so a value of zero for this option suppresses the pause.


File: mutt.info,  Node: smart_wrap,  Next: smileys,  Prev: sleep_time,  Up: Configuration Variables

9.3.328 smart_wrap
------------------

     Type: boolean
     Default: yes

   Controls the display of lines longer than the screen width in the
internal pager.  If _set_, long lines are wrapped at a word boundary.
If _unset_, lines are simply wrapped at the screen edge.  Also see the
$markers (*note markers::) variable.


File: mutt.info,  Node: smileys,  Next: smime_ask_cert_label,  Prev: smart_wrap,  Up: Configuration Variables

9.3.329 smileys
---------------

     Type: regular expression
     Default: ‘(>From )|(:[-^]?[][)(><}{|/DP])’

   The _pager_ uses this variable to catch some common false positives
of $quote_regexp (*note quote_regexp::), most notably smileys and not
consider a line quoted text if it also matches $smileys (*note
smileys::).  This mostly happens at the beginning of a line.


File: mutt.info,  Node: smime_ask_cert_label,  Next: smime_ca_location,  Prev: smileys,  Up: Configuration Variables

9.3.330 smime_ask_cert_label
----------------------------

     Type: boolean
     Default: yes

   This flag controls whether you want to be asked to enter a label for
a certificate about to be added to the database or not.  It is _set_ by
default.  (S/MIME only)


File: mutt.info,  Node: smime_ca_location,  Next: smime_certificates,  Prev: smime_ask_cert_label,  Up: Configuration Variables

9.3.331 smime_ca_location
-------------------------

     Type: path
     Default: (empty)

   This variable contains the name of either a directory, or a file
which contains trusted certificates for use with OpenSSL. (S/MIME only)


File: mutt.info,  Node: smime_certificates,  Next: smime_decrypt_command,  Prev: smime_ca_location,  Up: Configuration Variables

9.3.332 smime_certificates
--------------------------

     Type: path
     Default: (empty)

   Since for S/MIME there is no pubring/secring as with PGP, mutt has to
handle storage and retrieval of keys by itself.  This is very basic
right now, and keys and certificates are stored in two different
directories, both named as the hash-value retrieved from OpenSSL. There
is an index file which contains mailbox-address keyid pairs, and which
can be manually edited.  This option points to the location of the
certificates.  (S/MIME only)


File: mutt.info,  Node: smime_decrypt_command,  Next: smime_decrypt_use_default_key,  Prev: smime_certificates,  Up: Configuration Variables

9.3.333 smime_decrypt_command
-----------------------------

     Type: string
     Default: (empty)

   This format string specifies a command which is used to decrypt
‘application/x-pkcs7-mime’ attachments.

   The OpenSSL command formats have their own set of ‘printf(3)’-like
sequences similar to PGP’s:

%f                                   Expands to the name of a file
                                     containing a message.
%s                                   Expands to the name of a file
                                     containing the signature part of a
                                     ‘multipart/signed’ attachment when
                                     verifying it.
%k                                   The key-pair specified with
                                     $smime_default_key
                                     (*note smime_default_key::)
%c                                   One or more certificate IDs.
%a                                   The algorithm used for encryption.
%d                                   The message digest algorithm
                                     specified with
                                     $smime_sign_digest_alg
                                     (*note smime_sign_digest_alg::).
%C                                   CA location: Depending on whether
                                     $smime_ca_location
                                     (*note smime_ca_location::) points
                                     to a directory or file, this
                                     expands to ‘-CApath
                                     $smime_ca_location
                                     (*note smime_ca_location::)’ or
                                     ‘-CAfile $smime_ca_location
                                     (*note smime_ca_location::)’.

   For examples on how to configure these formats, see the ‘smime.rc’ in
the ‘samples/’ subdirectory which has been installed on your system
alongside the documentation.  (S/MIME only)


File: mutt.info,  Node: smime_decrypt_use_default_key,  Next: smime_default_key,  Prev: smime_decrypt_command,  Up: Configuration Variables

9.3.334 smime_decrypt_use_default_key
-------------------------------------

     Type: boolean
     Default: yes

   If _set_ (default) this tells mutt to use the default key for
decryption.  Otherwise, if managing multiple certificate-key-pairs, mutt
will try to use the mailbox-address to determine the key to use.  It
will ask you to supply a key, if it can’t find one.  (S/MIME only)


File: mutt.info,  Node: smime_default_key,  Next: smime_encrypt_command,  Prev: smime_decrypt_use_default_key,  Up: Configuration Variables

9.3.335 smime_default_key
-------------------------

     Type: string
     Default: (empty)

   This is the default key-pair to use for S/MIME operations, and must
be set to the keyid (the hash-value that OpenSSL generates) to work
properly.

   It will be used for encryption (see $postpone_encrypt (*note
postpone_encrypt::) and $smime_self_encrypt (*note
smime_self_encrypt::)).  If GPGME is enabled, this is the key id
displayed by gpgsm.

   It will be used for decryption unless $smime_decrypt_use_default_key
(*note smime_decrypt_use_default_key::) is _unset_.

   It will also be used for signing unless $smime_sign_as (*note
smime_sign_as::) is set.

   The (now deprecated) _smime_self_encrypt_as_ is an alias for this
variable, and should no longer be used.  (S/MIME only)


File: mutt.info,  Node: smime_encrypt_command,  Next: smime_encrypt_with,  Prev: smime_default_key,  Up: Configuration Variables

9.3.336 smime_encrypt_command
-----------------------------

     Type: string
     Default: (empty)

   This command is used to create encrypted S/MIME messages.

   This is a format string, see the $smime_decrypt_command (*note
smime_decrypt_command::) command for possible ‘printf(3)’-like
sequences.  (S/MIME only)


File: mutt.info,  Node: smime_encrypt_with,  Next: smime_get_cert_command,  Prev: smime_encrypt_command,  Up: Configuration Variables

9.3.337 smime_encrypt_with
--------------------------

     Type: string
     Default: ‘aes256’

   This sets the algorithm that should be used for encryption.  Valid
choices are ‘aes128’, ‘aes192’, ‘aes256’, ‘des’, ‘des3’, ‘rc2-40’,
‘rc2-64’, ‘rc2-128’.  (S/MIME only)


File: mutt.info,  Node: smime_get_cert_command,  Next: smime_get_cert_email_command,  Prev: smime_encrypt_with,  Up: Configuration Variables

9.3.338 smime_get_cert_command
------------------------------

     Type: string
     Default: (empty)

   This command is used to extract X509 certificates from a PKCS7
structure.

   This is a format string, see the $smime_decrypt_command (*note
smime_decrypt_command::) command for possible ‘printf(3)’-like
sequences.  (S/MIME only)


File: mutt.info,  Node: smime_get_cert_email_command,  Next: smime_get_signer_cert_command,  Prev: smime_get_cert_command,  Up: Configuration Variables

9.3.339 smime_get_cert_email_command
------------------------------------

     Type: string
     Default: (empty)

   This command is used to extract the mail address(es) used for storing
X509 certificates, and for verification purposes (to check whether the
certificate was issued for the sender’s mailbox).

   This is a format string, see the $smime_decrypt_command (*note
smime_decrypt_command::) command for possible ‘printf(3)’-like
sequences.  (S/MIME only)


File: mutt.info,  Node: smime_get_signer_cert_command,  Next: smime_import_cert_command,  Prev: smime_get_cert_email_command,  Up: Configuration Variables

9.3.340 smime_get_signer_cert_command
-------------------------------------

     Type: string
     Default: (empty)

   This command is used to extract only the signers X509 certificate
from a S/MIME signature, so that the certificate’s owner may get
compared to the email’s ‘From:’ field.

   This is a format string, see the $smime_decrypt_command (*note
smime_decrypt_command::) command for possible ‘printf(3)’-like
sequences.  (S/MIME only)


File: mutt.info,  Node: smime_import_cert_command,  Next: smime_is_default,  Prev: smime_get_signer_cert_command,  Up: Configuration Variables

9.3.341 smime_import_cert_command
---------------------------------

     Type: string
     Default: (empty)

   This command is used to import a certificate via smime_keys.

   This is a format string, see the $smime_decrypt_command (*note
smime_decrypt_command::) command for possible ‘printf(3)’-like
sequences.  (S/MIME only)


File: mutt.info,  Node: smime_is_default,  Next: smime_keys,  Prev: smime_import_cert_command,  Up: Configuration Variables

9.3.342 smime_is_default
------------------------

     Type: boolean
     Default: no

   The default behavior of mutt is to use PGP on all
auto-sign/encryption operations.  To override and to use OpenSSL instead
this must be _set_.  However, this has no effect while replying, since
mutt will automatically select the same application that was used to
sign/encrypt the original message.  (Note that this variable can be
overridden by unsetting $crypt_autosmime (*note crypt_autosmime::).)
(S/MIME only)


File: mutt.info,  Node: smime_keys,  Next: smime_pk7out_command,  Prev: smime_is_default,  Up: Configuration Variables

9.3.343 smime_keys
------------------

     Type: path
     Default: (empty)

   Since for S/MIME there is no pubring/secring as with PGP, mutt has to
handle storage and retrieval of keys/certs by itself.  This is very
basic right now, and stores keys and certificates in two different
directories, both named as the hash-value retrieved from OpenSSL. There
is an index file which contains mailbox-address keyid pair, and which
can be manually edited.  This option points to the location of the
private keys.  (S/MIME only)


File: mutt.info,  Node: smime_pk7out_command,  Next: smime_self_encrypt,  Prev: smime_keys,  Up: Configuration Variables

9.3.344 smime_pk7out_command
----------------------------

     Type: string
     Default: (empty)

   This command is used to extract PKCS7 structures of S/MIME
signatures, in order to extract the public X509 certificate(s).

   This is a format string, see the $smime_decrypt_command (*note
smime_decrypt_command::) command for possible ‘printf(3)’-like
sequences.  (S/MIME only)


File: mutt.info,  Node: smime_self_encrypt,  Next: smime_sign_as,  Prev: smime_pk7out_command,  Up: Configuration Variables

9.3.345 smime_self_encrypt
--------------------------

     Type: boolean
     Default: yes

   When _set_, S/MIME encrypted messages will also be encrypted using
the certificate in $smime_default_key (*note smime_default_key::).
(S/MIME only)


File: mutt.info,  Node: smime_sign_as,  Next: smime_sign_command,  Prev: smime_self_encrypt,  Up: Configuration Variables

9.3.346 smime_sign_as
---------------------

     Type: string
     Default: (empty)

   If you have a separate key to use for signing, you should set this to
the signing key.  Most people will only need to set $smime_default_key
(*note smime_default_key::).  (S/MIME only)


File: mutt.info,  Node: smime_sign_command,  Next: smime_sign_digest_alg,  Prev: smime_sign_as,  Up: Configuration Variables

9.3.347 smime_sign_command
--------------------------

     Type: string
     Default: (empty)

   This command is used to created S/MIME signatures of type
‘multipart/signed’, which can be read by all mail clients.

   This is a format string, see the $smime_decrypt_command (*note
smime_decrypt_command::) command for possible ‘printf(3)’-like
sequences.  NOTE: %c and %k will default to $smime_sign_as (*note
smime_sign_as::) if set, otherwise $smime_default_key (*note
smime_default_key::).  (S/MIME only)


File: mutt.info,  Node: smime_sign_digest_alg,  Next: smime_sign_opaque_command,  Prev: smime_sign_command,  Up: Configuration Variables

9.3.348 smime_sign_digest_alg
-----------------------------

     Type: string
     Default: ‘sha256’

   This sets the algorithm that should be used for the signature message
digest.  Valid choices are ‘md5’, ‘sha1’, ‘sha224’, ‘sha256’, ‘sha384’,
‘sha512’.  (S/MIME only)


File: mutt.info,  Node: smime_sign_opaque_command,  Next: smime_timeout,  Prev: smime_sign_digest_alg,  Up: Configuration Variables

9.3.349 smime_sign_opaque_command
---------------------------------

     Type: string
     Default: (empty)

   This command is used to created S/MIME signatures of type
‘application/x-pkcs7-signature’, which can only be handled by mail
clients supporting the S/MIME extension.

   This is a format string, see the $smime_decrypt_command (*note
smime_decrypt_command::) command for possible ‘printf(3)’-like
sequences.  (S/MIME only)


File: mutt.info,  Node: smime_timeout,  Next: smime_verify_command,  Prev: smime_sign_opaque_command,  Up: Configuration Variables

9.3.350 smime_timeout
---------------------

     Type: number (long)
     Default: 300

   The number of seconds after which a cached passphrase will expire if
not used.  (S/MIME only)


File: mutt.info,  Node: smime_verify_command,  Next: smime_verify_opaque_command,  Prev: smime_timeout,  Up: Configuration Variables

9.3.351 smime_verify_command
----------------------------

     Type: string
     Default: (empty)

   This command is used to verify S/MIME signatures of type
‘multipart/signed’.

   This is a format string, see the $smime_decrypt_command (*note
smime_decrypt_command::) command for possible ‘printf(3)’-like
sequences.  (S/MIME only)


File: mutt.info,  Node: smime_verify_opaque_command,  Next: smtp_authenticators,  Prev: smime_verify_command,  Up: Configuration Variables

9.3.352 smime_verify_opaque_command
-----------------------------------

     Type: string
     Default: (empty)

   This command is used to verify S/MIME signatures of type
‘application/x-pkcs7-mime’.

   This is a format string, see the $smime_decrypt_command (*note
smime_decrypt_command::) command for possible ‘printf(3)’-like
sequences.  (S/MIME only)


File: mutt.info,  Node: smtp_authenticators,  Next: smtp_oauth_refresh_command,  Prev: smime_verify_opaque_command,  Up: Configuration Variables

9.3.353 smtp_authenticators
---------------------------

     Type: string
     Default: (empty)

   This is a colon-delimited list of authentication methods mutt may
attempt to use to log in to an SMTP server, in the order mutt should try
them.  Authentication methods are any SASL mechanism, e.g.
‘digest-md5’, ‘gssapi’ or ‘cram-md5’.  This option is case-insensitive.
If it is ‘unset’ (the default) mutt will try all available methods, in
order from most-secure to least-secure.

   Example:


     set smtp_authenticators="digest-md5:cram-md5"


File: mutt.info,  Node: smtp_oauth_refresh_command,  Next: smtp_pass,  Prev: smtp_authenticators,  Up: Configuration Variables

9.3.354 smtp_oauth_refresh_command
----------------------------------

     Type: string
     Default: (empty)

   The command to run to generate an OAUTH refresh token for authorizing
your connection to your SMTP server.  This command will be run on every
connection attempt that uses the OAUTHBEARER authentication mechanism.
See ‘oauth (*note OAUTHBEARER Support::)’ for details.


File: mutt.info,  Node: smtp_pass,  Next: smtp_url,  Prev: smtp_oauth_refresh_command,  Up: Configuration Variables

9.3.355 smtp_pass
-----------------

     Type: string
     Default: (empty)

   Specifies the password for your SMTP account.  If _unset_, Mutt will
prompt you for your password when you first send mail via SMTP. See
$smtp_url (*note smtp_url::) to configure mutt to send mail via SMTP.

   *Warning*: you should only use this option when you are on a fairly
secure machine, because the superuser can read your muttrc even if you
are the only one who can read the file.


File: mutt.info,  Node: smtp_url,  Next: sort,  Prev: smtp_pass,  Up: Configuration Variables

9.3.356 smtp_url
----------------

     Type: string
     Default: (empty)

   Defines the SMTP smarthost where sent messages should relayed for
delivery.  This should take the form of an SMTP URL, e.g.:


     smtp[s]://[user[:pass]@]host[:port]

   where ‘[...]’ denotes an optional part.  Setting this variable
overrides the value of the $sendmail (*note sendmail::) variable.

   Also see $write_bcc (*note write_bcc::).


File: mutt.info,  Node: sort,  Next: sort_alias,  Prev: smtp_url,  Up: Configuration Variables

9.3.357 sort
------------

     Type: sort order
     Default: date

   Specifies how to sort messages in the ‘index’ menu.  Valid values
are:

   • date or date-sent

   • date-received

   • from

   • mailbox-order (unsorted)

   • score

   • size

   • spam

   • subject

   • threads

   • to

   You may optionally use the ‘reverse-’ prefix to specify reverse
sorting order (example: ‘‘set sort=reverse-date-sent’’).

   For values except ‘threads’, this provides the primary sort method.
When two message sort values are equal, $sort_aux (*note sort_aux::)
will be used for a secondary sort.

   When set to ‘threads’, Mutt threads messages in the index.  It uses
the variable $sort_thread_groups (*note sort_thread_groups::) to sort
between threads (at the top/root level), and $sort_aux (*note
sort_aux::) to sort sub-threads and children.


File: mutt.info,  Node: sort_alias,  Next: sort_aux,  Prev: sort,  Up: Configuration Variables

9.3.358 sort_alias
------------------

     Type: sort order
     Default: alias

   Specifies how the entries in the ‘alias’ menu are sorted.  The
following are legal values:

   • address (sort alphabetically by email address)

   • alias (sort alphabetically by alias name)

   • unsorted (leave in order specified in .muttrc)


File: mutt.info,  Node: sort_aux,  Next: sort_browser,  Prev: sort_alias,  Up: Configuration Variables

9.3.359 sort_aux
----------------

     Type: sort order
     Default: date

   For non-threaded mode, this provides a secondary sort for messages in
the ‘index’ menu, used when the $sort (*note sort::) value is equal for
two messages.

   When sorting by threads, this variable controls how the branches of
the thread trees are sorted.  This can be set to any value that $sort
(*note sort::) can, except ‘threads’ (in that case, mutt will just use
‘date-sent’).  You can also specify the ‘last-’ prefix in addition to
the ‘reverse-’ prefix, but ‘last-’ must come after ‘reverse-’.  The
‘last-’ prefix causes messages to be sorted against its siblings by
which has the last descendant, using the rest of $sort_aux (*note
sort_aux::) as an ordering.  For instance,


     set sort_aux=last-date-received

   would mean that if a new message is received in a sub-thread, that
sub-thread becomes the last one displayed.

   Note: For reversed-threads $sort (*note sort::) order, $sort_aux
(*note sort_aux::) is reversed again (which is not the right thing to
do, but kept to not break any existing configuration setting).


File: mutt.info,  Node: sort_browser,  Next: sort_browser_mailboxes,  Prev: sort_aux,  Up: Configuration Variables

9.3.360 sort_browser
--------------------

     Type: sort order
     Default: alpha

   Specifies how to sort entries in the file browser.  By default, the
entries are sorted alphabetically.  Valid values:

   • alpha (alphabetically)

   • count

   • date

   • size

   • unread

   • unsorted

   You may optionally use the ‘reverse-’ prefix to specify reverse
sorting order (example: ‘‘set sort_browser=reverse-date’’).


File: mutt.info,  Node: sort_browser_mailboxes,  Next: sort_re,  Prev: sort_browser,  Up: Configuration Variables

9.3.361 sort_browser_mailboxes
------------------------------

     Type: sort order
     Default: unsorted

   Specifies how to sort entries in the mailbox browser.  By default,
the entries are unsorted, displayed in the same order as listed in the
‘mailboxes’ command.  Valid values:

   • alpha (alphabetically)

   • count

   • date

   • size

   • unread

   • unsorted

   You may optionally use the ‘reverse-’ prefix to specify reverse
sorting order (example: ‘‘set sort_browser_mailboxes=reverse-alpha’’).


File: mutt.info,  Node: sort_re,  Next: sort_thread_groups,  Prev: sort_browser_mailboxes,  Up: Configuration Variables

9.3.362 sort_re
---------------

     Type: boolean
     Default: yes

   This variable is only useful when sorting by threads with
$strict_threads (*note strict_threads::) _unset_.  In that case, it
changes the heuristic mutt uses to thread messages by subject.  With
$sort_re (*note sort_re::) _set_, mutt will only attach a message as the
child of another message by subject if the subject of the child message
starts with a substring matching the setting of $reply_regexp (*note
reply_regexp::).  With $sort_re (*note sort_re::) _unset_, mutt will
attach the message whether or not this is the case, as long as the
non-$reply_regexp (*note reply_regexp::) parts of both messages are
identical.


File: mutt.info,  Node: sort_thread_groups,  Next: spam_separator,  Prev: sort_re,  Up: Configuration Variables

9.3.363 sort_thread_groups
--------------------------

     Type: sort order
     Default: aux

   When sorting by threads, this variable controls how threads are
sorted in relation to other threads (at the top/root level).  This can
be set to any value that $sort (*note sort::) can, except ‘threads’.
You can also specify the ‘last-’ prefix in addition to the ‘reverse-’
prefix, but ‘last-’ must come after ‘reverse-’.  The ‘last-’ prefix
causes messages to be sorted against its siblings by which has the last
descendant, using the rest of $sort_thread_groups (*note
sort_thread_groups::) as an ordering.

   For backward compatibility, the default value is ‘aux’, which means
to use $sort_aux (*note sort_aux::) for top-level thread sorting too.
The value ‘aux’ does not respect ‘last-’ or ‘reverse-’ prefixes, it
simply delegates sorting directly to $sort_aux (*note sort_aux::).

   Note: For reversed-threads $sort (*note sort::) order,
$sort_thread_groups (*note sort_thread_groups::) is reversed again
(which is not the right thing to do, but kept to not break any existing
configuration setting).


File: mutt.info,  Node: spam_separator,  Next: spoolfile,  Prev: sort_thread_groups,  Up: Configuration Variables

9.3.364 spam_separator
----------------------

     Type: string
     Default: ‘,’

   This variable controls what happens when multiple spam headers are
matched: if _unset_, each successive header will overwrite any previous
matches value for the spam label.  If _set_, each successive match will
append to the previous, using this variable’s value as a separator.


File: mutt.info,  Node: spoolfile,  Next: ssl_ca_certificates_file,  Prev: spam_separator,  Up: Configuration Variables

9.3.365 spoolfile
-----------------

     Type: path
     Default: (empty)

   If your spool mailbox is in a non-default place where Mutt cannot
find it, you can specify its location with this variable.  Mutt will
initially set this variable to the value of the environment variable
‘$MAIL’ or ‘$MAILDIR’ if either is defined.


File: mutt.info,  Node: ssl_ca_certificates_file,  Next: ssl_client_cert,  Prev: spoolfile,  Up: Configuration Variables

9.3.366 ssl_ca_certificates_file
--------------------------------

     Type: path
     Default: (empty)

   This variable specifies a file containing trusted CA certificates.
Any server certificate that is signed with one of these CA certificates
is also automatically accepted.  (GnuTLS only)

   Example:


     set ssl_ca_certificates_file=/etc/ssl/certs/ca-certificates.crt


File: mutt.info,  Node: ssl_client_cert,  Next: ssl_force_tls,  Prev: ssl_ca_certificates_file,  Up: Configuration Variables

9.3.367 ssl_client_cert
-----------------------

     Type: path
     Default: (empty)

   The file containing a client certificate and its associated private
key.


File: mutt.info,  Node: ssl_force_tls,  Next: ssl_min_dh_prime_bits,  Prev: ssl_client_cert,  Up: Configuration Variables

9.3.368 ssl_force_tls
---------------------

     Type: boolean
     Default: yes

   If this variable is _set_, Mutt will require that all connections to
remote servers be encrypted.  Furthermore it will attempt to negotiate
TLS even if the server does not advertise the capability, since it would
otherwise have to abort the connection anyway.  This option supersedes
$ssl_starttls (*note ssl_starttls::).


File: mutt.info,  Node: ssl_min_dh_prime_bits,  Next: ssl_starttls,  Prev: ssl_force_tls,  Up: Configuration Variables

9.3.369 ssl_min_dh_prime_bits
-----------------------------

     Type: number
     Default: 0

   This variable specifies the minimum acceptable prime size (in bits)
for use in any Diffie-Hellman key exchange.  A value of 0 will use the
default from the GNUTLS library.  (GnuTLS only)


File: mutt.info,  Node: ssl_starttls,  Next: ssl_use_sslv2,  Prev: ssl_min_dh_prime_bits,  Up: Configuration Variables

9.3.370 ssl_starttls
--------------------

     Type: quadoption
     Default: yes

   If _set_ (the default), mutt will attempt to use ‘STARTTLS’ on
servers advertising the capability.  When _unset_, mutt will not attempt
to use ‘STARTTLS’ regardless of the server’s capabilities.

   *Note* that ‘STARTTLS’ is subject to many kinds of attacks, including
the ability of a machine-in-the-middle to suppress the advertising of
support.  Setting $ssl_force_tls (*note ssl_force_tls::) is recommended
if you rely on ‘STARTTLS’.


File: mutt.info,  Node: ssl_use_sslv2,  Next: ssl_use_sslv3,  Prev: ssl_starttls,  Up: Configuration Variables

9.3.371 ssl_use_sslv2
---------------------

     Type: boolean
     Default: no

   If _set_ , Mutt will use SSLv2 when communicating with servers that
request it.  *N.B. As of 2011, SSLv2 is considered insecure, and using
is inadvisable.  See https://tools.ietf.org/html/rfc6176 .*  (OpenSSL
only)


File: mutt.info,  Node: ssl_use_sslv3,  Next: ssl_use_tlsv1,  Prev: ssl_use_sslv2,  Up: Configuration Variables

9.3.372 ssl_use_sslv3
---------------------

     Type: boolean
     Default: no

   If _set_ , Mutt will use SSLv3 when communicating with servers that
request it.  *N.B. As of 2015, SSLv3 is considered insecure, and using
it is inadvisable.  See https://tools.ietf.org/html/rfc7525 .*


File: mutt.info,  Node: ssl_use_tlsv1,  Next: ssl_use_tlsv1_1,  Prev: ssl_use_sslv3,  Up: Configuration Variables

9.3.373 ssl_use_tlsv1
---------------------

     Type: boolean
     Default: no

   If _set_ , Mutt will use TLSv1.0 when communicating with servers that
request it.  *N.B. As of 2015, TLSv1.0 is considered insecure, and using
it is inadvisable.  See https://tools.ietf.org/html/rfc7525 .*


File: mutt.info,  Node: ssl_use_tlsv1_1,  Next: ssl_use_tlsv1_2,  Prev: ssl_use_tlsv1,  Up: Configuration Variables

9.3.374 ssl_use_tlsv1_1
-----------------------

     Type: boolean
     Default: no

   If _set_ , Mutt will use TLSv1.1 when communicating with servers that
request it.  *N.B. As of 2015, TLSv1.1 is considered insecure, and using
it is inadvisable.  See https://tools.ietf.org/html/rfc7525 .*


File: mutt.info,  Node: ssl_use_tlsv1_2,  Next: ssl_use_tlsv1_3,  Prev: ssl_use_tlsv1_1,  Up: Configuration Variables

9.3.375 ssl_use_tlsv1_2
-----------------------

     Type: boolean
     Default: yes

   If _set_ , Mutt will use TLSv1.2 when communicating with servers that
request it.


File: mutt.info,  Node: ssl_use_tlsv1_3,  Next: ssl_usesystemcerts,  Prev: ssl_use_tlsv1_2,  Up: Configuration Variables

9.3.376 ssl_use_tlsv1_3
-----------------------

     Type: boolean
     Default: yes

   If _set_ , Mutt will use TLSv1.3 when communicating with servers that
request it.


File: mutt.info,  Node: ssl_usesystemcerts,  Next: ssl_verify_dates,  Prev: ssl_use_tlsv1_3,  Up: Configuration Variables

9.3.377 ssl_usesystemcerts
--------------------------

     Type: boolean
     Default: yes

   If set to _yes_, mutt will use CA certificates in the system-wide
certificate store when checking if a server certificate is signed by a
trusted CA. (OpenSSL only)


File: mutt.info,  Node: ssl_verify_dates,  Next: ssl_verify_host,  Prev: ssl_usesystemcerts,  Up: Configuration Variables

9.3.378 ssl_verify_dates
------------------------

     Type: boolean
     Default: yes

   If _set_ (the default), mutt will not automatically accept a server
certificate that is either not yet valid or already expired.  You should
only unset this for particular known hosts, using the ‘<account-hook>
(*note Managing Multiple Accounts::)’ function.


File: mutt.info,  Node: ssl_verify_host,  Next: ssl_verify_host_override,  Prev: ssl_verify_dates,  Up: Configuration Variables

9.3.379 ssl_verify_host
-----------------------

     Type: boolean
     Default: yes

   If _set_ (the default), mutt will not automatically accept a server
certificate whose host name does not match the host used in your folder
URL. You should only unset this for particular known hosts, using the
‘<account-hook> (*note Managing Multiple Accounts::)’ function.


File: mutt.info,  Node: ssl_verify_host_override,  Next: ssl_verify_partial_chains,  Prev: ssl_verify_host,  Up: Configuration Variables

9.3.380 ssl_verify_host_override
--------------------------------

     Type: string
     Default: (empty)

   Defines an alternate host name to verify the server certificate
against.  This should not be set unless you are sure what you are doing,
but it might be useful for connection to a .onion host without a
properly configured host name in the certificate.  See $ssl_verify_host
(*note ssl_verify_host::).


File: mutt.info,  Node: ssl_verify_partial_chains,  Next: ssl_ciphers,  Prev: ssl_verify_host_override,  Up: Configuration Variables

9.3.381 ssl_verify_partial_chains
---------------------------------

     Type: boolean
     Default: no

   This option should not be changed from the default unless you
understand what you are doing.

   Setting this variable to _yes_ will permit verifying partial
certification chains, i.  e.  a certificate chain where not the root,
but an intermediate certificate CA, or the host certificate, are marked
trusted (in $certificate_file (*note certificate_file::)), without
marking the root signing CA as trusted.

   (OpenSSL 1.0.2b and newer only).


File: mutt.info,  Node: ssl_ciphers,  Next: status_chars,  Prev: ssl_verify_partial_chains,  Up: Configuration Variables

9.3.382 ssl_ciphers
-------------------

     Type: string
     Default: (empty)

   Contains a colon-separated list of ciphers to use when using SSL. For
OpenSSL, see ciphers(1) for the syntax of the string.

   For GnuTLS, this option will be used in place of "NORMAL" at the
start of the priority string.  See gnutls_priority_init(3) for the
syntax and more details.  (Note: GnuTLS version 2.1.7 or higher is
required.)


File: mutt.info,  Node: status_chars,  Next: status_format,  Prev: ssl_ciphers,  Up: Configuration Variables

9.3.383 status_chars
--------------------

     Type: string
     Default: ‘-*%A’

   Controls the characters used by the ‘%r’ indicator in $status_format
(*note status_format::).  The first character is used when the mailbox
is unchanged.  The second is used when the mailbox has been changed, and
it needs to be resynchronized.  The third is used if the mailbox is in
read-only mode, or if the mailbox will not be written when exiting that
mailbox (You can toggle whether to write changes to a mailbox with the
‘<toggle-write>’ operation, bound by default to ‘%’).  The fourth is
used to indicate that the current folder has been opened in attach-
message mode (Certain operations like composing a new mail, replying,
forwarding, etc.  are not permitted in this mode).


File: mutt.info,  Node: status_format,  Next: status_on_top,  Prev: status_chars,  Up: Configuration Variables

9.3.384 status_format
---------------------

     Type: string (localized)
     Default: ‘-%r-Mutt: %f [Msgs:%?M?%M/?%m%?n? New:%n?%?o? Old:%o?%?d? Del:%d?%?F? Flag:%F?%?t? Tag:%t?%?p? Post:%p?%?b? Inc:%b?%?B? Back:%B?%?l? %l?]—(%s/%?T?%T/?%S)-%>-(%P)—’

   Controls the format of the status line displayed in the ‘index’ menu.
This string is similar to $index_format (*note index_format::), but has
its own set of ‘printf(3)’-like sequences:

%b                                   number of mailboxes with new mail
                                     *
%B                                   number of backgrounded editing
                                     sessions *
%d                                   number of deleted messages *
%f                                   the full pathname of the current
                                     mailbox
%F                                   number of flagged messages *
%h                                   local hostname
%l                                   size (in bytes) of the current
                                     mailbox (see formatstrings-size
                                     (*note Bytes size display::)) *
%L                                   size (in bytes) of the messages
                                     shown (i.e., which match the
                                     current limit) (see
                                     formatstrings-size
                                     (*note Bytes size display::)) *
%m                                   the number of messages in the
                                     mailbox *
%M                                   the number of messages shown
                                     (i.e., which match the current
                                     limit) *
%n                                   number of new messages in the
                                     mailbox *
%o                                   number of old unread messages *
%p                                   number of postponed messages *
%P                                   percentage of the way through the
                                     index
%r                                   modified/read-only/won’t-write/attach-message
                                     indicator, according to
                                     $status_chars
                                     (*note status_chars::)
%R                                   number of read messages *
%s                                   current sorting mode ($sort
                                     (*note sort::))
%S                                   current aux sorting method
                                     ($sort_aux (*note sort_aux::))
%t                                   number of tagged messages *
%T                                   current thread group sorting
                                     method ($sort_thread_groups
                                     (*note sort_thread_groups::)) *
%u                                   number of unread messages *
%v                                   Mutt version string
%V                                   currently active limit pattern, if
                                     any *
%>X                                  right justify the rest of the
                                     string and pad with ‘X’
%|X                                  pad to the end of the line with
                                     ‘X’
%*X                                  soft-fill with character ‘X’ as
                                     pad

   For an explanation of ‘soft-fill’, see the $index_format (*note
index_format::) documentation.

   * = can be optionally printed if nonzero

   Some of the above sequences can be used to optionally print a string
if their value is nonzero.  For example, you may only want to see the
number of flagged messages if such messages exist, since zero is not
particularly meaningful.  To optionally print a string based upon one of
the above sequences, the following construct is used:

   ‘%?<sequence_char>?<optional_string>?’

   where _sequence_char_ is a character from the table above, and
_optional_string_ is the string you would like printed if
_sequence_char_ is nonzero.  _optional_string_ *may* contain other
sequences as well as normal text, but you may *not* nest optional
strings.

   Here is an example illustrating how to optionally print the number of
new messages in a mailbox:

   ‘%?n?%n new messages.?’

   You can also switch between two strings using the following
construct:

   ‘%?<sequence_char>?<if_string>&<else_string>?’

   If the value of _sequence_char_ is non-zero, _if_string_ will be
expanded, otherwise _else_string_ will be expanded.

   You can force the result of any ‘printf(3)’-like sequence to be
lowercase by prefixing the sequence character with an underscore (‘_’)
sign.  For example, if you want to display the local hostname in
lowercase, you would use: ‘‘%_h’’.

   If you prefix the sequence character with a colon (‘:’) character,
mutt will replace any dots in the expansion by underscores.  This might
be helpful with IMAP folders that don’t like dots in folder names.


File: mutt.info,  Node: status_on_top,  Next: strict_threads,  Prev: status_format,  Up: Configuration Variables

9.3.385 status_on_top
---------------------

     Type: boolean
     Default: no

   Setting this variable causes the ‘status bar’ to be displayed on the
first line of the screen rather than near the bottom.  If $help (*note
help::) is _set_, too it’ll be placed at the bottom.


File: mutt.info,  Node: strict_threads,  Next: suspend,  Prev: status_on_top,  Up: Configuration Variables

9.3.386 strict_threads
----------------------

     Type: boolean
     Default: no

   If _set_, threading will only make use of the ‘In-Reply-To’ and
‘References:’ fields when you $sort (*note sort::) by message threads.
By default, messages with the same subject are grouped together in
‘pseudo threads.’.  This may not always be desirable, such as in a
personal mailbox where you might have several unrelated messages with
the subjects like ‘hi’ which will get grouped together.  See also
$sort_re (*note sort_re::) for a less drastic way of controlling this
behavior.


File: mutt.info,  Node: suspend,  Next: text_flowed,  Prev: strict_threads,  Up: Configuration Variables

9.3.387 suspend
---------------

     Type: boolean
     Default: yes

   When _unset_, mutt won’t stop when the user presses the terminal’s
_susp_ key, usually ‘^Z’.  This is useful if you run mutt inside an
xterm using a command like ‘‘xterm -e mutt’’.


File: mutt.info,  Node: text_flowed,  Next: thorough_search,  Prev: suspend,  Up: Configuration Variables

9.3.388 text_flowed
-------------------

     Type: boolean
     Default: no

   When _set_, mutt will generate ‘format=flowed’ bodies with a content
type of ‘‘text/plain; format=flowed’’.  This format is easier to handle
for some mailing software, and generally just looks like ordinary text.
To actually make use of this format’s features, you’ll need support in
your editor.

   The option only controls newly composed messages.  Postponed
messages, resent messages, and draft messages (via -H on the command
line) will use the content-type of the source message.

   Note that $indent_string (*note indent_string::) is ignored when this
option is _set_.


File: mutt.info,  Node: thorough_search,  Next: thread_received,  Prev: text_flowed,  Up: Configuration Variables

9.3.389 thorough_search
-----------------------

     Type: boolean
     Default: yes

   Affects the ‘~b’, ‘~B’, and ‘~h’ search operations described in
section ‘patterns (*note Patterns; Searching; Limiting and Tagging::)’.
If _set_, the headers and body/attachments of messages to be searched
are decoded before searching.  If _unset_, messages are searched as they
appear in the folder.

   Users searching attachments or for non-ASCII characters should _set_
this value because decoding also includes MIME parsing/decoding and
possible character set conversions.  Otherwise mutt will attempt to
match against the raw message received (for example quoted-printable
encoded or with encoded headers) which may lead to incorrect search
results.


File: mutt.info,  Node: thread_received,  Next: tilde,  Prev: thorough_search,  Up: Configuration Variables

9.3.390 thread_received
-----------------------

     Type: boolean
     Default: no

   When _set_, mutt uses the date received rather than the date sent to
thread messages by subject.


File: mutt.info,  Node: tilde,  Next: time_inc,  Prev: thread_received,  Up: Configuration Variables

9.3.391 tilde
-------------

     Type: boolean
     Default: no

   When _set_, the internal-pager will pad blank lines to the bottom of
the screen with a tilde (‘~’).


File: mutt.info,  Node: time_inc,  Next: timeout,  Prev: tilde,  Up: Configuration Variables

9.3.392 time_inc
----------------

     Type: number
     Default: 0

   Along with $read_inc (*note read_inc::), $write_inc (*note
write_inc::), and $net_inc (*note net_inc::), this variable controls the
frequency with which progress updates are displayed.  It suppresses
updates less than $time_inc (*note time_inc::) milliseconds apart.  This
can improve throughput on systems with slow terminals, or when running
mutt on a remote system.

   Also see the ‘tuning (*note Performance Tuning::)’ section of the
manual for performance considerations.


File: mutt.info,  Node: timeout,  Next: tmpdir,  Prev: time_inc,  Up: Configuration Variables

9.3.393 timeout
---------------

     Type: number
     Default: 600

   When Mutt is waiting for user input either idling in menus or in an
interactive prompt, Mutt would block until input is present.  Depending
on the context, this would prevent certain operations from working, like
checking for new mail or keeping an IMAP connection alive.

   This variable controls how many seconds Mutt will at most wait until
it aborts waiting for input, performs these operations and continues to
wait for input.

   A value of zero or less will cause Mutt to never time out.


File: mutt.info,  Node: tmpdir,  Next: to_chars,  Prev: timeout,  Up: Configuration Variables

9.3.394 tmpdir
--------------

     Type: path
     Default: (empty)

   This variable allows you to specify where Mutt will place its
temporary files needed for displaying and composing messages.  If this
variable is not set, the environment variable ‘$TMPDIR’ is used.  If
‘$TMPDIR’ is not set then ‘‘/tmp’’ is used.


File: mutt.info,  Node: to_chars,  Next: trash,  Prev: tmpdir,  Up: Configuration Variables

9.3.395 to_chars
----------------

     Type: string
     Default: ‘ +TCFL’

   Controls the character used to indicate mail addressed to you.  The
first character is the one used when the mail is _not_ addressed to your
address.  The second is used when you are the only recipient of the
message.  The third is when your address appears in the ‘To:’ header
field, but you are not the only recipient of the message.  The fourth
character is used when your address is specified in the ‘Cc:’ header
field, but you are not the only recipient.  The fifth character is used
to indicate mail that was sent by _you_.  The sixth character is used to
indicate when a mail was sent to a mailing-list you subscribe to.


File: mutt.info,  Node: trash,  Next: ts_icon_format,  Prev: to_chars,  Up: Configuration Variables

9.3.396 trash
-------------

     Type: path
     Default: (empty)

   If set, this variable specifies the path of the trash folder where
the mails marked for deletion will be moved, instead of being
irremediably purged.

   NOTE: When you delete a message in the trash folder, it is really
deleted, so that you have a way to clean the trash.


File: mutt.info,  Node: ts_icon_format,  Next: ts_enabled,  Prev: trash,  Up: Configuration Variables

9.3.397 ts_icon_format
----------------------

     Type: string (localized)
     Default: ‘M%?n?AIL&ail?’

   Controls the format of the icon title, as long as ‘$ts_enabled (*note
ts_enabled::)’ is set.  This string is identical in formatting to the
one used by ‘$status_format (*note status_format::)’.


File: mutt.info,  Node: ts_enabled,  Next: ts_status_format,  Prev: ts_icon_format,  Up: Configuration Variables

9.3.398 ts_enabled
------------------

     Type: boolean
     Default: no

   Controls whether mutt tries to set the terminal status line and icon
name.  Most terminal emulators emulate the status line in the window
title.


File: mutt.info,  Node: ts_status_format,  Next: tunnel,  Prev: ts_enabled,  Up: Configuration Variables

9.3.399 ts_status_format
------------------------

     Type: string (localized)
     Default: ‘Mutt with %?m?%m messages&no messages?%?n? [%n NEW]?’

   Controls the format of the terminal status line (or window title),
provided that ‘$ts_enabled (*note ts_enabled::)’ has been set.  This
string is identical in formatting to the one used by ‘$status_format
(*note status_format::)’.


File: mutt.info,  Node: tunnel,  Next: tunnel_is_secure,  Prev: ts_status_format,  Up: Configuration Variables

9.3.400 tunnel
--------------

     Type: string
     Default: (empty)

   Setting this variable will cause mutt to open a pipe to a command
instead of a raw socket.  You may be able to use this to set up
preauthenticated connections to your IMAP/POP3/SMTP server.  Example:


     set tunnel="ssh -q mailhost.net /usr/local/libexec/imapd"

   Note: For this example to work you must be able to log in to the
remote machine without having to enter a password.

   When set, Mutt uses the tunnel for all remote connections.  Please
see ‘account-hook (*note Managing Multiple Accounts::)’ in the manual
for how to use different tunnel commands per connection.


File: mutt.info,  Node: tunnel_is_secure,  Next: uncollapse_jump,  Prev: tunnel,  Up: Configuration Variables

9.3.401 tunnel_is_secure
------------------------

     Type: boolean
     Default: yes

   When _set_, Mutt will assume the $tunnel (*note tunnel::) connection
does not need STARTTLS to be enabled.  It will also allow IMAP PREAUTH
server responses inside a tunnel (*note tunnel::) to proceed.  This is
appropriate if $tunnel (*note tunnel::) uses ssh or directly invokes the
server locally.

   When _unset_, Mutt will negotiate STARTTLS according to the
ssl_starttls (*note ssl_starttls::) and ssl_force_tls (*note
ssl_force_tls::) variables.  If ssl_force_tls (*note ssl_force_tls::) is
set, Mutt will abort connecting if an IMAP server responds with PREAUTH.
This setting is appropriate if $tunnel (*note tunnel::) does not provide
security and could be tampered with by attackers.


File: mutt.info,  Node: uncollapse_jump,  Next: uncollapse_new,  Prev: tunnel_is_secure,  Up: Configuration Variables

9.3.402 uncollapse_jump
-----------------------

     Type: boolean
     Default: no

   When _set_, Mutt will jump to the next unread message, if any, when
the current thread is _un_collapsed.


File: mutt.info,  Node: uncollapse_new,  Next: use_8bitmime,  Prev: uncollapse_jump,  Up: Configuration Variables

9.3.403 uncollapse_new
----------------------

     Type: boolean
     Default: yes

   When _set_, Mutt will automatically uncollapse any collapsed thread
that receives a newly delivered message.  When _unset_, collapsed
threads will remain collapsed.  The presence of the newly delivered
message will still affect index sorting, though.


File: mutt.info,  Node: use_8bitmime,  Next: use_domain,  Prev: uncollapse_new,  Up: Configuration Variables

9.3.404 use_8bitmime
--------------------

     Type: boolean
     Default: no

   *Warning:* do not set this variable unless you are using a version of
sendmail which supports the ‘-B8BITMIME’ flag (such as sendmail 8.8.x)
or you may not be able to send mail.

   When _set_, Mutt will invoke $sendmail (*note sendmail::) with the
‘-B8BITMIME’ flag when sending 8-bit messages to enable ESMTP
negotiation.


File: mutt.info,  Node: use_domain,  Next: use_envelope_from,  Prev: use_8bitmime,  Up: Configuration Variables

9.3.405 use_domain
------------------

     Type: boolean
     Default: yes

   When _set_, Mutt will qualify all local addresses (ones without the
‘@host’ portion) with the value of $hostname (*note hostname::).  If
_unset_, no addresses will be qualified.


File: mutt.info,  Node: use_envelope_from,  Next: use_from,  Prev: use_domain,  Up: Configuration Variables

9.3.406 use_envelope_from
-------------------------

     Type: boolean
     Default: no

   When _set_, mutt will set the _envelope_ sender of the message.  If
$envelope_from_address (*note envelope_from_address::) is _set_, it will
be used as the sender address.  If _unset_, mutt will attempt to derive
the sender from the ‘From:’ header.

   Note that this information is passed to sendmail command using the
‘-f’ command line switch.  Therefore setting this option is not useful
if the $sendmail (*note sendmail::) variable already contains ‘-f’ or if
the executable pointed to by $sendmail (*note sendmail::) doesn’t
support the ‘-f’ switch.


File: mutt.info,  Node: use_from,  Next: use_ipv6,  Prev: use_envelope_from,  Up: Configuration Variables

9.3.407 use_from
----------------

     Type: boolean
     Default: yes

   When _set_, Mutt will generate the ‘From:’ header field when sending
messages.  If _unset_, no ‘From:’ header field will be generated unless
the user explicitly sets one using the ‘my_hdr (*note User-Defined
Headers::)’ command.


File: mutt.info,  Node: use_ipv6,  Next: user_agent,  Prev: use_from,  Up: Configuration Variables

9.3.408 use_ipv6
----------------

     Type: boolean
     Default: yes

   When _set_, Mutt will look for IPv6 addresses of hosts it tries to
contact.  If this option is _unset_, Mutt will restrict itself to IPv4
addresses.  Normally, the default should work.


File: mutt.info,  Node: user_agent,  Next: visual,  Prev: use_ipv6,  Up: Configuration Variables

9.3.409 user_agent
------------------

     Type: boolean
     Default: no

   When _set_, mutt will add a ‘User-Agent:’ header to outgoing
messages, indicating which version of mutt was used for composing them.


File: mutt.info,  Node: visual,  Next: wait_key,  Prev: user_agent,  Up: Configuration Variables

9.3.410 visual
--------------

     Type: path
     Default: (empty)

   Specifies the visual editor to invoke when the ‘‘~v’’ command is
given in the built-in editor.


File: mutt.info,  Node: wait_key,  Next: weed,  Prev: visual,  Up: Configuration Variables

9.3.411 wait_key
----------------

     Type: boolean
     Default: yes

   Controls whether Mutt will ask you to press a key after an external
command has been invoked by these functions: ‘<shell-escape>’,
‘<pipe-message>’, ‘<pipe-entry>’, ‘<print-message>’, and ‘<print-entry>’
commands.

   It is also used when viewing attachments with ‘auto_view (*note MIME
Autoview::)’, provided that the corresponding mailcap entry has a
_needsterminal_ flag, and the external program is interactive.

   When _set_, Mutt will always ask for a key.  When _unset_, Mutt will
wait for a key only if the external command returned a non-zero status.


File: mutt.info,  Node: weed,  Next: wrap,  Prev: wait_key,  Up: Configuration Variables

9.3.412 weed
------------

     Type: boolean
     Default: yes

   When _set_, mutt will weed headers when displaying, forwarding, or
replying to messages.

   Also see $copy_decode_weed (*note copy_decode_weed::),
$pipe_decode_weed (*note pipe_decode_weed::), $print_decode_weed (*note
print_decode_weed::).


File: mutt.info,  Node: wrap,  Next: wrap_headers,  Prev: weed,  Up: Configuration Variables

9.3.413 wrap
------------

     Type: number
     Default: 0

   When set to a positive value, mutt will wrap text at $wrap (*note
wrap::) characters.  When set to a negative value, mutt will wrap text
so that there are $wrap (*note wrap::) characters of empty space on the
right side of the terminal.  Setting it to zero makes mutt wrap at the
terminal width.

   Also see $reflow_wrap (*note reflow_wrap::).


File: mutt.info,  Node: wrap_headers,  Next: wrap_search,  Prev: wrap,  Up: Configuration Variables

9.3.414 wrap_headers
--------------------

     Type: number
     Default: 78

   This option specifies the number of characters to use for wrapping an
outgoing message’s headers.  Allowed values are between 78 and 998
inclusive.

   *Note:* This option usually shouldn’t be changed.  RFC5233 recommends
a line length of 78 (the default), so *please only change this setting
when you know what you’re doing*.


File: mutt.info,  Node: wrap_search,  Next: wrapmargin,  Prev: wrap_headers,  Up: Configuration Variables

9.3.415 wrap_search
-------------------

     Type: boolean
     Default: yes

   Controls whether searches wrap around the end.

   When _set_, searches will wrap around the first (or last) item.  When
_unset_, incremental searches will not wrap.


File: mutt.info,  Node: wrapmargin,  Next: write_bcc,  Prev: wrap_search,  Up: Configuration Variables

9.3.416 wrapmargin
------------------

     Type: number
     Default: 0

   (DEPRECATED) Equivalent to setting $wrap (*note wrap::) with a
negative value.


File: mutt.info,  Node: write_bcc,  Next: write_inc,  Prev: wrapmargin,  Up: Configuration Variables

9.3.417 write_bcc
-----------------

     Type: boolean
     Default: no

   Controls whether mutt writes out the ‘Bcc:’ header when preparing
messages to be sent.  Some MTAs, such as Exim and Courier, do not strip
the ‘Bcc:’ header; so it is advisable to leave this unset unless you
have a particular need for the header to be in the sent message.

   If mutt is set to deliver directly via SMTP (see $smtp_url (*note
smtp_url::)), this option does nothing: mutt will never write out the
‘Bcc:’ header in this case.

   Note this option only affects the sending of messages.  Fcc’ed copies
of a message will always contain the ‘Bcc:’ header if one exists.


File: mutt.info,  Node: write_inc,  Prev: write_bcc,  Up: Configuration Variables

9.3.418 write_inc
-----------------

     Type: number
     Default: 10

   When writing a mailbox, a message will be printed every $write_inc
(*note write_inc::) messages to indicate progress.  If set to 0, only a
single message will be displayed before writing a mailbox.

   Also see the $read_inc (*note read_inc::), $net_inc (*note net_inc::)
and $time_inc (*note time_inc::) variables and the ‘tuning (*note
Performance Tuning::)’ section of the manual for performance
considerations.


File: mutt.info,  Node: Functions <1>,  Prev: Configuration Variables,  Up: Reference

9.4 Functions
=============

The following is the list of available functions listed by the mapping
in which they are available.  The default key setting is given, and an
explanation of what the function does.  The key bindings of these
functions can be changed with the bind (*note Changing the Default Key
Bindings::) command.

* Menu:

* Generic Menu::
* Index Menu::
* Pager Menu::
* Alias Menu: Alias Menu <1>.
* Query Menu::
* Attachment Menu: Attachment Menu <1>.
* Compose Menu: Compose Menu <2>.
* Postpone Menu::
* Browser Menu::
* Pgp Menu::
* Smime Menu::
* Mixmaster Menu::
* Editor Menu::
* Autocrypt Account Menu::
* List Menu: List Menu <1>.


File: mutt.info,  Node: Generic Menu,  Next: Index Menu,  Up: Functions <1>

9.4.1 Generic Menu
------------------

The _generic_ menu is not a real menu, but specifies common functions
(such as movement) available in all menus except for _pager_ and
_editor_.  Changing settings for this menu will affect the default
bindings for all menus (except as noted).


   *Default Generic Menu Bindings*

Function                 Default key              Description
‘<bottom-page>’          L                        move to the bottom of
                                                  the page
‘<check-stats>’                                   calculate message
                                                  statistics for all
                                                  mailboxes
‘<current-bottom>’                                move entry to bottom
                                                  of screen
‘<current-middle>’                                move entry to middle
                                                  of screen
‘<current-top>’                                   move entry to top of
                                                  screen
‘<end-cond>’                                      end of conditional
                                                  execution (noop)
‘<enter-command>’        :                        enter a muttrc command
‘<error-history>’                                 display recent history
                                                  of error messages
‘<exit>’                 q                        exit this menu
‘<first-entry>’          <Home>                   move to the first
                                                  entry
‘<first-entry>’          =                        move to the first
                                                  entry
‘<half-down>’            ]                        scroll down 1/2 page
‘<half-up>’              [                        scroll up 1/2 page
‘<help>’                 ?                        this screen
‘<jump>’                 1                        jump to an index
                                                  number
‘<jump>’                 2                        jump to an index
                                                  number
‘<jump>’                 3                        jump to an index
                                                  number
‘<jump>’                 4                        jump to an index
                                                  number
‘<jump>’                 5                        jump to an index
                                                  number
‘<jump>’                 6                        jump to an index
                                                  number
‘<jump>’                 7                        jump to an index
                                                  number
‘<jump>’                 8                        jump to an index
                                                  number
‘<jump>’                 9                        jump to an index
                                                  number
‘<last-entry>’           <End>                    move to the last entry
‘<last-entry>’           *                        move to the last entry
‘<middle-page>’          M                        move to the middle of
                                                  the page
‘<next-entry>’           <Down>                   move to the next entry
‘<next-entry>’           j                        move to the next entry
‘<next-line>’            >                        scroll down one line
‘<next-page>’            <Pagedown>               move to the next page
‘<next-page>’            <Right>                  move to the next page
‘<next-page>’            z                        move to the next page
‘<previous-entry>’       <Up>                     move to the previous
                                                  entry
‘<previous-entry>’       k                        move to the previous
                                                  entry
‘<previous-line>’        <                        scroll up one line
‘<previous-page>’        <Left>                   move to the previous
                                                  page
‘<previous-page>’        <Pageup>                 move to the previous
                                                  page
‘<previous-page>’        Z                        move to the previous
                                                  page
‘<refresh>’              ^L                       clear and redraw the
                                                  screen
‘<search>’               /                        search for a regular
                                                  expression
‘<search-next>’          n                        search for next match
‘<search-opposite>’                               search for next match
                                                  in opposite direction
‘<search-reverse>’       Esc /                    search backwards for a
                                                  regular expression
‘<select-entry>’         <Enter>                  select the current
                                                  entry
‘<select-entry>’         <Keypadenter>            select the current
                                                  entry
‘<select-entry>’         <Return>                 select the current
                                                  entry
‘<shell-escape>’         !                        invoke a command in a
                                                  subshell
‘<tag-entry>’            t                        tag the current entry
‘<tag-prefix>’           ;                        apply next function to
                                                  tagged messages
‘<tag-prefix-cond>’                               apply next function
                                                  ONLY to tagged
                                                  messages
‘<top-page>’             H                        move to the top of the
                                                  page
‘<what-key>’                                      display the keycode
                                                  for a key press


File: mutt.info,  Node: Index Menu,  Next: Pager Menu,  Prev: Generic Menu,  Up: Functions <1>

9.4.2 Index Menu
----------------


   *Default Index Menu Bindings*

Function                 Default key              Description
‘<autocrypt-acct-menu>’  A                        manage autocrypt
                                                  accounts
‘<background-compose-menu>’B                      list and select
                                                  backgrounded compose
                                                  sessions
‘<bounce-message>’       b                        remail a message to
                                                  another user
‘<break-thread>’         #                        break the thread in
                                                  two
‘<browse-mailboxes>’     y                        select a new mailbox
                                                  from the browser
‘<browse-mailboxes-readonly>’                     select a new mailbox
                                                  from the browser in
                                                  read only mode
‘<buffy-list>’           .                        list mailboxes with
                                                  new mail
‘<change-folder>’        c                        open a different
                                                  folder
‘<change-folder-readonly>’Esc c                   open a different
                                                  folder in read only
                                                  mode
‘<check-traditional-pgp>’Esc P                    check for classic PGP
‘<clear-flag>’           W                        clear a status flag
                                                  from a message
‘<collapse-all>’         Esc V                    collapse/uncollapse
                                                  all threads
‘<collapse-thread>’      Esc v                    collapse/uncollapse
                                                  current thread
‘<compose-to-sender>’                             compose new message to
                                                  the current message
                                                  sender
‘<copy-message>’         C                        copy a message to a
                                                  file/mailbox
‘<create-alias>’         a                        create an alias from a
                                                  message sender
‘<decode-copy>’          Esc C                    make decoded
                                                  (text/plain) copy
‘<decode-save>’          Esc s                    make decoded copy
                                                  (text/plain) and
                                                  delete
‘<decrypt-copy>’                                  make decrypted copy
‘<decrypt-save>’                                  make decrypted copy
                                                  and delete
‘<delete-message>’       d                        delete the current
                                                  entry
‘<delete-pattern>’       D                        delete messages
                                                  matching a pattern
‘<delete-subthread>’     Esc d                    delete all messages in
                                                  subthread
‘<delete-thread>’        ^D                       delete all messages in
                                                  thread
‘<display-address>’      @                        display full address
                                                  of sender
‘<display-message>’      <Enter>                  display a message
‘<display-message>’      <Keypadenter>            display a message
‘<display-message>’      <Return>                 display a message
‘<display-message>’      <Space>                  display a message
‘<display-toggle-weed>’  h                        display message and
                                                  toggle header weeding
‘<edit>’                 e                        edit the raw message
‘<edit-label>’           Y                        add, change, or delete
                                                  a message’s label
‘<edit-type>’            ^E                       edit attachment
                                                  content type
‘<exit>’                 x                        exit this menu
‘<extract-keys>’         ^K                       extract supported
                                                  public keys
‘<fetch-mail>’           G                        retrieve mail from POP
                                                  server
‘<flag-message>’         F                        toggle a message’s
                                                  ’important’ flag
‘<forget-passphrase>’    ^F                       wipe passphrase(s)
                                                  from memory
‘<forward-message>’      f                        forward a message with
                                                  comments
‘<group-chat-reply>’                              reply to all
                                                  recipients preserving
                                                  To/Cc
‘<group-reply>’          g                        reply to all
                                                  recipients
‘<imap-fetch-mail>’                               force retrieval of
                                                  mail from IMAP server
‘<imap-logout-all>’                               logout from all IMAP
                                                  servers
‘<limit>’                l                        show only messages
                                                  matching a pattern
‘<link-threads>’         &                        link tagged message to
                                                  the current one
‘<list-action>’          Esc L                    perform mailing list
                                                  action
‘<list-reply>’           L                        reply to specified
                                                  mailing list
‘<mail>’                 m                        compose a new mail
                                                  message
‘<mail-key>’             Esc k                    mail a PGP public key
‘<mark-message>’         ~                        create a hotkey macro
                                                  for the current
                                                  message
‘<next-entry>’           J                        move to the next entry
‘<next-new>’                                      jump to the next new
                                                  message
‘<next-new-then-unread>’ <Tab>                    jump to the next new
                                                  or unread message
‘<next-subthread>’       Esc n                    jump to the next
                                                  subthread
‘<next-thread>’          ^N                       jump to the next
                                                  thread
‘<next-undeleted>’       <Down>                   move to the next
                                                  undeleted message
‘<next-undeleted>’       j                        move to the next
                                                  undeleted message
‘<next-unread>’                                   jump to the next
                                                  unread message
‘<next-unread-mailbox>’                           open next mailbox with
                                                  new mail
‘<parent-message>’       P                        jump to parent message
                                                  in thread
‘<pipe-message>’         |                        pipe
                                                  message/attachment to
                                                  a shell command
‘<previous-entry>’       K                        move to the previous
                                                  entry
‘<previous-new>’                                  jump to the previous
                                                  new message
‘<previous-new-then-unread>’Esc <Tab>             jump to the previous
                                                  new or unread message
‘<previous-subthread>’   Esc p                    jump to previous
                                                  subthread
‘<previous-thread>’      ^P                       jump to previous
                                                  thread
‘<previous-undeleted>’   <Up>                     move to the previous
                                                  undeleted message
‘<previous-undeleted>’   k                        move to the previous
                                                  undeleted message
‘<previous-unread>’                               jump to the previous
                                                  unread message
‘<print-message>’        p                        print the current
                                                  entry
‘<purge-message>’                                 delete the current
                                                  entry, bypassing the
                                                  trash folder
‘<query>’                Q                        query external program
                                                  for addresses
‘<quit>’                 q                        save changes to
                                                  mailbox and quit
‘<read-subthread>’       Esc r                    mark the current
                                                  subthread as read
‘<read-thread>’          ^R                       mark the current
                                                  thread as read
‘<recall-message>’       R                        recall a postponed
                                                  message
‘<reply>’                r                        reply to a message
‘<resend-message>’       Esc e                    use the current
                                                  message as a template
                                                  for a new one
‘<root-message>’                                  jump to root message
                                                  in thread
‘<save-message>’         s                        save
                                                  message/attachment to
                                                  a mailbox/file
‘<set-flag>’             w                        set a status flag on a
                                                  message
‘<show-limit>’           Esc l                    show currently active
                                                  limit pattern
‘<show-version>’         V                        show the Mutt version
                                                  number and date
‘<sidebar-first>’                                 move the highlight to
                                                  the first mailbox
‘<sidebar-last>’                                  move the highlight to
                                                  the last mailbox
‘<sidebar-next>’                                  move the highlight to
                                                  next mailbox
‘<sidebar-next-new>’                              move the highlight to
                                                  next mailbox with new
                                                  mail
‘<sidebar-open>’                                  open highlighted
                                                  mailbox
‘<sidebar-page-down>’                             scroll the sidebar
                                                  down 1 page
‘<sidebar-page-up>’                               scroll the sidebar up
                                                  1 page
‘<sidebar-prev>’                                  move the highlight to
                                                  previous mailbox
‘<sidebar-prev-new>’                              move the highlight to
                                                  previous mailbox with
                                                  new mail
‘<sidebar-toggle-visible>’                        make the sidebar
                                                  (in)visible
‘<sort-mailbox>’         o                        sort messages
‘<sort-reverse>’         O                        sort messages in
                                                  reverse order
‘<sync-mailbox>’         $                        save changes to
                                                  mailbox
‘<tag-pattern>’          T                        tag messages matching
                                                  a pattern
‘<tag-subthread>’                                 tag the current
                                                  subthread
‘<tag-thread>’           Esc t                    tag the current thread
‘<toggle-new>’           N                        toggle a message’s
                                                  ’new’ flag
‘<toggle-write>’         %                        toggle whether the
                                                  mailbox will be
                                                  rewritten
‘<undelete-message>’     u                        undelete the current
                                                  entry
‘<undelete-pattern>’     U                        undelete messages
                                                  matching a pattern
‘<undelete-subthread>’   Esc u                    undelete all messages
                                                  in subthread
‘<undelete-thread>’      ^U                       undelete all messages
                                                  in thread
‘<untag-pattern>’        ^T                       untag messages
                                                  matching a pattern
‘<view-attachments>’     v                        show MIME attachments


File: mutt.info,  Node: Pager Menu,  Next: Alias Menu <1>,  Prev: Index Menu,  Up: Functions <1>

9.4.3 Pager Menu
----------------


   *Default Pager Menu Bindings*

Function                 Default key              Description
‘<background-compose-menu>’B                      list and select
                                                  backgrounded compose
                                                  sessions
‘<bottom>’               <End>                    jump to the bottom of
                                                  the message
‘<bounce-message>’       b                        remail a message to
                                                  another user
‘<break-thread>’         #                        break the thread in
                                                  two
‘<browse-mailboxes>’     y                        select a new mailbox
                                                  from the browser
‘<browse-mailboxes-readonly>’                     select a new mailbox
                                                  from the browser in
                                                  read only mode
‘<buffy-list>’           .                        list mailboxes with
                                                  new mail
‘<change-folder>’        c                        open a different
                                                  folder
‘<change-folder-readonly>’Esc c                   open a different
                                                  folder in read only
                                                  mode
‘<check-stats>’                                   calculate message
                                                  statistics for all
                                                  mailboxes
‘<check-traditional-pgp>’Esc P                    check for classic PGP
‘<clear-flag>’           W                        clear a status flag
                                                  from a message
‘<compose-to-sender>’                             compose new message to
                                                  the current message
                                                  sender
‘<copy-message>’         C                        copy a message to a
                                                  file/mailbox
‘<create-alias>’         a                        create an alias from a
                                                  message sender
‘<decode-copy>’          Esc C                    make decoded
                                                  (text/plain) copy
‘<decode-save>’          Esc s                    make decoded copy
                                                  (text/plain) and
                                                  delete
‘<decrypt-copy>’                                  make decrypted copy
‘<decrypt-save>’                                  make decrypted copy
                                                  and delete
‘<delete-message>’       d                        delete the current
                                                  entry
‘<delete-subthread>’     Esc d                    delete all messages in
                                                  subthread
‘<delete-thread>’        ^D                       delete all messages in
                                                  thread
‘<display-address>’      @                        display full address
                                                  of sender
‘<display-toggle-weed>’  h                        display message and
                                                  toggle header weeding
‘<edit>’                 e                        edit the raw message
‘<edit-label>’           Y                        add, change, or delete
                                                  a message’s label
‘<edit-type>’            ^E                       edit attachment
                                                  content type
‘<enter-command>’        :                        enter a muttrc command
‘<error-history>’                                 display recent history
                                                  of error messages
‘<exit>’                 i                        exit this menu
‘<exit>’                 q                        exit this menu
‘<exit>’                 x                        exit this menu
‘<extract-keys>’         ^K                       extract supported
                                                  public keys
‘<flag-message>’         F                        toggle a message’s
                                                  ’important’ flag
‘<forget-passphrase>’    ^F                       wipe passphrase(s)
                                                  from memory
‘<forward-message>’      f                        forward a message with
                                                  comments
‘<group-chat-reply>’                              reply to all
                                                  recipients preserving
                                                  To/Cc
‘<group-reply>’          g                        reply to all
                                                  recipients
‘<half-down>’                                     scroll down 1/2 page
‘<half-up>’                                       scroll up 1/2 page
‘<help>’                 ?                        this screen
‘<imap-fetch-mail>’                               force retrieval of
                                                  mail from IMAP server
‘<imap-logout-all>’                               logout from all IMAP
                                                  servers
‘<jump>’                 1                        jump to an index
                                                  number
‘<jump>’                 2                        jump to an index
                                                  number
‘<jump>’                 3                        jump to an index
                                                  number
‘<jump>’                 4                        jump to an index
                                                  number
‘<jump>’                 5                        jump to an index
                                                  number
‘<jump>’                 6                        jump to an index
                                                  number
‘<jump>’                 7                        jump to an index
                                                  number
‘<jump>’                 8                        jump to an index
                                                  number
‘<jump>’                 9                        jump to an index
                                                  number
‘<link-threads>’         &                        link tagged message to
                                                  the current one
‘<list-action>’          Esc L                    perform mailing list
                                                  action
‘<list-reply>’           L                        reply to specified
                                                  mailing list
‘<mail>’                 m                        compose a new mail
                                                  message
‘<mail-key>’             Esc k                    mail a PGP public key
‘<mark-as-new>’          N                        toggle a message’s
                                                  ’new’ flag
‘<next-entry>’           J                        move to the next entry
‘<next-line>’            <Enter>                  scroll down one line
‘<next-line>’            <Keypadenter>            scroll down one line
‘<next-line>’            <Return>                 scroll down one line
‘<next-new>’                                      jump to the next new
                                                  message
‘<next-new-then-unread>’ <Tab>                    jump to the next new
                                                  or unread message
‘<next-page>’            <Pagedown>               move to the next page
‘<next-page>’            <Space>                  move to the next page
‘<next-subthread>’       Esc n                    jump to the next
                                                  subthread
‘<next-thread>’          ^N                       jump to the next
                                                  thread
‘<next-undeleted>’       <Down>                   move to the next
                                                  undeleted message
‘<next-undeleted>’       <Right>                  move to the next
                                                  undeleted message
‘<next-undeleted>’       j                        move to the next
                                                  undeleted message
‘<next-unread>’                                   jump to the next
                                                  unread message
‘<next-unread-mailbox>’                           open next mailbox with
                                                  new mail
‘<parent-message>’       P                        jump to parent message
                                                  in thread
‘<pipe-message>’         |                        pipe
                                                  message/attachment to
                                                  a shell command
‘<previous-entry>’       K                        move to the previous
                                                  entry
‘<previous-line>’        <Backspace>              scroll up one line
‘<previous-new>’                                  jump to the previous
                                                  new message
‘<previous-new-then-unread>’                      jump to the previous
                                                  new or unread message
‘<previous-page>’        <Pageup>                 move to the previous
                                                  page
‘<previous-page>’        -                        move to the previous
                                                  page
‘<previous-subthread>’   Esc p                    jump to previous
                                                  subthread
‘<previous-thread>’      ^P                       jump to previous
                                                  thread
‘<previous-undeleted>’   <Left>                   move to the previous
                                                  undeleted message
‘<previous-undeleted>’   <Up>                     move to the previous
                                                  undeleted message
‘<previous-undeleted>’   k                        move to the previous
                                                  undeleted message
‘<previous-unread>’                               jump to the previous
                                                  unread message
‘<print-message>’        p                        print the current
                                                  entry
‘<purge-message>’                                 delete the current
                                                  entry, bypassing the
                                                  trash folder
‘<quit>’                 Q                        save changes to
                                                  mailbox and quit
‘<read-subthread>’       Esc r                    mark the current
                                                  subthread as read
‘<read-thread>’          ^R                       mark the current
                                                  thread as read
‘<recall-message>’       R                        recall a postponed
                                                  message
‘<redraw-screen>’        ^L                       clear and redraw the
                                                  screen
‘<reply>’                r                        reply to a message
‘<resend-message>’       Esc e                    use the current
                                                  message as a template
                                                  for a new one
‘<root-message>’                                  jump to root message
                                                  in thread
‘<save-message>’         s                        save
                                                  message/attachment to
                                                  a mailbox/file
‘<search>’               /                        search for a regular
                                                  expression
‘<search-next>’          n                        search for next match
‘<search-opposite>’                               search for next match
                                                  in opposite direction
‘<search-reverse>’       Esc /                    search backwards for a
                                                  regular expression
‘<search-toggle>’        \\                       toggle search pattern
                                                  coloring
‘<set-flag>’             w                        set a status flag on a
                                                  message
‘<shell-escape>’         !                        invoke a command in a
                                                  subshell
‘<show-version>’         V                        show the Mutt version
                                                  number and date
‘<sidebar-first>’                                 move the highlight to
                                                  the first mailbox
‘<sidebar-last>’                                  move the highlight to
                                                  the last mailbox
‘<sidebar-next>’                                  move the highlight to
                                                  next mailbox
‘<sidebar-next-new>’                              move the highlight to
                                                  next mailbox with new
                                                  mail
‘<sidebar-open>’                                  open highlighted
                                                  mailbox
‘<sidebar-page-down>’                             scroll the sidebar
                                                  down 1 page
‘<sidebar-page-up>’                               scroll the sidebar up
                                                  1 page
‘<sidebar-prev>’                                  move the highlight to
                                                  previous mailbox
‘<sidebar-prev-new>’                              move the highlight to
                                                  previous mailbox with
                                                  new mail
‘<sidebar-toggle-visible>’                        make the sidebar
                                                  (in)visible
‘<skip-headers>’         H                        skip beyond headers
‘<skip-quoted>’          S                        skip beyond quoted
                                                  text
‘<sort-mailbox>’         o                        sort messages
‘<sort-reverse>’         O                        sort messages in
                                                  reverse order
‘<sync-mailbox>’         $                        save changes to
                                                  mailbox
‘<tag-message>’          t                        tag the current entry
‘<toggle-quoted>’        T                        toggle display of
                                                  quoted text
‘<toggle-write>’         %                        toggle whether the
                                                  mailbox will be
                                                  rewritten
‘<top>’                  <Home>                   jump to the top of the
                                                  message
‘<top>’                  ^                        jump to the top of the
                                                  message
‘<undelete-message>’     u                        undelete the current
                                                  entry
‘<undelete-subthread>’   Esc u                    undelete all messages
                                                  in subthread
‘<undelete-thread>’      ^U                       undelete all messages
                                                  in thread
‘<view-attachments>’     v                        show MIME attachments
‘<what-key>’                                      display the keycode
                                                  for a key press


File: mutt.info,  Node: Alias Menu <1>,  Next: Query Menu,  Prev: Pager Menu,  Up: Functions <1>

9.4.4 Alias Menu
----------------


   *Default Alias Menu Bindings*

Function                 Default key              Description
‘<delete-entry>’         d                        delete the current
                                                  entry
‘<tag-entry>’            <Space>                  tag the current entry
‘<undelete-entry>’       u                        undelete the current
                                                  entry


File: mutt.info,  Node: Query Menu,  Next: Attachment Menu <1>,  Prev: Alias Menu <1>,  Up: Functions <1>

9.4.5 Query Menu
----------------


   *Default Query Menu Bindings*

Function                 Default key              Description
‘<create-alias>’         a                        create an alias from a
                                                  message sender
‘<mail>’                 m                        compose a new mail
                                                  message
‘<query>’                Q                        query external program
                                                  for addresses
‘<query-append>’         A                        append new query
                                                  results to current
                                                  results


File: mutt.info,  Node: Attachment Menu <1>,  Next: Compose Menu <2>,  Prev: Query Menu,  Up: Functions <1>

9.4.6 Attachment Menu
---------------------


   *Default Attachment Menu Bindings*

Function                 Default key              Description
‘<bounce-message>’       b                        remail a message to
                                                  another user
‘<check-traditional-pgp>’Esc P                    check for classic PGP
‘<collapse-parts>’       v                        Toggle display of
                                                  subparts
‘<compose-to-sender>’                             compose new message to
                                                  the current message
                                                  sender
‘<delete-entry>’         d                        delete the current
                                                  entry
‘<display-toggle-weed>’  h                        display message and
                                                  toggle header weeding
‘<edit-type>’            ^E                       edit attachment
                                                  content type
‘<extract-keys>’         ^K                       extract supported
                                                  public keys
‘<forget-passphrase>’    ^F                       wipe passphrase(s)
                                                  from memory
‘<forward-message>’      f                        forward a message with
                                                  comments
‘<group-chat-reply>’                              reply to all
                                                  recipients preserving
                                                  To/Cc
‘<group-reply>’          g                        reply to all
                                                  recipients
‘<list-reply>’           L                        reply to specified
                                                  mailing list
‘<pipe-entry>’           |                        pipe
                                                  message/attachment to
                                                  a shell command
‘<print-entry>’          p                        print the current
                                                  entry
‘<reply>’                r                        reply to a message
‘<resend-message>’       Esc e                    use the current
                                                  message as a template
                                                  for a new one
‘<save-entry>’           s                        save
                                                  message/attachment to
                                                  a mailbox/file
‘<undelete-entry>’       u                        undelete the current
                                                  entry
‘<view-attach>’          <Enter>                  view attachment using
                                                  mailcap entry if
                                                  necessary
‘<view-attach>’          <Keypadenter>            view attachment using
                                                  mailcap entry if
                                                  necessary
‘<view-attach>’          <Return>                 view attachment using
                                                  mailcap entry if
                                                  necessary
‘<view-mailcap>’         m                        force viewing of
                                                  attachment using
                                                  mailcap
‘<view-pager>’                                    view attachment in
                                                  pager using
                                                  copiousoutput mailcap
                                                  entry
‘<view-text>’            T                        view attachment as
                                                  text


File: mutt.info,  Node: Compose Menu <2>,  Next: Postpone Menu,  Prev: Attachment Menu <1>,  Up: Functions <1>

9.4.7 Compose Menu
------------------


   *Default Compose Menu Bindings*

Function                 Default key              Description
‘<attach-file>’          a                        attach file(s) to this
                                                  message
‘<attach-key>’           Esc k                    attach a PGP public
                                                  key
‘<attach-message>’       A                        attach message(s) to
                                                  this message
‘<autocrypt-menu>’       o                        show autocrypt compose
                                                  menu options
‘<copy-file>’            C                        save
                                                  message/attachment to
                                                  a mailbox/file
‘<detach-file>’          D                        delete the current
                                                  entry
‘<display-toggle-weed>’  h                        display message and
                                                  toggle header weeding
‘<edit-bcc>’             b                        edit the BCC list
‘<edit-cc>’              c                        edit the CC list
‘<edit-description>’     d                        edit attachment
                                                  description
‘<edit-encoding>’        ^E                       edit attachment
                                                  transfer-encoding
‘<edit-fcc>’             f                        enter a file to save a
                                                  copy of this message
                                                  in
‘<edit-file>’            ^X e                     edit the file to be
                                                  attached
‘<edit-from>’            Esc f                    edit the from field
‘<edit-headers>’         E                        edit the message with
                                                  headers
‘<edit-message>’         e                        edit the message
‘<edit-mime>’            m                        edit attachment using
                                                  mailcap entry
‘<edit-reply-to>’        r                        edit the Reply-To
                                                  field
‘<edit-subject>’         s                        edit the subject of
                                                  this message
‘<edit-to>’              t                        edit the TO list
‘<edit-type>’            ^T                       edit attachment
                                                  content type
‘<filter-entry>’         F                        filter attachment
                                                  through a shell
                                                  command
‘<forget-passphrase>’    ^F                       wipe passphrase(s)
                                                  from memory
‘<get-attachment>’       G                        get a temporary copy
                                                  of an attachment
‘<ispell>’               i                        run ispell on the
                                                  message
‘<mix>’                  M                        send the message
                                                  through a mixmaster
                                                  remailer chain
‘<move-down>’                                     move attachment down
                                                  in compose menu list
‘<move-up>’                                       move attachment up in
                                                  compose menu list
‘<new-mime>’             n                        compose new attachment
                                                  using mailcap entry
‘<pgp-menu>’             p                        show PGP options
‘<pipe-entry>’           |                        pipe
                                                  message/attachment to
                                                  a shell command
‘<postpone-message>’     P                        save this message to
                                                  send later
‘<print-entry>’          l                        print the current
                                                  entry
‘<rename-attachment>’    ^O                       send attachment with a
                                                  different name
‘<rename-file>’          R                        rename/move an
                                                  attached file
‘<send-message>’         y                        send the message
‘<smime-menu>’           S                        show S/MIME options
‘<tag-entry>’            T                        tag the current entry
‘<toggle-disposition>’   ^D                       toggle disposition
                                                  between
                                                  inline/attachment
‘<toggle-recode>’                                 toggle recoding of
                                                  this attachment
‘<toggle-unlink>’        u                        toggle whether to
                                                  delete file after
                                                  sending it
‘<update-encoding>’      U                        update an attachment’s
                                                  encoding info
‘<view-alt>’             v                        view
                                                  multipart/alternative
‘<view-alt-mailcap>’     V                        view
                                                  multipart/alternative
                                                  using mailcap
‘<view-alt-pager>’                                view
                                                  multipart/alternative
                                                  in pager using
                                                  copiousoutput mailcap
                                                  entry
‘<view-alt-text>’        Esc v                    view
                                                  multipart/alternative
                                                  as text
‘<view-attach>’          <Enter>                  view attachment using
                                                  mailcap entry if
                                                  necessary
‘<view-attach>’          <Keypadenter>            view attachment using
                                                  mailcap entry if
                                                  necessary
‘<view-attach>’          <Return>                 view attachment using
                                                  mailcap entry if
                                                  necessary
‘<view-mailcap>’                                  force viewing of
                                                  attachment using
                                                  mailcap
‘<view-pager>’                                    view attachment in
                                                  pager using
                                                  copiousoutput mailcap
                                                  entry
‘<view-text>’                                     view attachment as
                                                  text
‘<write-fcc>’            w                        write the message to a
                                                  folder


File: mutt.info,  Node: Postpone Menu,  Next: Browser Menu,  Prev: Compose Menu <2>,  Up: Functions <1>

9.4.8 Postpone Menu
-------------------


   *Default Postpone Menu Bindings*

Function                 Default key              Description
‘<delete-entry>’         d                        delete the current
                                                  entry
‘<undelete-entry>’       u                        undelete the current
                                                  entry


File: mutt.info,  Node: Browser Menu,  Next: Pgp Menu,  Prev: Postpone Menu,  Up: Functions <1>

9.4.9 Browser Menu
------------------


   *Default Browser Menu Bindings*

Function                 Default key              Description
‘<buffy-list>’           .                        list mailboxes with
                                                  new mail
‘<change-dir>’           c                        change directories
‘<check-new>’                                     check mailboxes for
                                                  new mail
‘<create-mailbox>’       C                        create a new mailbox
                                                  (IMAP only)
‘<delete-mailbox>’       d                        delete the current
                                                  mailbox (IMAP only)
‘<descend-directory>’                             descend into a
                                                  directory
‘<display-filename>’     @                        display the currently
                                                  selected file’s name
‘<enter-mask>’           m                        enter a file mask
‘<rename-mailbox>’       r                        rename the current
                                                  mailbox (IMAP only)
‘<select-new>’           N                        select a new file in
                                                  this directory
‘<sort>’                 o                        sort messages
‘<sort-reverse>’         O                        sort messages in
                                                  reverse order
‘<subscribe>’            s                        subscribe to current
                                                  mailbox (IMAP only)
‘<toggle-mailboxes>’     <Tab>                    toggle whether to
                                                  browse mailboxes or
                                                  all files
‘<toggle-subscribed>’    T                        toggle view
                                                  all/subscribed
                                                  mailboxes (IMAP only)
‘<unsubscribe>’          u                        unsubscribe from
                                                  current mailbox (IMAP
                                                  only)
‘<view-file>’            <Space>                  view file


File: mutt.info,  Node: Pgp Menu,  Next: Smime Menu,  Prev: Browser Menu,  Up: Functions <1>

9.4.10 Pgp Menu
---------------


   *Default Pgp Menu Bindings*

Function                 Default key              Description
‘<verify-key>’           c                        verify a PGP public
                                                  key
‘<view-name>’            %                        view the key’s user id


File: mutt.info,  Node: Smime Menu,  Next: Mixmaster Menu,  Prev: Pgp Menu,  Up: Functions <1>

9.4.11 Smime Menu
-----------------


   *Default Smime Menu Bindings*

Function                 Default key              Description
‘<verify-key>’           c                        verify a PGP public
                                                  key
‘<view-name>’            %                        view the key’s user id


File: mutt.info,  Node: Mixmaster Menu,  Next: Editor Menu,  Prev: Smime Menu,  Up: Functions <1>

9.4.12 Mixmaster Menu
---------------------


   *Default Mixmaster Menu Bindings*

Function                 Default key              Description
‘<accept>’               <Enter>                  accept the chain
                                                  constructed
‘<accept>’               <Keypadenter>            accept the chain
                                                  constructed
‘<accept>’               <Return>                 accept the chain
                                                  constructed
‘<append>’               a                        append a remailer to
                                                  the chain
‘<chain-next>’           <Right>                  select the next
                                                  element of the chain
‘<chain-next>’           l                        select the next
                                                  element of the chain
‘<chain-prev>’           <Left>                   select the previous
                                                  element of the chain
‘<chain-prev>’           h                        select the previous
                                                  element of the chain
‘<delete>’               d                        delete a remailer from
                                                  the chain
‘<insert>’               i                        insert a remailer into
                                                  the chain
‘<select-entry>’         <Space>                  select the current
                                                  entry


File: mutt.info,  Node: Editor Menu,  Next: Autocrypt Account Menu,  Prev: Mixmaster Menu,  Up: Functions <1>

9.4.13 Editor Menu
------------------


   *Default Editor Menu Bindings*

Function                 Default key              Description
‘<backspace>’            <Backspace>              delete the char in
                                                  front of the cursor
‘<backspace>’            <Delete>                 delete the char in
                                                  front of the cursor
‘<backward-char>’        <Left>                   move the cursor one
                                                  character to the left
‘<backward-char>’        ^B                       move the cursor one
                                                  character to the left
‘<backward-word>’        Esc b                    move the cursor to the
                                                  beginning of the word
‘<bol>’                  <Home>                   jump to the beginning
                                                  of the line
‘<bol>’                  ^A                       jump to the beginning
                                                  of the line
‘<buffy-cycle>’          <Space>                  cycle among incoming
                                                  mailboxes
‘<capitalize-word>’      Esc c                    capitalize the word
‘<complete>’             <Tab>                    complete filename or
                                                  alias
‘<complete-query>’       ^T                       complete address with
                                                  query
‘<delete-char>’          ^D                       delete the char under
                                                  the cursor
‘<downcase-word>’        Esc l                    convert the word to
                                                  lower case
‘<eol>’                  <End>                    jump to the end of the
                                                  line
‘<eol>’                  ^E                       jump to the end of the
                                                  line
‘<forward-char>’         <Right>                  move the cursor one
                                                  character to the right
‘<forward-char>’         ^F                       move the cursor one
                                                  character to the right
‘<forward-word>’         Esc f                    move the cursor to the
                                                  end of the word
‘<history-down>’         <Down>                   scroll down through
                                                  the history list
‘<history-down>’         ^N                       scroll down through
                                                  the history list
‘<history-search>’       ^R                       search through the
                                                  history list
‘<history-up>’           <Up>                     scroll up through the
                                                  history list
‘<history-up>’           ^P                       scroll up through the
                                                  history list
‘<kill-eol>’             ^K                       delete chars from
                                                  cursor to end of line
‘<kill-eow>’             Esc d                    delete chars from the
                                                  cursor to the end of
                                                  the word
‘<kill-line>’            ^U                       delete all chars on
                                                  the line
‘<kill-word>’            ^W                       delete the word in
                                                  front of the cursor
‘<quote-char>’           ^V                       quote the next typed
                                                  key
‘<transpose-chars>’                               transpose character
                                                  under cursor with
                                                  previous
‘<upcase-word>’          Esc u                    convert the word to
                                                  upper case


File: mutt.info,  Node: Autocrypt Account Menu,  Next: List Menu <1>,  Prev: Editor Menu,  Up: Functions <1>

9.4.14 Autocrypt Account Menu
-----------------------------


   *Default Autocrypt Account Menu Bindings*

Function                 Default key              Description
‘<create-account>’       c                        create a new autocrypt
                                                  account
‘<delete-account>’       D                        delete the current
                                                  account
‘<toggle-active>’        a                        toggle the current
                                                  account
                                                  active/inactive
‘<toggle-prefer-encrypt>’p                        toggle the current
                                                  account prefer-encrypt
                                                  flag


File: mutt.info,  Node: List Menu <1>,  Prev: Autocrypt Account Menu,  Up: Functions <1>

9.4.15 List Menu
----------------


   *Default List Menu Bindings*

Function                 Default key              Description
‘<list-archive>’         a                        retrieve list archive
                                                  information
‘<list-help>’            h                        retrieve list help
‘<list-owner>’           o                        contact list owner
‘<list-post>’            p                        post to mailing list
‘<list-subscribe>’       s                        subscribe to mailing
                                                  list
‘<list-unsubscribe>’     u                        unsubscribe from
                                                  mailing list


File: mutt.info,  Node: Miscellany <1>,  Prev: Reference,  Up: Top

10 Miscellany
*************

* Menu:

* Acknowledgements::
* About This Document::


File: mutt.info,  Node: Acknowledgements,  Next: About This Document,  Up: Miscellany <1>

10.1 Acknowledgements
=====================

Kari Hurtta <kari.hurtta@fmi.fi> co-developed the original MIME parsing
code back in the ELM-ME days.

   The following people have been very helpful to the development of
Mutt:

   • Vikas Agnihotri <vikasa@writeme.com>

   • Francois Berjon <Francois.Berjon@aar.alcatel-alsthom.fr>

   • Aric Blumer <aric@fore.com>

   • John Capo <jc@irbs.com>

   • David Champion <dgc@uchicago.edu>

   • Brendan Cully <brendan@kublai.com>

   • Liviu Daia <daia@stoilow.imar.ro>

   • Thomas E. Dickey <dickey@herndon4.his.com>

   • David DeSimone <fox@convex.hp.com>

   • Nickolay N. Dudorov <nnd@wint.itfs.nsk.su>

   • Ruslan Ermilov <ru@freebsd.org>

   • Edmund Grimley Evans <edmundo@rano.org>

   • Michael Finken <finken@conware.de>

   • Sven Guckes <guckes@math.fu-berlin.de>

   • Lars Hecking <lhecking@nmrc.ie>

   • Mark Holloman <holloman@nando.net>

   • Andreas Holzmann <holzmann@fmi.uni-passau.de>

   • Marco d’Itri <md@linux.it>

   • Björn Jacke <bjacke@suse.com>

   • Byrial Jensen <byrial@image.dk>

   • David Jeske <jeske@igcom.net>

   • Christophe Kalt <kalt@hugo.int-evry.fr>

   • Tommi Komulainen <Tommi.Komulainen@iki.fi>

   • Felix von Leitner (a.k.a ‘Fefe’) <leitner@math.fu-berlin.de>

   • Brandon Long <blong@fiction.net>

   • Jimmy Mäkelä <jmy@flashback.net>

   • Lars Marowsky-Bree <lmb@pointer.in-minden.de>

   • Kevin J. McCarthy <kevin@8t8.us>

   • Thomas ‘Mike’ Michlmayr <mike@cosy.sbg.ac.at>

   • Andrew W. Nosenko <awn@bcs.zp.ua>

   • David O’Brien <obrien@Nuxi.cs.ucdavis.edu>

   • Clint Olsen <olsenc@ichips.intel.com>

   • Park Myeong Seok <pms@romance.kaist.ac.kr>

   • Thomas Parmelan <tom@ankh.fr.eu.org>

   • Ollivier Robert <roberto@keltia.freenix.fr>

   • Thomas Roessler <roessler@does-not-exist.org>

   • Roland Rosenfeld <roland@spinnaker.de>

   • Rocco Rutte <pdmef@gmx.net>

   • TAKIZAWA Takashi <taki@luna.email.ne.jp>

   • Allain Thivillon <Allain.Thivillon@alma.fr>

   • Gero Treuner <gero@70t.de>

   • Vsevolod Volkov <vvv@lucky.net>

   • Ken Weinert <kenw@ihs.com>


File: mutt.info,  Node: About This Document,  Prev: Acknowledgements,  Up: Miscellany <1>

10.2 About This Document
========================

This document was written in DocBook (http://docbook.sourceforge.net),
and then rendered using the Gnome XSLT toolkit
(http://xmlsoft.org/XSLT/).



Tag Table:
Node: Top201
Node: Introduction3840
Node: Mutt Home Page4432
Node: Mailing Lists4638
Node: Getting Mutt5299
Node: Mutt Online Resources5769
Node: Contributing to Mutt6446
Node: Typographical Conventions7216
Ref: Typographical conventions for special terms7587
Node: Copyright8393
Node: Getting Started9278
Node: Core Concepts10363
Node: Screens and Menus13042
Node: Index13341
Node: Pager14193
Node: File Browser15145
Node: Sidebar15993
Node: Help16255
Node: Compose Menu16697
Node: Alias Menu17267
Node: Attachment Menu17820
Node: List Menu18437
Node: Moving Around in Menus18880
Ref: Most common navigation keys in entry-based menus19290
Ref: Most common navigation keys in page-based menus20246
Node: Editing Input Fields20808
Node: Introduction <1>21037
Ref: Most common line editor keys21467
Node: History24657
Node: Reading Mail25938
Node: The Message Index26532
Ref: Most common message index keys26908
Ref: Message status flags29727
Ref: Message recipient flags30883
Node: The Pager31397
Ref: Most common pager keys31804
Ref: ANSI escape sequences33898
Ref: Color sequences34722
Node: Threaded Mode35891
Ref: Most common thread mode keys36505
Ref: Special Thread Characters38993
Node: Miscellaneous Functions41276
Ref: check-stats41526
Ref: create-alias41752
Ref: check-traditional-pgp42296
Ref: edit42704
Ref: edit-type43089
Ref: enter-command43861
Ref: extract-keys44153
Ref: forget-passphrase44322
Ref: list-reply44464
Ref: pipe-message45137
Ref: resend-message45525
Ref: shell-escape46127
Ref: skip-headers46540
Ref: skip-quoted46643
Ref: toggle-quoted46809
Node: Sending Mail47174
Node: Introduction <2>47518
Ref: Most common mail sending keys47781
Ref: Most common compose menu keys51541
Node: Editing the Message Header54920
Node: Fcc; Pseudo Header55459
Node: Attach; Pseudo Header55836
Node: Pgp; Pseudo Header56405
Node: In-Reply-To; Header56952
Node: Sending Cryptographically Signed/Encrypted Messages57742
Ref: PGP key menu flags59507
Node: Sending Format=Flowed Messages61079
Node: Concept61400
Node: Mutt Support62103
Node: Editor Considerations63180
Node: Reformatting63770
Node: Background Editing64803
Node: Forwarding and Bouncing Mail68236
Node: Postponing Mail70518
Node: Encryption and Signing71807
Node: OpenPGP Configuration73243
Node: S/MIME Configuration74443
Node: Configuration75567
Node: Location of Initialization Files76888
Node: Starter Muttrc78682
Node: Syntax of Initialization Files79317
Ref: Multiple configuration commands per line79743
Ref: Commenting configuration files80043
Ref: Escaping quotes in configuration files80959
Ref: Splitting long configuration commands over several lines81541
Ref: Using external command's output in configuration files82134
Ref: Preventing the output of backticks from being parsed82589
Ref: Using environment variables in configuration files82850
Ref: Using MuttLisp expressions83602
Node: Address Groups85174
Node: Defining/Using Aliases88213
Ref: Configuring external alias files90146
Node: Changing the Default Key Bindings91147
Ref: maps91713
Ref: Symbolic key names94204
Node: Terminal Keybindings96103
Node: Enter versus Return97220
Node: Changing the current working directory98039
Node: Defining Aliases for Character Sets98583
Node: Setting Variables Based Upon Mailbox99309
Ref: Setting sort method based on mailbox name101454
Node: Keyboard Macros101586
Node: Using Color and Mono Video Attributes103603
Ref: mono108119
Node: Message Header Display108542
Node: Header Display108827
Node: Selecting Headers109516
Ref: Header weeding110539
Node: Ordering Displayed Headers110933
Ref: Configuring header display order111489
Node: Alternative Addresses111580
Node: Mailing Lists <1>113889
Ref: subscribe114062
Node: Using Multiple Spool Mailboxes117875
Node: Monitoring Incoming Mail118924
Node: User-Defined Headers121596
Ref: Defining custom headers122248
Node: Specify Default Save Mailbox123111
Ref: Using %-expandos in save-hook123765
Node: Specify Default Fcc; Mailbox When Composing124202
Node: Specify Default Save Filename and Default Fcc; Mailbox at Once125564
Node: Change Settings Based Upon Message Recipients126460
Ref: reply-hook126779
Ref: send2-hook126779
Node: Change Settings Before Formatting a Message129259
Node: Choosing the Cryptographic Key of the Recipient130168
Node: Dynamically Changing $index_format using Patterns131581
Node: Adding Key Sequences to the Keyboard Buffer133337
Ref: Embedding push in folder-hook134095
Node: Executing Functions134893
Node: Message Scoring135337
Node: Spam Detection136918
Ref: Configuring spam detection139769
Node: Setting and Querying Variables143048
Node: Variable Types143370
Node: Commands144817
Node: User-Defined Variables147384
Node: Introduction <3>147631
Node: Examples148416
Ref: Using user-defined variables for config file readability148725
Ref: Using user-defined variables for backing up other config option values149269
Ref: Deferring user-defined variable expansion to runtime150043
Node: Type Conversions150526
Ref: Type conversions using variables151275
Node: Reading Initialization Commands From Another File152533
Node: Removing Hooks153346
Node: Format Strings153824
Node: Basic usage154095
Node: Conditionals156833
Node: Filters158046
Ref: Using external filters in format strings158626
Node: Padding159203
Node: Bytes size display160993
Node: Control allowed header fields in a mailto; URL162401
Node: Advanced Usage163313
Node: Character Set Handling164115
Node: Regular Expressions167712
Ref: POSIX regular expression character classes170441
Ref: Regular expression repetition operators173475
Ref: GNU regular expression extensions175272
Node: Patterns; Searching; Limiting and Tagging176581
Node: Pattern Modifier176924
Ref: Pattern modifiers177282
Ref: Matching all addresses in address lists186447
Ref: Matching restricted to aliases186721
Ref: Matching any defined alias186923
Node: Simple Searches186970
Ref: Simple search keywords188116
Node: Nesting and Boolean Operators188863
Ref: Using boolean operators in patterns189751
Node: Searching by Date190665
Node: Absolute Dates190955
Ref: Date units192039
Node: Relative Dates192436
Ref: Relative date units192924
Node: Marking Messages193683
Node: Using Tags194520
Node: Using Hooks196130
Ref: Specifying a default hook198243
Node: Message Matching in Hooks198673
Node: Mailbox Matching in Hooks200478
Node: Managing the Environment202148
Node: External Address Queries202716
Node: Mailbox Formats204916
Node: Mailbox Shortcuts207905
Ref: Mailbox shortcuts208333
Node: Handling Mailing Lists210603
Node: Display Munging216691
Ref: Subject Munging218124
Node: New Mail Detection218554
Node: How New Mail Detection Works218996
Node: Polling For New Mail221326
Node: Monitoring New Mail223147
Node: Calculating Mailbox Message Counts224465
Node: Editing Threads225188
Node: Linking Threads225674
Node: Breaking Threads226413
Node: Delivery Status Notification [DSN] Support226927
Node: Start a WWW Browser on URLs228195
Node: Echoing Text228787
Node: Message Composition Flow229388
Node: Batch Composition Flow231760
Node: Using MuttLisp [EXPERIMENTAL]233549
Node: Running a command generated by MuttLisp234388
Node: Interpolating MuttLisp in a Command Argument235168
Node: MuttLisp Syntax236436
Node: MuttLisp Functions237617
Node: concat237868
Node: quote238078
Node: equal238585
Node: not239354
Node: and239712
Node: or240123
Node: if240497
Node: Examples <1>241482
Node: Miscellany243440
Node: Mutt's MIME Support244570
Node: Using MIME in Mutt245536
Node: MIME Overview245815
Node: Viewing MIME Messages in the Pager248001
Node: The Attachment Menu249149
Node: Viewing Attachments250369
Node: The Compose Menu251748
Node: MIME Type Configuration with mime_types253504
Ref: mime_types254599
Ref: Supported MIME types255774
Node: MIME Viewer Configuration with Mailcap256858
Node: The Basics of the Mailcap File258585
Node: Secure Use of Mailcap261576
Node: Advanced Mailcap Usage263258
Node: Optional Fields263541
Node: Search Order268097
Node: Command Expansion270372
Node: Example Mailcap Files272141
Node: MIME Autoview273968
Node: MIME Multipart/Alternative275805
Node: Attachment Searching and Counting278052
Ref: Attachment counting281307
Node: MIME Lookup283622
Node: Optional Features284733
Node: General Notes285204
Node: Enabling/Disabling Features285387
Node: URL Syntax286147
Ref: URLs287659
Node: SSL/TLS Support287752
Node: STARTTLS288347
Node: Tunnel289410
Node: POP3 Support290351
Ref: fetch-mail291576
Node: IMAP Support292071
Node: The IMAP Folder Browser293676
Node: Authentication295046
Node: SMTP Support297066
Node: OAUTHBEARER Support298024
Node: XOAUTH2 Support299453
Node: Managing Multiple Accounts300208
Ref: Managing multiple accounts301950
Node: Local Caching303055
Node: Header Caching303687
Node: Body Caching304898
Node: Cache Directories305655
Node: Maintenance306540
Node: Exact Address Generation307475
Node: Sending Anonymous Messages via Mixmaster308271
Node: Sidebar <1>310283
Node: Introduction <4>310588
Node: Variables310849
Ref: Sidebar Variables310982
Node: Functions311784
Ref: Sidebar Functions312005
Node: Commands <1>313316
Node: Colors313895
Ref: Sidebar Colors314010
Node: Sort315193
Ref: Sidebar Sort315300
Node: See Also315966
Node: Compressed Folders Feature316263
Node: Introduction <5>316514
Node: Commands <2>317280
Ref: Not all Hooks are Required317902
Node: Read from compressed mailbox319813
Ref: Example of open-hook320252
Node: Write to a compressed mailbox320572
Ref: Example of close-hook321131
Node: Append to a compressed mailbox321503
Ref: Example of append-hook322474
Node: Empty Files322909
Node: Security323257
Node: Autocrypt323513
Node: Requirements324511
Node: First Run325540
Node: Compose Menu <1>328981
Node: Account Management332768
Node: Alternative Key and Keyring Strategies333613
Node: Security Considerations336815
Node: Passwords337425
Node: Temporary Files338002
Node: Information Leaks338488
Node: mailto;-style Links338696
Node: External Applications339989
Node: Performance Tuning340736
Node: Reading and Writing Mailboxes340997
Node: Reading Messages from Remote Folders342897
Node: Searching and Limiting343944
Node: Reference345203
Node: Command-Line Options345443
Ref: Command line options345779
Node: Configuration Commands350940
Node: Configuration Variables354952
Node: abort_noattach363254
Node: abort_noattach_regexp363628
Node: abort_nosubject364301
Node: abort_unmodified364743
Node: alias_file365188
Node: alias_format366027
Node: allow_8bit366843
Node: allow_ansi367147
Node: arrow_cursor367824
Node: ascii_chars368316
Node: askbcc368634
Node: askcc368908
Node: assumed_charset369189
Node: attach_charset369959
Node: attach_format370771
Node: attach_save_charset_convert373364
Node: attach_save_dir373855
Node: attach_sep374358
Node: attach_split374675
Node: attribution375205
Node: attribution_locale375635
Node: auto_subscribe376284
Node: auto_tag376836
Node: autocrypt377291
Node: autocrypt_acct_format377670
Node: autocrypt_dir378346
Node: autocrypt_reply378753
Node: autoedit379221
Node: background_edit379936
Node: background_confirm_quit380882
Node: background_format381267
Node: beep382418
Node: beep_new382656
Node: bounce382998
Node: bounce_delivered383443
Node: braille_friendly383790
Node: browser_abbreviate_mailboxes384380
Node: browser_sticky_cursor385073
Node: certificate_file385616
Node: change_folder_next386394
Node: charset386836
Node: check_mbox_size387385
Node: check_new388247
Node: collapse_unread388858
Node: compose_confirm_detach_first389157
Node: compose_format389824
Node: config_charset390893
Node: confirmappend391633
Node: confirmcreate391928
Node: connect_timeout392255
Node: content_type392688
Node: copy392961
Node: copy_decode_weed393421
Node: count_alternatives393737
Node: cursor_overlay394508
Node: crypt_autoencrypt394969
Node: crypt_autopgp395708
Node: crypt_autosign396261
Node: crypt_autosmime396889
Node: crypt_confirmhook397451
Node: crypt_opportunistic_encrypt397909
Node: crypt_opportunistic_encrypt_strong_keys398988
Node: crypt_protected_headers_read399910
Node: crypt_protected_headers_save401038
Node: crypt_protected_headers_subject402409
Node: crypt_protected_headers_write403010
Node: crypt_replyencrypt403616
Node: crypt_replysign403952
Node: crypt_replysignencrypted404346
Node: crypt_timestamp405011
Node: crypt_use_gpgme405470
Node: crypt_use_pka406149
Node: crypt_verify_sig406503
Node: date_format406924
Node: default_hook407704
Node: delete408825
Node: delete_untag409379
Node: digest_collapse409751
Node: display_filter410142
Node: dotlock_program410566
Node: dsn_notify410871
Node: dsn_return411832
Node: duplicate_threads412610
Node: edit_headers413077
Node: editor413900
Node: encode_from414689
Node: entropy_file415218
Node: envelope_from_address415524
Node: error_history415902
Node: escape416325
Node: fast_reply416566
Node: fcc_attach417012
Node: fcc_before_send417431
Node: fcc_clear418152
Node: fcc_delimiter418699
Node: flag_safe419274
Node: folder419498
Node: folder_format420109
Node: followup_to422819
Node: force_name423905
Node: forward_attachments424360
Node: forward_attribution_intro424912
Node: forward_attribution_trailer425558
Node: forward_decode426198
Node: forward_decrypt426719
Node: forward_edit427356
Node: forward_format427761
Node: forward_quote428133
Node: from428514
Node: gecos_mask429115
Node: hdrs429988
Node: header430449
Node: header_cache430779
Node: header_cache_compress431455
Node: header_cache_pagesize432078
Node: header_color_partial432580
Node: help433142
Node: hidden_host433778
Node: hide_limited434214
Node: hide_missing434514
Node: hide_thread_subject434802
Node: hide_top_limited435182
Node: hide_top_missing435624
Node: history436034
Node: history_file436381
Node: history_remove_dups436691
Node: honor_disposition437128
Node: honor_followup_to437642
Node: hostname437967
Node: idn_decode439176
Node: idn_encode439540
Node: ignore_linear_white_space439903
Node: ignore_list_reply_to440332
Node: imap_authenticators441194
Node: imap_check_subscribed442162
Node: imap_condstore442641
Node: imap_deflate443245
Node: imap_delim_chars443679
Node: imap_fetch_chunk_size444098
Node: imap_headers444642
Node: imap_idle445475
Node: imap_keepalive445944
Node: imap_list_subscribed446633
Node: imap_login447047
Node: imap_oauth_refresh_command447374
Node: imap_pass447883
Node: imap_passive448453
Node: imap_peek448918
Node: imap_pipeline_depth449355
Node: imap_poll_timeout450003
Node: imap_qresync450440
Node: imap_servernoise450999
Node: imap_user451473
Node: implicit_autoview451813
Node: include452308
Node: include_encrypted452603
Node: include_onlyfirst453180
Node: indent_string453494
Node: index_format454215
Node: ispell464406
Node: keep_flagged464656
Node: local_date_header465059
Node: mail_check465463
Node: mail_check_recent465791
Node: mail_check_stats466252
Node: mail_check_stats_interval467028
Node: mailcap_path467407
Node: mailcap_sanitize467884
Node: maildir_header_cache_verify468399
Node: maildir_trash468877
Node: maildir_check_cur469309
Node: mark_macro_prefix469881
Node: mark_old470259
Node: markers470715
Node: mask471080
Node: mbox471453
Node: mbox_type471780
Node: menu_context472147
Node: menu_move_off472492
Node: menu_scroll472880
Node: message_cache_clean473324
Node: message_cachedir473767
Node: message_format474381
Node: message_id_format474820
Node: meta_key477061
Node: metoo477673
Node: mh_purge478005
Node: mh_seq_flagged478568
Node: mh_seq_replied478833
Node: mh_seq_unseen479106
Node: mime_forward479370
Node: mime_forward_decode480084
Node: mime_forward_rest480523
Node: mime_type_query_command480968
Node: mime_type_query_first481994
Node: mix_entry_format482349
Node: mixmaster483024
Node: move483449
Node: muttlisp_inline_eval483830
Node: narrow_tree484134
Node: net_inc484435
Node: new_mail_command484924
Node: pager485311
Node: pager_context486446
Node: pager_format487071
Node: pager_index_lines487544
Node: pager_skip_quoted_context488493
Node: pager_stop489014
Node: pattern_format489366
Node: pgp_auto_decode489884
Node: pgp_autoinline490532
Node: pgp_check_exit491384
Node: pgp_check_gpg_decrypt_status_fd491766
Node: pgp_clearsign_command492564
Node: pgp_decode_command493101
Node: pgp_decrypt_command494887
Node: pgp_decryption_okay495328
Node: pgp_default_key496102
Node: pgp_encrypt_only_command496726
Node: pgp_encrypt_sign_command497191
Node: pgp_entry_format497652
Node: pgp_export_command498707
Node: pgp_getkeys_command499158
Node: pgp_good_sign499798
Node: pgp_ignore_subkeys500296
Node: pgp_import_command500730
Node: pgp_list_pubring_command501203
Node: pgp_list_secring_command502183
Node: pgp_long_ids503158
Node: pgp_mime_auto503655
Node: pgp_replyinline504133
Node: pgp_retainable_sigs505127
Node: pgp_self_encrypt505698
Node: pgp_show_unusable506050
Node: pgp_sign_as506462
Node: pgp_sign_command506945
Node: pgp_sort_keys507414
Node: pgp_strict_enc508075
Node: pgp_timeout508528
Node: pgp_use_gpg_agent508826
Node: pgp_verify_command509701
Node: pgp_verify_key_command510131
Node: pipe_decode510592
Node: pipe_decode_weed511114
Node: pipe_sep511446
Node: pipe_split511742
Node: pop_auth_try_all512355
Node: pop_authenticators512836
Node: pop_checkinterval513565
Node: pop_delete513915
Node: pop_host514339
Node: pop_last514784
Node: pop_oauth_refresh_command515179
Node: pop_pass515681
Node: pop_reconnect516192
Node: pop_user516487
Node: post_indent_string516784
Node: postpone517262
Node: postponed517638
Node: postpone_encrypt518097
Node: postpone_encrypt_as518667
Node: preconnect519100
Node: print519878
Node: print_command520205
Node: print_decode520472
Node: print_decode_weed521241
Node: print_split521583
Node: prompt_after522301
Node: query_command522754
Node: query_format523456
Node: quit524731
Node: quote_regexp525167
Node: read_inc526006
Node: read_only526965
Node: realname527196
Node: recall527656
Node: record528156
Node: reflow_space_quotes529056
Node: reflow_text529708
Node: reflow_wrap530217
Node: reply_regexp530806
Node: reply_self532690
Node: reply_to533108
Node: resolve533664
Node: resume_draft_files534009
Node: resume_edited_draft_files534521
Node: reverse_alias535356
Node: reverse_name536121
Node: reverse_realname537027
Node: rfc2047_parameters537711
Node: save_address538576
Node: save_empty539021
Node: save_history539515
Node: save_name539822
Node: score540501
Node: score_threshold_delete540906
Node: score_threshold_flag541408
Node: score_threshold_read541774
Node: search_context542267
Node: send_charset542612
Node: send_multipart_alternative543424
Node: send_multipart_alternative_filter544137
Node: sendmail544824
Node: sendmail_wait545912
Node: shell546920
Node: sidebar_delim_chars547216
Node: sidebar_divider_char547953
Node: sidebar_folder_indent548355
Node: sidebar_format548807
Node: sidebar_indent_string550903
Node: sidebar_new_mail_only551419
Node: sidebar_next_new_wrap551802
Node: sidebar_relative_shortpath_indent552289
Node: sidebar_short_path553837
Node: sidebar_sort_method554884
Node: sidebar_use_mailbox_shortcuts555657
Node: sidebar_visible556129
Node: sidebar_width556545
Node: sig_dashes556911
Node: sig_on_top557543
Node: signature557975
Node: simple_search558403
Node: size_show_bytes559168
Node: size_show_fractions559511
Node: size_show_mb559912
Node: size_units_on_left560271
Node: sleep_time560612
Node: smart_wrap561073
Node: smileys561501
Node: smime_ask_cert_label561996
Node: smime_ca_location562382
Node: smime_certificates562746
Node: smime_decrypt_command563418
Node: smime_decrypt_use_default_key565627
Node: smime_default_key566162
Node: smime_encrypt_command567091
Node: smime_encrypt_with567547
Node: smime_get_cert_command567991
Node: smime_get_cert_email_command568477
Node: smime_get_signer_cert_command569105
Node: smime_import_cert_command569723
Node: smime_is_default570204
Node: smime_keys570837
Node: smime_pk7out_command571484
Node: smime_self_encrypt571995
Node: smime_sign_as572367
Node: smime_sign_command572767
Node: smime_sign_digest_alg573414
Node: smime_sign_opaque_command573856
Node: smime_timeout574435
Node: smime_verify_command574756
Node: smime_verify_opaque_command575237
Node: smtp_authenticators575746
Node: smtp_oauth_refresh_command576459
Node: smtp_pass576977
Node: smtp_url577568
Node: sort578095
Node: sort_alias579089
Node: sort_aux579528
Node: sort_browser580786
Node: sort_browser_mailboxes581355
Node: sort_re582017
Node: sort_thread_groups582839
Node: spam_separator584102
Node: spoolfile584592
Node: ssl_ca_certificates_file585051
Node: ssl_client_cert585555
Node: ssl_force_tls585848
Node: ssl_min_dh_prime_bits586382
Node: ssl_starttls586791
Node: ssl_use_sslv2587457
Node: ssl_use_sslv3587872
Node: ssl_use_tlsv1588275
Node: ssl_use_tlsv1_1588684
Node: ssl_use_tlsv1_2589099
Node: ssl_use_tlsv1_3589393
Node: ssl_usesystemcerts589690
Node: ssl_verify_dates590076
Node: ssl_verify_host590557
Node: ssl_verify_host_override591057
Node: ssl_verify_partial_chains591610
Node: ssl_ciphers592300
Node: status_chars592848
Node: status_format593748
Node: status_on_top599118
Node: strict_threads599519
Node: suspend600218
Node: text_flowed600598
Node: thorough_search601382
Node: thread_received602262
Node: tilde602560
Node: time_inc602838
Node: timeout603490
Node: tmpdir604157
Node: to_chars604590
Node: trash605406
Node: ts_icon_format605853
Node: ts_enabled606276
Node: ts_status_format606617
Node: tunnel607123
Node: tunnel_is_secure607900
Node: uncollapse_jump608800
Node: uncollapse_new609116
Node: use_8bitmime609573
Node: use_domain610101
Node: use_envelope_from610479
Node: use_from611257
Node: use_ipv6611684
Node: user_agent612048
Node: visual612365
Node: wait_key612642
Node: weed613398
Node: wrap613801
Node: wrap_headers614308
Node: wrap_search614827
Node: wrapmargin615185
Node: write_bcc615448
Node: write_inc616228
Node: Functions <1>616809
Node: Generic Menu617557
Ref: Default Generic Menu Bindings617920
Node: Index Menu624131
Ref: Default Index Menu Bindings624264
Node: Pager Menu638982
Ref: Default Pager Menu Bindings639117
Node: Alias Menu <1>656411
Ref: Default Alias Menu Bindings656546
Node: Query Menu656980
Ref: Default Query Menu Bindings657124
Node: Attachment Menu <1>657834
Ref: Default Attachment Menu Bindings657990
Node: Compose Menu <2>662040
Ref: Default Compose Menu Bindings662193
Node: Postpone Menu670065
Ref: Default Postpone Menu Bindings670213
Node: Browser Menu670574
Ref: Default Browser Menu Bindings670712
Node: Pgp Menu673080
Ref: Default Pgp Menu Bindings673209
Node: Smime Menu673512
Ref: Default Smime Menu Bindings673647
Node: Mixmaster Menu673952
Ref: Default Mixmaster Menu Bindings674098
Node: Editor Menu675709
Ref: Default Editor Menu Bindings675861
Node: Autocrypt Account Menu680195
Ref: Default Autocrypt Account Menu Bindings680368
Node: List Menu <1>681142
Ref: Default List Menu Bindings681269
Node: Miscellany <1>681989
Node: Acknowledgements682143
Node: About This Document684425

End Tag Table


Local Variables:
coding: utf-8
End:
