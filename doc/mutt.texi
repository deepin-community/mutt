\input texinfo
@setfilename mutt.info
@documentencoding utf-8
@settitle The Mutt E-Mail Client
@dircategory Email-software
@direntry
* The Mutt E-Mail Client: (mutt).   Text based mail reader
@end direntry

@node Top, Introduction, , (dir)
@top The Mutt E-Mail Client

@menu
* Introduction::
* Getting Started::
* Configuration::
* Advanced Usage::
* Mutt's MIME Support::
* Optional Features::
* Security Considerations::
* Performance Tuning::
* Reference::
* Miscellany: Miscellany <1>.

@detailmenu
— The Detailed Node Listing —

Introduction

* Mutt Home Page::
* Mailing Lists::
* Getting Mutt::
* Mutt Online Resources::
* Contributing to Mutt::
* Typographical Conventions::
* Copyright::

Getting Started

* Core Concepts::
* Screens and Menus::
* Moving Around in Menus::
* Editing Input Fields::
* Reading Mail::
* Sending Mail::
* Forwarding and Bouncing Mail::
* Postponing Mail::
* Encryption and Signing::

Configuration

* Location of Initialization Files::
* Starter Muttrc::
* Syntax of Initialization Files::
* Address Groups::
* Defining/Using Aliases::
* Changing the Default Key Bindings::
* Changing the current working directory::
* Defining Aliases for Character Sets::
* Setting Variables Based Upon Mailbox::
* Keyboard Macros::
* Using Color and Mono Video Attributes::
* Message Header Display::
* Alternative Addresses::
* Mailing Lists: Mailing Lists <1>.
* Using Multiple Spool Mailboxes::
* Monitoring Incoming Mail::
* User-Defined Headers::
* Specify Default Save Mailbox::
* Specify Default Fcc; Mailbox When Composing::
* Specify Default Save Filename and Default Fcc; Mailbox at Once::
* Change Settings Based Upon Message Recipients::
* Change Settings Before Formatting a Message::
* Choosing the Cryptographic Key of the Recipient::
* Dynamically Changing $index_format using Patterns::
* Adding Key Sequences to the Keyboard Buffer::
* Executing Functions::
* Message Scoring::
* Spam Detection::
* Setting and Querying Variables::
* Reading Initialization Commands From Another File::
* Removing Hooks::
* Format Strings::
* Control allowed header fields in a mailto; URL::

Advanced Usage

* Character Set Handling::
* Regular Expressions::
* Patterns; Searching, Limiting and Tagging: Patterns; Searching; Limiting and Tagging.
* Marking Messages::
* Using Tags::
* Using Hooks::
* Managing the Environment::
* External Address Queries::
* Mailbox Formats::
* Mailbox Shortcuts::
* Handling Mailing Lists::
* Display Munging::
* New Mail Detection::
* Editing Threads::
* Delivery Status Notification (DSN) Support: Delivery Status Notification [DSN] Support.
* Start a WWW Browser on URLs::
* Echoing Text::
* Message Composition Flow::
* Using MuttLisp (EXPERIMENTAL): Using MuttLisp [EXPERIMENTAL].
* Miscellany::

Mutt's MIME Support

* Using MIME in Mutt::
* MIME Type Configuration with mime.types: MIME Type Configuration with mime_types.
* MIME Viewer Configuration with Mailcap::
* MIME Autoview::
* MIME Multipart/Alternative::
* Attachment Searching and Counting::
* MIME Lookup::

Optional Features

* General Notes::
* SSL/TLS Support::
* POP3 Support::
* IMAP Support::
* SMTP Support::
* OAUTHBEARER Support::
* Managing Multiple Accounts::
* Local Caching::
* Exact Address Generation::
* Sending Anonymous Messages via Mixmaster::
* Sidebar: Sidebar <1>.
* Compressed Folders Feature::
* Autocrypt::

Security Considerations

* Passwords::
* Temporary Files::
* Information Leaks::
* External Applications::

Performance Tuning

* Reading and Writing Mailboxes::
* Reading Messages from Remote Folders::
* Searching and Limiting::

Reference

* Command-Line Options::
* Configuration Commands::
* Configuration Variables::
* Functions: Functions <1>.

Miscellany

* Acknowledgements::
* About This Document::

@end detailmenu
@end menu

@node Introduction, Getting Started, Top, Top
@chapter Introduction

@strong{Mutt} is a small but very powerful
text-based MIME mail client.  Mutt is highly configurable, and is well
suited to the mail power user with advanced features like key bindings,
keyboard macros, mail threading, regular expression searches and a
powerful pattern matching language for selecting groups of messages.

@menu
* Mutt Home Page::
* Mailing Lists::
* Getting Mutt::
* Mutt Online Resources::
* Contributing to Mutt::
* Typographical Conventions::
* Copyright::
@end menu

@node Mutt Home Page, Mailing Lists, , Introduction
@section Mutt Home Page

The official homepage can be found at
@uref{http://www.mutt.org/,http://www.mutt.org/}.

@node Mailing Lists, Getting Mutt, Mutt Home Page, Introduction
@section Mailing Lists

To subscribe to one of the following mailing lists, send a message with
the word @emph{subscribe} in the body to
@emph{list-name}@samp{-request@@mutt.org}.

@itemize 

@item
@email{mutt-announce-request@@mutt.org} — low traffic list for
announcements

@item
@email{mutt-users-request@@mutt.org} — help, bug reports and
feature requests

@item
@email{mutt-dev-request@@mutt.org} — development mailing list
@end itemize

All messages posted to @emph{mutt-announce} are
automatically forwarded to @emph{mutt-users}, so you do
not need to be subscribed to both lists.

@node Getting Mutt, Mutt Online Resources, Mailing Lists, Introduction
@section Getting Mutt

Mutt releases can be downloaded from @uref{ftp://ftp.mutt.org/pub/mutt/,ftp://ftp.mutt.org/pub/mutt/}.  For a
list of mirror sites, please refer to @uref{http://www.mutt.org/download.html,http://www.mutt.org/download.html}.

For version control access, please refer to the
@uref{https://gitlab.com/muttmua/mutt,Mutt development site}.

@node Mutt Online Resources, Contributing to Mutt, Getting Mutt, Introduction
@section Mutt Online Resources

@table @asis

@item Bug Tracking System
The official Mutt bug tracking system can be found at
@uref{https://gitlab.com/muttmua/mutt/issues,https://gitlab.com/muttmua/mutt/issues}

@item Wiki
An (unofficial) wiki can be found
at @uref{https://gitlab.com/muttmua/mutt/wikis/home,https://gitlab.com/muttmua/mutt/wikis/home}.

@item IRC
For the IRC user community, visit channel @emph{#mutt} on
@uref{http://www.freenode.net/,irc.freenode.net}.

@item USENET
For USENET, see the newsgroup @uref{news:comp.mail.mutt,comp.mail.mutt}.
@end table

@node Contributing to Mutt, Typographical Conventions, Mutt Online Resources, Introduction
@section Contributing to Mutt

There are various ways to contribute to the Mutt project.

Especially for new users it may be helpful to meet other new and
experienced users to chat about Mutt, talk about problems and share
tricks.

Since translations of Mutt into other languages are highly appreciated,
the Mutt developers always look for skilled translators that help
improve and continue to maintain stale translations.

For contributing code patches for new features and bug fixes, please
refer to the developer pages at
@uref{https://gitlab.com/muttmua/mutt,https://gitlab.com/muttmua/mutt} for more details.

@node Typographical Conventions, Copyright, Contributing to Mutt, Introduction
@section Typographical Conventions

This section lists typographical conventions followed throughout this
manual. See table @ref{Typographical conventions for special terms} for typographical
conventions for special terms.

@noindent
@anchor{Typographical conventions for special terms}

@strong{Typographical conventions for special terms}

@multitable @columnfractions 0.5 0.5
@item
Item@tab Refers to...
@item
@samp{printf(3)}@tab UNIX manual pages, execute @samp{man 3 printf}
@item
@samp{<PageUp>}@tab named keys
@item
@samp{<create-alias>}@tab named Mutt function
@item
@samp{^G}@tab Control+G key combination
@item
$mail_check@tab Mutt configuration option
@item
@samp{$HOME}@tab environment variable
@end multitable

Examples are presented as:

@example

mutt -v
@end example

Within command synopsis, curly brackets (‘@{@}’) denote a set
of options of which one is mandatory, square brackets
(‘[]’) denote optional arguments, three dots
denote that the argument may be repeated arbitrary times.

@node Copyright, , Typographical Conventions, Introduction
@section Copyright

Mutt is Copyright © 1996-2021 Michael R. Elkins
@email{me@@mutt.org} and others.

This program is free software; you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the
Free Software Foundation; either version 2 of the License, or (at your
option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

@node Getting Started, Configuration, Introduction, Top
@chapter Getting Started

This section is intended as a brief overview of how to use Mutt.  There
are many other features which are described elsewhere in the manual.
There is even more information available in the Mutt FAQ and various web
pages. See the @uref{http://www.mutt.org/,Mutt homepage}
for more details.

The keybindings described in this section are the defaults as
distributed.  Your local system administrator may have altered the
defaults for your site.  You can always type ‘?’ in any
menu to display the current bindings.

The first thing you need to do is invoke Mutt, simply by typing
@samp{mutt} at the command line.  There are various
command-line options, see either the Mutt man page or the reference (@pxref{Command-Line Options}).

@menu
* Core Concepts::
* Screens and Menus::
* Moving Around in Menus::
* Editing Input Fields::
* Reading Mail::
* Sending Mail::
* Forwarding and Bouncing Mail::
* Postponing Mail::
* Encryption and Signing::
@end menu

@node Core Concepts, Screens and Menus, , Getting Started
@section Core Concepts

Mutt is a text-based application which interacts with users through
different menus which are mostly line-/entry-based or page-based. A
line-based menu is the so-called ‘index’ menu (listing all
messages of the currently opened folder) or the ‘alias’
menu (allowing you to select recipients from a list). Examples for
page-based menus are the ‘pager’ (showing one message at a
time) or the ‘help’ menu listing all available key
bindings.

The user interface consists of a context sensitive help line at the top,
the menu's contents followed by a context sensitive status line and
finally the command line. The command line is used to display
informational and error messages as well as for prompts and for entering
interactive commands.

Mutt is configured through variables which, if the user wants to
permanently use a non-default value, are written to configuration
files. Mutt supports a rich config file syntax to make even complex
configuration files readable and commentable.

Because Mutt allows for customizing almost all key bindings, there are
so-called ‘functions’ which can be executed manually (using
the command line) or in macros. Macros allow the user to bind a sequence
of commands to a single key or a short key sequence instead of repeating
a sequence of actions over and over.

Many commands (such as saving or copying a message to another folder)
can be applied to a single message or a set of messages (so-called
‘tagged’ messages). To help selecting messages, Mutt
provides a rich set of message patterns (such as recipients, sender,
body contents, date sent/received, etc.) which can be combined into
complex expressions using the boolean @emph{and} and
@emph{or} operations as well as negating. These patterns
can also be used to (for example) search for messages or to limit the
index to show only matching messages.

Mutt supports a ‘hook’ concept which allows the user to
execute arbitrary configuration commands and functions in certain
situations such as entering a folder, starting a new message or replying
to an existing one. These hooks can be used to highly customize Mutt's
behavior including managing multiple identities, customizing the
display for a folder or even implementing auto-archiving based on a
per-folder basis and much more.

Besides an interactive mode, Mutt can also be used as a command-line
tool to send messages. It also supports a
@samp{mailx(1)}-compatible interface, see @ref{Command line options} for a complete list of command-line
options.

@node Screens and Menus, Moving Around in Menus, Core Concepts, Getting Started
@section Screens and Menus

@menu
* Index::
* Pager::
* File Browser::
* Sidebar::
* Help::
* Compose Menu::
* Alias Menu::
* Attachment Menu::
@end menu

@node Index, Pager, , Screens and Menus
@subsection Index

The index is the screen that you usually see first when you start
Mutt. It gives an overview over your emails in the currently opened
mailbox. By default, this is your system mailbox.  The information you
see in the index is a list of emails, each with its number on the left,
its flags (new email, important email, email that has been forwarded or
replied to, tagged email, ...), the date when email was sent, its
sender, the email size, and the subject. Additionally, the index also
shows thread hierarchies: when you reply to an email, and the other
person replies back, you can see the other person's email in a
"sub-tree" below.  This is especially useful for personal email between
a group of people or when you've subscribed to mailing lists.

@node Pager, File Browser, Index, Screens and Menus
@subsection Pager

The pager is responsible for showing the email content. On the top of
the pager you have an overview over the most important email headers
like the sender, the recipient, the subject, and much more
information. How much information you actually see depends on your
configuration, which we'll describe below.

Below the headers, you see the email body which usually contains the
message. If the email contains any attachments, you will see more
information about them below the email body, or, if the attachments are
text files, you can view them directly in the pager.

To give the user a good overview, it is possible to configure Mutt to
show different things in the pager with different colors. Virtually
everything that can be described with a regular expression can be
colored, e.g. URLs, email addresses or smileys.

@node File Browser, Sidebar, Pager, Screens and Menus
@subsection File Browser

The file browser is the interface to the local or remote file
system. When selecting a mailbox to open, the browser allows custom
sorting of items, limiting the items shown by a regular expression and a
freely adjustable format of what to display in which way. It also allows
for easy navigation through the file system when selecting file(s) to
attach to a message, select multiple files to attach and many more.

Some mail systems can nest mail folders inside other mail folders.
The normal open entry commands in mutt will open the mail folder and
you can't see the sub-folders.  If you instead use the
@samp{<descend-directory>} function it will go into
the directory and not open it as a mail directory.

@node Sidebar, Help, File Browser, Screens and Menus
@subsection Sidebar

The Sidebar shows a list of all your mailboxes.  The list can be
turned on and off, it can be themed and the list style can be
configured.

@node Help, Compose Menu, Sidebar, Screens and Menus
@subsection Help

The help screen is meant to offer a quick help to the user. It lists the
current configuration of key bindings and their associated commands
including a short description, and currently unbound functions that
still need to be associated with a key binding (or alternatively, they
can be called via the Mutt command prompt).

@node Compose Menu, Alias Menu, Help, Screens and Menus
@subsection Compose Menu

The compose menu features a split screen containing the information
which really matter before actually sending a message by mail: who gets
the message as what (recipients and who gets what kind of
copy). Additionally, users may set security options like deciding
whether to sign, encrypt or sign and encrypt a message with/for what
keys. Also, it's used to attach messages, to re-edit any attachment
including the message itself.

@node Alias Menu, Attachment Menu, Compose Menu, Screens and Menus
@subsection Alias Menu

The alias menu is used to help users finding the recipients of
messages. For users who need to contact many people, there's no need to
remember addresses or names completely because it allows for searching,
too. The alias mechanism and thus the alias menu also features grouping
several addresses by a shorter nickname, the actual alias, so that users
don't have to select each single recipient manually.

@node Attachment Menu, , Alias Menu, Screens and Menus
@subsection Attachment Menu

As will be later discussed in detail, Mutt features a good and stable
MIME implementation, that is, it supports sending and receiving messages
of arbitrary MIME types. The attachment menu displays a message's
structure in detail: what content parts are attached to which parent
part (which gives a true tree structure), which type is of what type and
what size.  Single parts may saved, deleted or modified to offer great
and easy access to message's internals.

@node Moving Around in Menus, Editing Input Fields, Screens and Menus, Getting Started
@section Moving Around in Menus

The most important navigation keys common to line- or entry-based menus
are shown in @ref{Most common navigation keys in entry-based menus} and in @ref{Most common navigation keys in page-based menus} for page-based menus.

@noindent
@anchor{Most common navigation keys in entry-based menus}

@strong{Most common navigation keys in entry-based menus}

@multitable @columnfractions 0.333333333333333 0.333333333333333 0.333333333333333
@item
Key@tab Function@tab Description
@item
j or <Down>@tab @samp{<next-entry>}@tab move to the next entry
@item
k or <Up>@tab @samp{<previous-entry>}@tab move to the previous entry
@item
z or <PageDn>@tab @samp{<page-down>}@tab go to the next page
@item
Z or <PageUp>@tab @samp{<page-up>}@tab go to the previous page
@item
= or <Home>@tab @samp{<first-entry>}@tab jump to the first entry
@item
* or <End>@tab @samp{<last-entry>}@tab jump to the last entry
@item
q@tab @samp{<quit>}@tab exit the current menu
@item
?@tab @samp{<help>}@tab list all keybindings for the current menu
@end multitable

@noindent
@anchor{Most common navigation keys in page-based menus}

@strong{Most common navigation keys in page-based menus}

@multitable @columnfractions 0.333333333333333 0.333333333333333 0.333333333333333
@item
Key@tab Function@tab Description
@item
J or <Return>@tab @samp{<next-line>}@tab scroll down one line
@item
<Backspace>@tab @samp{<previous-line>}@tab scroll up one line
@item
K, <Space> or <PageDn>@tab @samp{<next-page>}@tab move to the next page
@item
- or <PageUp>@tab @samp{<previous-page>}@tab move the previous page
@item
<Home>@tab @samp{<top>}@tab move to the top
@item
<End>@tab @samp{<bottom>}@tab move to the bottom
@end multitable

@node Editing Input Fields, Reading Mail, Moving Around in Menus, Getting Started
@section Editing Input Fields

@menu
* Introduction: Introduction <1>.
* History::
@end menu

@node Introduction <1>, History, , Editing Input Fields
@subsection Introduction

Mutt has a built-in line editor for inputting text, e.g. email addresses
or filenames. The keys used to manipulate text input are very similar to
those of Emacs. See @ref{Most common line editor keys} for a full
reference of available functions, their default key bindings, and short
descriptions.

@noindent
@anchor{Most common line editor keys}

@strong{Most common line editor keys}

@multitable @columnfractions 0.333333333333333 0.333333333333333 0.333333333333333
@item
Key@tab Function@tab Description
@item
^A or <Home>@tab @samp{<bol>}@tab move to the start of the line
@item
^B or <Left>@tab @samp{<backward-char>}@tab move back one char
@item
Esc B@tab @samp{<backward-word>}@tab move back one word
@item
^D or <Delete>@tab @samp{<delete-char>}@tab delete the char under the cursor
@item
^E or <End>@tab @samp{<eol>}@tab move to the end of the line
@item
^F or <Right>@tab @samp{<forward-char>}@tab move forward one char
@item
Esc F@tab @samp{<forward-word>}@tab move forward one word
@item
<Tab>@tab @samp{<complete>}@tab complete filename, alias, or label
@item
^T@tab @samp{<complete-query>}@tab complete address with query
@item
^K@tab @samp{<kill-eol>}@tab delete to the end of the line
@item
Esc d@tab @samp{<kill-eow>}@tab delete to the end of the word
@item
^W@tab @samp{<kill-word>}@tab kill the word in front of the cursor
@item
^U@tab @samp{<kill-line>}@tab delete entire line
@item
^V@tab @samp{<quote-char>}@tab quote the next typed key
@item
<Up>@tab @samp{<history-up>}@tab recall previous string from history
@item
<Down>@tab @samp{<history-down>}@tab recall next string from history
@item
^R@tab @samp{<history-search>}@tab use current input to search history
@item
<BackSpace>@tab @samp{<backspace>}@tab kill the char in front of the cursor
@item
Esc u@tab @samp{<upcase-word>}@tab convert word to upper case
@item
Esc l@tab @samp{<downcase-word>}@tab convert word to lower case
@item
Esc c@tab @samp{<capitalize-word>}@tab capitalize the word
@item
^G@tab n/a@tab abort
@item
<Return>@tab n/a@tab finish editing
@end multitable

@samp{^G} is the generic ‘abort’ key
in Mutt.  In addition to the line editor, it can also be used
to abort prompts.  Generally, typing @samp{^G} at a
confirmation prompt or line editor should abort the entire action.

You can remap the @emph{editor} functions using the @code{bind} (@pxref{Changing the Default Key Bindings}) command.  For example, to
make the <Delete> key delete the character in front of the cursor
rather than under, you could use:

@example

bind editor <delete> backspace
@end example

@node History, , Introduction <1>, Editing Input Fields
@subsection History

Mutt maintains a history for the built-in editor.  The number of items
is controlled by the $history (@pxref{history}) variable
and can be made persistent using an external file specified using $history_file (@pxref{history_file}) and $save_history (@pxref{save_history}).  You may cycle through them
at an editor prompt by using the @samp{<history-up>}
and/or @samp{<history-down>} commands.  Mutt will
remember the currently entered text as you cycle through history, and
will wrap around to the initial entry line.

Mutt maintains several distinct history lists, one for each of the
following categories:

@itemize 

@item
@samp{.muttrc} commands

@item
addresses and aliases

@item
shell commands

@item
filenames

@item
mailboxes

@item
patterns

@item
everything else
@end itemize

Mutt automatically filters out consecutively repeated items from the
history.  If $history_remove_dups (@pxref{history_remove_dups})
is set, all repeated items are removed from the history.  It also mimics the
behavior of some shells by ignoring items starting with a space. The latter
feature can be useful in macros to not clobber the history's valuable entries
with unwanted entries.

@node Reading Mail, Sending Mail, Editing Input Fields, Getting Started
@section Reading Mail

Similar to many other mail clients, there are two modes in which mail is
read in Mutt.  The first is a list of messages in the mailbox, which is
called the ‘index’ menu in Mutt.  The second mode is the
display of the message contents.  This is called the
‘pager.’

The next few sections describe the functions provided in each of these
modes.

@menu
* The Message Index::
* The Pager::
* Threaded Mode::
* Miscellaneous Functions::
@end menu

@node The Message Index, The Pager, , Reading Mail
@subsection The Message Index

Common keys used to navigate through and manage messages in the index
are shown in @ref{Most common message index keys}. How messages are presented
in the index menu can be customized using the $index_format (@pxref{index_format}) variable.

@noindent
@anchor{Most common message index keys}

@strong{Most common message index keys}

@multitable @columnfractions 0.5 0.5
@item
Key@tab Description
@item
c@tab change to a different mailbox
@item
Esc c@tab change to a folder in read-only mode
@item
C@tab copy the current message to another mailbox
@item
Esc C@tab decode a message and copy it to a folder
@item
Esc s@tab decode a message and save it to a folder
@item
D@tab delete messages matching a pattern
@item
d@tab delete the current message
@item
F@tab mark as important
@item
l@tab show messages matching a pattern
@item
N@tab mark message as new
@item
o@tab change the current sort method
@item
O@tab reverse sort the mailbox
@item
q@tab save changes and exit
@item
s@tab save-message
@item
T@tab tag messages matching a pattern
@item
t@tab toggle the tag on a message
@item
Esc t@tab toggle tag on entire message thread
@item
U@tab undelete messages matching a pattern
@item
u@tab undelete-message
@item
v@tab view-attachments
@item
x@tab abort changes and exit
@item
<Return>@tab display-message
@item
<Tab>@tab jump to the next new or unread message
@item
@@@tab show the author's full e-mail address
@item
$@tab save changes to mailbox
@item
/@tab search
@item
Esc /@tab search-reverse
@item
^L@tab clear and redraw the screen
@item
^T@tab untag messages matching a pattern
@end multitable

In addition to who sent the message and the subject, a short summary of
the disposition of each message is printed beside the message number.
Zero or more of the ‘flags’ in @ref{Message status flags} may appear, some of which can be turned
on or off using these functions: @samp{<set-flag>} and
@samp{<clear-flag>} bound by default to
‘w’ and ‘W’ respectively.

Furthermore, the flags in @ref{Message recipient flags} reflect
who the message is addressed to. They can be customized with the $to_chars (@pxref{to_chars}) variable.

@noindent
@anchor{Message status flags}

@strong{Message status flags}

@multitable @columnfractions 0.5 0.5
@item
Flag@tab Description
@item
D@tab message is deleted (is marked for deletion)
@item
d@tab message has attachments marked for deletion
@item
K@tab contains a PGP public key
@item
N@tab message is new
@item
O@tab message is old
@item
P@tab message is PGP encrypted
@item
r@tab message has been replied to
@item
S@tab message is signed, and the signature is successfully verified
@item
s@tab message is signed
@item
!@tab message is flagged
@item
*@tab message is tagged
@item
n@tab thread contains new messages (only if collapsed)
@item
o@tab thread contains old messages (only if collapsed)
@end multitable

@noindent
@anchor{Message recipient flags}

@strong{Message recipient flags}

@multitable @columnfractions 0.5 0.5
@item
Flag@tab Description
@item
+@tab message is to you and you only
@item
T@tab message is to you, but also to or CC'ed to others
@item
C@tab message is CC'ed to you
@item
F@tab message is from you
@item
L@tab message is sent to a subscribed mailing list
@end multitable

@node The Pager, Threaded Mode, The Message Index, Reading Mail
@subsection The Pager

By default, Mutt uses its built-in pager to display the contents of
messages (an external pager such as @samp{less(1)} can be
configured, see $pager (@pxref{pager}) variable).  The
pager is very similar to the Unix program @samp{less(1)}
though not nearly as featureful.

@noindent
@anchor{Most common pager keys}

@strong{Most common pager keys}

@multitable @columnfractions 0.5 0.5
@item
Key@tab Description
@item
<Return>@tab go down one line
@item
<Space>@tab display the next page (or next message if at the end of a message)
@item
-@tab go back to the previous page
@item
n@tab search for next match
@item
S@tab skip beyond quoted text
@item
T@tab toggle display of quoted text
@item
?@tab show keybindings
@item
/@tab regular expression search
@item
Esc /@tab backward regular expression search
@item
\@tab toggle highlighting of search matches
@item
^@tab jump to the top of the message
@end multitable

In addition to key bindings in @ref{Most common pager keys}, many of
the functions from the index menu are also available in the pager, such
as @samp{<delete-message>} or
@samp{<copy-message>} (this is one advantage over
using an external pager to view messages).

Also, the internal pager supports a couple other advanced features. For
one, it will accept and translate the ‘standard’ nroff
sequences for bold and underline. These sequences are a series of either
the letter, backspace (‘^H’), the letter again for bold or
the letter, backspace, ‘_’ for denoting underline. Mutt
will attempt to display these in bold and underline respectively if your
terminal supports them. If not, you can use the bold and underline color (@pxref{Using Color and Mono Video Attributes}) objects to specify a
@code{color} or mono attribute for them.

Additionally, the internal pager supports the ANSI escape sequences for
character attributes.  Mutt translates them into the correct color and
character settings.  The sequences Mutt supports are:

@example

\e[Ps;Ps;..Ps;m
@end example

where @emph{Ps} can be one of the codes shown in @ref{ANSI escape sequences}.

@noindent
@anchor{ANSI escape sequences}

@strong{ANSI escape sequences}

@multitable @columnfractions 0.5 0.5
@item
Escape code@tab Description
@item
0@tab All attributes off
@item
1@tab Bold on
@item
4@tab Underline on
@item
5@tab Blink on
@item
7@tab Reverse video on
@item
3@emph{<color>}@tab Foreground color is @emph{<color>} (see @ref{Color sequences})
@item
4@emph{<color>}@tab Background color is @emph{<color>} (see @ref{Color sequences})
@end multitable

@noindent
@anchor{Color sequences}

@strong{Color sequences}

@multitable @columnfractions 0.5 0.5
@item
Color code@tab Color
@item
0@tab Black
@item
1@tab Red
@item
2@tab Green
@item
3@tab Yellow
@item
4@tab Blue
@item
5@tab Magenta
@item
6@tab Cyan
@item
7@tab White
@end multitable

Mutt uses these attributes for handling @samp{text/enriched}
messages, and they can also be used by an external autoview (@pxref{MIME Autoview}) script for highlighting purposes.

@quotation

@strong{Note}

If you change the colors for your display, for example by changing the
color associated with color2 for your xterm, then that color will be
used instead of green.
@end quotation

@quotation

@strong{Note}

Note that the search commands in the pager take regular expressions,
which are not quite the same as the more complex patterns (@pxref{Patterns; Searching; Limiting and Tagging}) used by the search command in the
index. This is because patterns are used to select messages by criteria
whereas the pager already displays a selected message.
@end quotation

@node Threaded Mode, Miscellaneous Functions, The Pager, Reading Mail
@subsection Threaded Mode

So-called ‘threads’ provide a hierarchy of messages where
replies are linked to their parent message(s). This organizational form
is extremely useful in mailing lists where different parts of the
discussion diverge. Mutt displays threads as a tree structure.

In Mutt, when a mailbox is sorted (@pxref{sort})
by @emph{threads}, there are a few additional functions
available in the @emph{index}
and @emph{pager} modes as shown in
@ref{Most common thread mode keys}.

@noindent
@anchor{Most common thread mode keys}

@strong{Most common thread mode keys}

@multitable @columnfractions 0.333333333333333 0.333333333333333 0.333333333333333
@item
Key@tab Function@tab Description
@item
^D@tab @samp{<delete-thread>}@tab delete all messages in the current thread
@item
^U@tab @samp{<undelete-thread>}@tab undelete all messages in the current thread
@item
^N@tab @samp{<next-thread>}@tab jump to the start of the next thread
@item
^P@tab @samp{<previous-thread>}@tab jump to the start of the previous thread
@item
^R@tab @samp{<read-thread>}@tab mark the current thread as read
@item
Esc d@tab @samp{<delete-subthread>}@tab delete all messages in the current subthread
@item
Esc u@tab @samp{<undelete-subthread>}@tab undelete all messages in the current subthread
@item
Esc n@tab @samp{<next-subthread>}@tab jump to the start of the next subthread
@item
Esc p@tab @samp{<previous-subthread>}@tab jump to the start of the previous subthread
@item
Esc r@tab @samp{<read-subthread>}@tab mark the current subthread as read
@item
Esc t@tab @samp{<tag-thread>}@tab toggle the tag on the current thread
@item
Esc v@tab @samp{<collapse-thread>}@tab toggle collapse for the current thread
@item
Esc V@tab @samp{<collapse-all>}@tab toggle collapse for all threads
@item
P@tab @samp{<parent-message>}@tab jump to parent message in thread
@end multitable

In the @emph{index}, the subject of threaded children
messages will be prepended with thread tree characters.  By default,
the subject itself will not be duplicated unless $hide_thread_subject (@pxref{hide_thread_subject}) is unset.
Special characters will be added to the thread tree as detailed in
@ref{Special Thread Characters}.

@noindent
@anchor{Special Thread Characters}

@strong{Special Thread Characters}

@multitable @columnfractions 0.333333333333333 0.333333333333333 0.333333333333333
@item
Character@tab Description@tab Notes
@item
&@tab hidden message@tab see $hide_limited (@pxref{hide_limited}) and
$hide_top_limited (@pxref{hide_top_limited})
@item
?@tab missing message@tab see $hide_missing (@pxref{hide_missing}) and
$hide_top_missing (@pxref{hide_top_missing})
@item
*@tab pseudo thread@tab see $strict_threads (@pxref{strict_threads});
not displayed when
$narrow_tree (@pxref{narrow_tree}) is set
@item
=@tab duplicate thread@tab see $duplicate_threads (@pxref{duplicate_threads});
not displayed when
$narrow_tree (@pxref{narrow_tree}) is set
@end multitable

Collapsing a thread displays only the first message in the thread and
hides the others. This is useful when threads contain so many messages
that you can only see a handful of threads on the screen. See %M in
$index_format (@pxref{index_format}).  For example, you
could use ‘%?M?(#%03M)&(%4l)?’ in $index_format (@pxref{index_format}) to optionally display the
number of hidden messages if the thread is collapsed. The
@samp{%?<char>?<if-part>&<else-part>?}
syntax is explained in detail in format string conditionals (@pxref{Conditionals}).

Technically, every reply should contain a list of its parent messages in
the thread tree, but not all do. In these cases, Mutt groups them by
subject which can be controlled using the $strict_threads (@pxref{strict_threads}) variable.

@node Miscellaneous Functions, , Threaded Mode, Reading Mail
@subsection Miscellaneous Functions

In addition, the @emph{index} and
@emph{pager} menus have these interesting functions:

@table @asis

@item  @samp{<check-stats>}@anchor{check-stats} 
Calculate statistics for all monitored mailboxes declared using the
@code{mailboxes} command.
It will calculate statistics despite
$mail_check_stats (@pxref{mail_check_stats}) being unset.

@item  @samp{<create-alias>}@anchor{create-alias} (default: a) 
Creates a new alias based upon the current message (or prompts for a new
one).  Once editing is complete, an @code{alias} (@pxref{Defining/Using Aliases}) command is added to the
file specified by the $alias_file (@pxref{alias_file})
variable for future use

@quotation

@strong{Note}

Mutt does not read the $alias_file (@pxref{alias_file})
upon startup so you must explicitly @code{source} (@pxref{Reading Initialization Commands From Another File}) the file.
@end quotation

@item  @samp{<check-traditional-pgp>}@anchor{check-traditional-pgp} (default: Esc P) 
This function will search the current message for content signed or
encrypted with PGP the ‘traditional’ way, that is, without
proper MIME tagging.  Technically, this function will temporarily change
the MIME content types of the body parts containing PGP data; this is
similar to the @samp{<edit-type>} (@pxref{edit-type})
function's effect.

@item  @samp{<edit>}@anchor{edit} (default: e) 
This command (available in the index and pager) allows you to edit the
raw current message as it's present in the mail folder.  After you have
finished editing, the changed message will be appended to the current
folder, and the original message will be marked for deletion; if the
message is unchanged it won't be replaced.

@item  @samp{<edit-type>}@anchor{edit-type} (default: ^E on the attachment menu, and in the pager and index menus; ^T on the compose menu) 
This command is used to temporarily edit an attachment's content type to
fix, for instance, bogus character set parameters.  When invoked from
the index or from the pager, you'll have the opportunity to edit the
top-level attachment's content type.  On the attachment menu (@pxref{The Attachment Menu}), you can change any
attachment's content type. These changes are not persistent, and get
lost upon changing folders.

Note that this command is also available on the compose menu (@pxref{The Compose Menu}).  There, it's used to
fine-tune the properties of attachments you are going to send.

@item  @samp{<enter-command>}@anchor{enter-command} (default: ‘:’) 
This command is used to execute any command you would normally put in a
configuration file.  A common use is to check the settings of variables,
or in conjunction with macros (@pxref{Keyboard Macros}) to change
settings on the fly.

@item  @samp{<extract-keys>}@anchor{extract-keys} (default: ^K) 
This command extracts PGP public keys from the current or tagged
message(s) and adds them to your PGP public key ring.

@item  @samp{<forget-passphrase>}@anchor{forget-passphrase} (default: ^F) 
This command wipes the passphrase(s) from memory. It is useful, if you
misspelled the passphrase.

@item  @samp{<list-reply>}@anchor{list-reply} (default: L) 
Reply to the current or tagged message(s) by extracting any addresses
which match the regular expressions given by the @code{lists} or
@code{subscribe} (@pxref{Mailing Lists <1>}) commands, but also honor any
@samp{Mail-Followup-To} header(s) if the $honor_followup_to (@pxref{honor_followup_to}) configuration
variable is set.  In addition, the @samp{List-Post} header field is
examined for @samp{mailto:} URLs specifying a mailing list address.
Using this when replying to messages posted to mailing lists helps avoid
duplicate copies being sent to the author of the message you are replying to.

@item  @samp{<pipe-message>}@anchor{pipe-message} (default: |) 
Asks for an external Unix command and pipes the current or tagged
message(s) to it.  The variables $pipe_decode (@pxref{pipe_decode}), $pipe_decode_weed (@pxref{pipe_decode_weed}), $pipe_split (@pxref{pipe_split}), $pipe_sep (@pxref{pipe_sep}) and $wait_key (@pxref{wait_key}) control the exact behavior of this
function.

@item  @samp{<resend-message>}@anchor{resend-message} (default: Esc e) 
Mutt takes the current message as a template for a new message.  This
function is best described as "recall from arbitrary folders".  It can
conveniently be used to forward MIME messages while preserving the
original mail structure. Note that the amount of headers included here
depends on the value of the $weed (@pxref{weed}) variable.

This function is also available from the attachment menu. You can use
this to easily resend a message which was included with a bounce message
as a @samp{message/rfc822} body part.

@item  @samp{<shell-escape>}@anchor{shell-escape} (default: !) 
Asks for an external Unix command and executes it.  The $wait_key (@pxref{wait_key}) can be used to control whether Mutt
will wait for a key to be pressed when the command returns (presumably
to let the user read the output of the command), based on the return
status of the named command. If no command is given, an interactive
shell is executed.

@item  @samp{<toggle-quoted>}@anchor{toggle-quoted} (default: T) 
The pager uses the $quote_regexp (@pxref{quote_regexp})
variable to detect quoted text when displaying the body of the message.
This function toggles the display of the quoted material in the message.
It is particularly useful when being interested in just the response and
there is a large amount of quoted text in the way.

@item  @samp{<skip-quoted>}@anchor{skip-quoted} (default: S) 
This function will go to the next line of non-quoted text which comes
after a line of quoted text in the internal pager.
@end table

@node Sending Mail, Forwarding and Bouncing Mail, Reading Mail, Getting Started
@section Sending Mail

@menu
* Introduction: Introduction <2>.
* Editing the Message Header::
* Sending Cryptographically Signed/Encrypted Messages::
* Sending Format=Flowed Messages::
* Background Editing::
@end menu

@node Introduction <2>, Editing the Message Header, , Sending Mail
@subsection Introduction

The bindings shown in @ref{Most common mail sending keys} are available in
the @emph{index} and @emph{pager} to start a
new message.

@noindent
@anchor{Most common mail sending keys}

@strong{Most common mail sending keys}

@multitable @columnfractions 0.333333333333333 0.333333333333333 0.333333333333333
@item
Key@tab Function@tab Description
@item
m@tab @samp{<mail>}@tab compose a new message
@item
r@tab @samp{<reply>}@tab reply to sender
@item
g@tab @samp{<group-reply>}@tab reply to all recipients
@item
@tab @samp{<group-chat-reply>}@tab reply to all recipients preserving To/Cc
@item
L@tab @samp{<list-reply>}@tab reply to mailing list address
@item
f@tab @samp{<forward>}@tab forward message
@item
b@tab @samp{<bounce>}@tab bounce (remail) message
@item
Esc k@tab @samp{<mail-key>}@tab mail a PGP public key to someone
@end multitable

@emph{Bouncing} a message sends the message as-is to the
recipient you specify.  @emph{Forwarding} a message allows
you to add comments or modify the message you are forwarding.  These
items are discussed in greater detail in the next section ‘Forwarding and Bouncing Mail (@pxref{Forwarding and Bouncing Mail}).’

Mutt will then enter the @emph{compose} menu and prompt
you for the recipients to place on the ‘To:’ header field
when you hit @samp{m} to start a new message. Next, it will
ask you for the ‘Subject:’ field for the message, providing
a default if you are replying to or forwarding a message. You again have
the chance to adjust recipients, subject, and security settings right
before actually sending the message. See also $askcc (@pxref{askcc}), $askbcc (@pxref{askbcc}),
$autoedit (@pxref{autoedit}), $bounce (@pxref{bounce}), $fast_reply (@pxref{fast_reply}), and $include (@pxref{include}) for changing how and if Mutt asks
these questions.

When replying, Mutt fills these fields with proper values depending on
the reply type.  The types of replying supported are:

@table @asis

@item Simple reply
Reply to the author directly.

@item Group reply
Reply to the author; cc all other recipients; consults
@code{alternates} (@pxref{Alternative Addresses})
and excludes you.

@item Group Chat reply
Reply to the author and other recipients in the To list;
cc other recipients in the Cc list; consults
@code{alternates} (@pxref{Alternative Addresses})
and excludes you.

@item List reply
Reply to all mailing list addresses found, either specified via
configuration or auto-detected.  See @ref{Mailing Lists <1>,,Mailing Lists} for
details.
@end table

After getting recipients for new messages, forwards or replies, Mutt
will then automatically start your $editor (@pxref{editor})
on the message body. If the $edit_headers (@pxref{edit_headers}) variable is set, the headers
will be at the top of the message in your editor; the message body
should start on a new line after the existing blank line at the end of
headers.  Any messages you are replying to will be added in sort order
to the message, with appropriate
$attribution (@pxref{attribution}), $indent_string (@pxref{indent_string}) and $post_indent_string (@pxref{post_indent_string}).  When
forwarding a message, if the $mime_forward (@pxref{mime_forward}) variable is unset, a copy of
the forwarded message will be included.  If you have specified a $signature (@pxref{signature}), it will be appended to the
message.

Once you have finished editing the body of your mail message, you are
returned to the @emph{compose} menu providing the
functions shown in @ref{Most common compose menu keys} to modify, send or
postpone the message.

@noindent
@anchor{Most common compose menu keys}

@strong{Most common compose menu keys}

@multitable @columnfractions 0.333333333333333 0.333333333333333 0.333333333333333
@item
Key@tab Function@tab Description
@item
a@tab @samp{<attach-file>}@tab attach a file
@item
A@tab @samp{<attach-message>}@tab attach message(s) to the message
@item
Esc k@tab @samp{<attach-key>}@tab attach a PGP public key
@item
d@tab @samp{<edit-description>}@tab edit description on attachment
@item
D@tab @samp{<detach-file>}@tab detach a file
@item
t@tab @samp{<edit-to>}@tab edit the To field
@item
Esc f@tab @samp{<edit-from>}@tab edit the From field
@item
r@tab @samp{<edit-reply-to>}@tab edit the Reply-To field
@item
c@tab @samp{<edit-cc>}@tab edit the Cc field
@item
b@tab @samp{<edit-bcc>}@tab edit the Bcc field
@item
y@tab @samp{<send-message>}@tab send the message
@item
s@tab @samp{<edit-subject>}@tab edit the Subject
@item
S@tab @samp{<smime-menu>}@tab select S/MIME options
@item
f@tab @samp{<edit-fcc>}@tab specify an ‘Fcc’ mailbox
@item
p@tab @samp{<pgp-menu>}@tab select PGP options
@item
P@tab @samp{<postpone-message>}@tab postpone this message until later
@item
q@tab @samp{<quit>}@tab quit (abort) sending the message
@item
w@tab @samp{<write-fcc>}@tab write the message to a folder
@item
i@tab @samp{<ispell>}@tab check spelling (if available on your system)
@item
^F@tab @samp{<forget-passphrase>}@tab wipe passphrase(s) from memory
@end multitable

The compose menu is also used to edit the attachments for a message
which can be either files or other messages. The
@samp{<attach-message>} function to will prompt you
for a folder to attach messages from. You can now tag messages in that
folder and they will be attached to the message you are sending.

@quotation

@strong{Note}

Note that certain operations like composing a new mail, replying,
forwarding, etc. are not permitted when you are in that folder. The %r
in $status_format (@pxref{status_format}) will change to a
‘A’ to indicate that you are in attach-message mode.
@end quotation

After exiting the compose menu via @samp{<send-message>},
the message will be sent.  If configured and enabled, this can happen via
mixmaster (@pxref{Sending Anonymous Messages via Mixmaster}) or
$smtp_url (@pxref{SMTP Support}).  Otherwise
$sendmail (@pxref{sendmail}) will be invoked.  Prior to
version 1.13, Mutt enabled $write_bcc (@pxref{write_bcc}) by
default, assuming the MTA would automatically remove a
@samp{Bcc:} header as part of delivery.  Starting with 1.13, the
option is unset by default, but no longer affects the fcc copy of the message.

@node Editing the Message Header, Sending Cryptographically Signed/Encrypted Messages, Introduction <2>, Sending Mail
@subsection Editing the Message Header

When editing the header because of $edit_headers (@pxref{edit_headers}) being set, there are a
several pseudo headers available which will not be included in sent
messages but trigger special Mutt behavior.

@menu
* Fcc; Pseudo Header::
* Attach; Pseudo Header::
* Pgp; Pseudo Header::
* In-Reply-To; Header::
@end menu

@node Fcc; Pseudo Header, Attach; Pseudo Header, , Editing the Message Header
@subsubsection Fcc: Pseudo Header

If you specify

@samp{Fcc:} @emph{filename}

as a header, Mutt will pick up @emph{filename} just as if
you had used the @samp{<edit-fcc>} function in the
@emph{compose} menu.  It can later be changed from the
compose menu.

@node Attach; Pseudo Header, Pgp; Pseudo Header, Fcc; Pseudo Header, Editing the Message Header
@subsubsection Attach: Pseudo Header

You can also attach files to your message by specifying

@samp{Attach:} @emph{filename}
[ @emph{description} ]

where @emph{filename} is the file to attach and
@emph{description} is an optional string to use as the
description of the attached file. Spaces in filenames have to be escaped
using backslash (‘\’).  The file can be removed as well as
more added from the compose menu.

@node Pgp; Pseudo Header, In-Reply-To; Header, Attach; Pseudo Header, Editing the Message Header
@subsubsection Pgp: Pseudo Header

If you want to use PGP, you can specify

@samp{Pgp:} [ @samp{E} | @samp{S} | @samp{S}@emph{<id>} ]

‘E’ selects encryption, ‘S’ selects signing
and ‘S<id>’ selects signing with the given key,
setting $pgp_sign_as (@pxref{pgp_sign_as}) for the
duration of the message composition session. The selection can later
be changed in the compose menu.

@node In-Reply-To; Header, , Pgp; Pseudo Header, Editing the Message Header
@subsubsection In-Reply-To: Header

When replying to messages, the @emph{In-Reply-To:} header
contains the Message-Id of the message(s) you reply to. If you remove or
modify its value, Mutt will not generate a
@emph{References:} field, which allows you to create a new
message thread, for example to create a new message to a mailing list
without having to enter the mailing list's address.

If you intend to start a new thread by replying, please make really sure
you remove the @emph{In-Reply-To:} header in your
editor. Otherwise, though you'll produce a technically valid reply, some
netiquette guardians will be annoyed by this so-called ‘thread
hijacking’.

@node Sending Cryptographically Signed/Encrypted Messages, Sending Format=Flowed Messages, Editing the Message Header, Sending Mail
@subsection Sending Cryptographically Signed/Encrypted Messages

If you have told Mutt to PGP or S/MIME encrypt a message, it will guide
you through a key selection process when you try to send the message.
Mutt will not ask you any questions about keys which have a certified
user ID matching one of the message recipients' mail addresses.
However, there may be situations in which there are several keys, weakly
certified user ID fields, or where no matching keys can be found.

In these cases, you are dropped into a menu with a list of keys from
which you can select one.  When you quit this menu, or Mutt can't find
any matching keys, you are prompted for a user ID.  You can, as usually,
abort this prompt using @samp{^G}.  When you do so, Mutt
will return to the compose screen.

Once you have successfully finished the key selection, the message will
be encrypted using the selected public keys when sent out.

To ensure you can view encrypted messages you have sent, you
may wish to set $pgp_self_encrypt (@pxref{pgp_self_encrypt})
and $pgp_default_key (@pxref{pgp_default_key}) for PGP, or
$smime_self_encrypt (@pxref{smime_self_encrypt})
and $smime_default_key (@pxref{smime_default_key}) for S/MIME.

Most fields of the entries in the key selection menu (see also $pgp_entry_format (@pxref{pgp_entry_format})) have obvious
meanings.  But some explanations on the capabilities, flags, and
validity fields are in order.

The flags sequence (‘%f’) will expand to one of the flags
in @ref{PGP key menu flags}.

@noindent
@anchor{PGP key menu flags}

@strong{PGP key menu flags}

@multitable @columnfractions 0.5 0.5
@item
Flag@tab Description
@item
R@tab The key has been revoked and can't be used.
@item
X@tab The key is expired and can't be used.
@item
d@tab You have marked the key as disabled.
@item
c@tab There are unknown critical self-signature packets.
@end multitable

The capabilities field (‘%c’) expands to a two-character
sequence representing a key's capabilities.  The first character gives
the key's encryption capabilities: A minus sign (‘-’) means
that the key cannot be used for encryption.  A dot (‘.’)
means that it's marked as a signature key in one of the user IDs, but
may also be used for encryption.  The letter ‘e’ indicates
that this key can be used for encryption.

The second character indicates the key's signing capabilities.  Once
again, a ‘-’ implies ‘not for signing’,
‘.’ implies that the key is marked as an encryption key in
one of the user-ids, and ‘s’ denotes a key which can be
used for signing.

Finally, the validity field (‘%t’) indicates how
well-certified a user-id is.  A question mark (‘?’)
indicates undefined validity, a minus character (‘-’) marks
an untrusted association, a space character means a partially trusted
association, and a plus character (‘+’) indicates complete
validity.

@node Sending Format=Flowed Messages, Background Editing, Sending Cryptographically Signed/Encrypted Messages, Sending Mail
@subsection Sending Format=Flowed Messages

@menu
* Concept::
* Mutt Support::
* Editor Considerations::
* Reformatting::
@end menu

@node Concept, Mutt Support, , Sending Format=Flowed Messages
@subsubsection Concept

@samp{format=flowed}-style messages (or
@samp{f=f} for short) are @samp{text/plain}
messages that consist of paragraphs which a receiver's mail client may
reformat to its own needs which mostly means to customize line lengths
regardless of what the sender sent. Technically this is achieved by
letting lines of a ‘flowable’ paragraph end in spaces
except for the last line.

While for text-mode clients like Mutt it's the best way to assume only a
standard 80x25 character cell terminal, it may be desired to let the
receiver decide completely how to view a message.

@node Mutt Support, Editor Considerations, Concept, Sending Format=Flowed Messages
@subsubsection Mutt Support

Mutt only supports setting the required @samp{format=flowed}
MIME parameter on outgoing messages if the $text_flowed (@pxref{text_flowed}) variable is set, specifically
it does not add the trailing spaces.

After editing, Mutt properly space-stuffs the message.
@emph{Space-stuffing} is required by RfC3676 defining
@samp{format=flowed} and means to prepend a space to:

@itemize 

@item
all lines starting with a space

@item
lines starting with the word
‘@samp{From}’ followed by
space

@item
all lines starting with
‘@samp{>}’ which is not intended to be a
quote character
@end itemize

@quotation

@strong{Note}

Mutt only supports space-stuffing for the first two types of lines but
not for the third: It is impossible to safely detect whether a leading
@samp{>} character starts a quote or not.
@end quotation

All leading spaces are to be removed by receiving clients to restore the
original message prior to further processing.

@node Editor Considerations, Reformatting, Mutt Support, Sending Format=Flowed Messages
@subsubsection Editor Considerations

As Mutt provides no additional features to compose
@samp{f=f} messages, it's completely up to the user and his
editor to produce proper messages. Please consider your editor's
documentation if you intend to send @samp{f=f} messages.

For example, @emph{vim} provides the @samp{w}
flag for its @samp{formatoptions} setting to assist in
creating @samp{f=f} messages, see @samp{:help
fo-table} for details.

@node Reformatting, , Editor Considerations, Sending Format=Flowed Messages
@subsubsection Reformatting

Mutt has some support for reformatting when viewing and replying to
@samp{format=flowed} messages.  In order to take advantage of these,
$reflow_text (@pxref{reflow_text}) must be set.

@itemize 

@item
Paragraphs are automatically reflowed and wrapped at a width specified
by $reflow_wrap (@pxref{reflow_wrap}).

@item
In its original format, the quoting style of @samp{format=flowed}
messages can be difficult to read, and doesn't intermix well with
non-flowed replies.
Setting $reflow_space_quotes (@pxref{reflow_space_quotes})
adds spaces after each level of quoting when in the pager and
replying in a non-flowed format
(i.e. with $text_flowed (@pxref{text_flowed}) unset).

@item
If $reflow_space_quotes (@pxref{reflow_space_quotes})
is unset, mutt will still add one trailing space after all the
quotes in the pager (but not when replying).
@end itemize

@node Background Editing, , Sending Format=Flowed Messages, Sending Mail
@subsection Background Editing

If $editor (@pxref{editor}) is set to a graphical
editor, or a script such as @uref{https://gitlab.com/muttmua/mutt/tree/master/contrib/bgedit-screen-tmux.sh,contrib/bgedit-screen-tmux.sh} if running inside GNU Screen or
tmux, you can run the editor in the background by setting $background_edit (@pxref{background_edit}).

If set, Mutt will display a landing page while the editor runs.
When the editor exits, message composition will resume
automatically.  Alternatively, you can
@samp{<exit>} from the landing page, which will
return you to the message index.  This allows viewing other
messages, changing mailboxes, even starting a new message
composition session - all while the first editor session is still
running.

Backgrounded message composition sessions can be viewed via
@samp{<background-compose-menu>} in the index and
pager, by default bound to ‘@samp{B}’.  If
there is only a single backgrounded session, which has already
exited, that session will automatically resume.  Otherwise the list
will be displayed, and a particular session can be selected.  $background_format (@pxref{background_format}) controls the
format string used for the menu.

In case the open mailbox is changed while a reply is backgrounded,
Mutt keeps track of the original mailbox.  After sending, Mutt will
attempt to reopen the original mailbox, if needed, and set reply
flags appropriately.  This won't affect your currently open mailbox,
but may make setting flags a bit slower due to the need to reopen
the original mailbox behind the scenes.

One complication with backgrounded compose sessions is the config
changes caused by send, reply, and folder
hooks (@pxref{Using Hooks}).  These can get triggered by a new message composition
session, or by changing folders during a backgrounded session.  To
help lessen these problems, Mutt takes a snapshot of certain
configuration variables and stores them with each editing session
when it is backgrounded.  When the session is resumed, those stored
settings will temporarily be restored, and removed again when the
session finishes (or is backgrounded again).

Mutt will save all @samp{boolean} and
@samp{quadoption} configuration variables, along with
$folder (@pxref{folder}),
$record (@pxref{record}),
$postponed (@pxref{postponed}),
$envelope_from_address (@pxref{envelope_from_address}),
$from (@pxref{from}),
$sendmail (@pxref{sendmail}),
$smtp_url (@pxref{smtp_url}),
$pgp_sign_as (@pxref{pgp_sign_as}),
$smime_sign_as (@pxref{smime_sign_as}), and
$smime_encrypt_with (@pxref{smime_encrypt_with}).
It's not feasible to backup all variables, but if you believe
we've missed an important setting, please let the developers know.

To help prevent forgetting about backgrounded sessions, $background_confirm_quit (@pxref{background_confirm_quit})
will prompt before exiting, in addition to $quit (@pxref{quit}).  Additionally, the @samp{%B}
expando in $status_format (@pxref{status_format})
displays the number of backgrounded compose sessions.

Background editing is available for most, but not all, message
composition in Mutt.  Sending from the command line disables
background editing, because there is no index to return to.

@node Forwarding and Bouncing Mail, Postponing Mail, Sending Mail, Getting Started
@section Forwarding and Bouncing Mail

Bouncing and forwarding let you send an existing message to recipients
that you specify. Bouncing a message sends a verbatim copy of a message
to alternative addresses as if they were the message's original
recipients specified in the Bcc header.  Forwarding a message, on the
other hand, allows you to modify the message before it is resent (for
example, by adding your own comments). Bouncing is done using the
@samp{<bounce>} function and forwarding using the
@samp{<forward>} function bound to ‘b’
and ‘f’ respectively.

Forwarding can be done by including the original message in the new
message's body (surrounded by indicating lines) or including it as a
MIME attachment, depending on the value of the $mime_forward (@pxref{mime_forward}) variable.  Decoding of
attachments, like in the pager, can be controlled by the $forward_decode (@pxref{forward_decode}) and $mime_forward_decode (@pxref{mime_forward_decode}) variables,
respectively.  The desired forwarding format may depend on the content,
therefore $mime_forward (@pxref{mime_forward}) is a
quadoption which, for example, can be set to ‘ask-no’.

Mutt's default ($mime_forward (@pxref{mime_forward})=‘no’ and
$forward_decode (@pxref{forward_decode})=‘yes’) is
to use standard inline forwarding.  In that mode all text-decodable
parts are included in the new message body.  Other attachments from
the original email can also be attached to the new message, based on the
quadoption $forward_attachments (@pxref{forward_attachments}).

The inclusion of headers is controlled by the current setting of the
$weed (@pxref{weed}) variable, unless $mime_forward (@pxref{mime_forward}) is set.

Editing the message to forward follows the same procedure as sending or
replying to a message does, but can be disabled via the quadoption
$forward_edit (@pxref{forward_edit}).

@node Postponing Mail, Encryption and Signing, Forwarding and Bouncing Mail, Getting Started
@section Postponing Mail

At times it is desirable to delay sending a message that you have
already begun to compose.  When the
@samp{<postpone-message>} function is used in the
@emph{compose} menu, the body of your message and
attachments are stored in the mailbox specified by the $postponed (@pxref{postponed}) variable.  This means that you can
recall the message even if you exit Mutt and then restart it at a later
time.

Once a message is postponed, there are several ways to resume it.  From
the command line you can use the ‘-p’ option, or if you
compose a new message from the @emph{index} or
@emph{pager} you will be prompted if postponed messages
exist.  If multiple messages are currently postponed, the
@emph{postponed} menu will pop up and you can select which
message you would like to resume.

@quotation

@strong{Note}

If you postpone a reply to a message, the reply setting of the message
is only updated when you actually finish the message and send it.  Also,
you must be in the same folder with the message you replied to for the
status of the message to be updated.
@end quotation

See also the $postpone (@pxref{postpone}) quad-option.

@node Encryption and Signing, , Postponing Mail, Getting Started
@section Encryption and Signing

OpenPGP and S/MIME are enabled in one of two ways: ‘classic
mode’ or GPGME.  The former invokes external programs to
perform the various operations; it is better tested and more
flexible, but requires some configuration.  The latter uses the
GnuPG project's GPGME library.

To enable ‘classic mode’, ensure GPGME is disabled and
use the @samp{gpg.rc} or @samp{smime.rc} files
that come with mutt.  These are typically installed under
@samp{/usr/local/share/doc/mutt/samples/}.  Source them, either
directly or by copying them to your .mutt directory and sourcing them.
Sourcing them directly from
@samp{/usr/local/share/doc/mutt/samples/} has the benefit of
automatically using fixes and security improvements to the command
invocations, and is recommended.

@example

unset crypt_use_gpgme
source /usr/local/share/doc/mutt/samples/gpg.rc
source /usr/local/share/doc/mutt/samples/smime.rc
@end example

To use GPGME instead, simply ensure the option is enabled in your .muttrc:

@example

set crypt_use_gpgme
@end example

@menu
* OpenPGP Configuration::
* S/MIME Configuration::
@end menu

@node OpenPGP Configuration, S/MIME Configuration, , Encryption and Signing
@subsection OpenPGP Configuration

The two most important settings are $pgp_default_key (@pxref{pgp_default_key}) and $pgp_sign_as (@pxref{pgp_sign_as}).  To perform encryption, you
must set the first variable.  If you have a separate signing key, or
only have a signing key, then set the second.  Most people will only
need to set $pgp_default_key (@pxref{pgp_default_key}).

Starting with version 2.1.0, GnuPG automatically uses an
@samp{agent} to prompt for your passphrase.  If you are
using a version older than that, you'll need to ensure an agent is
running (alternatively, you can unset $pgp_use_gpg_agent (@pxref{pgp_use_gpg_agent}) and Mutt will
prompt you for your passphrase).  The agent in turn uses a
@samp{pinentry} program to display the prompt.  There are
many different kinds of pinentry programs that can be used: qt, gtk2,
gnome3, fltk, and curses.  However, Mutt does @emph{not}
work properly with the tty pinentry program.  Please ensure you have
one of the GUI or curses pinentry programs installed and configured to
be the default for your system.

@node S/MIME Configuration, , OpenPGP Configuration, Encryption and Signing
@subsection S/MIME Configuration

As with OpenPGP, the two most important settings are $smime_default_key (@pxref{smime_default_key}) and $smime_sign_as (@pxref{smime_sign_as}).  To perform encryption
and decryption, you must set the first variable.  If you have a
separate signing key, or only have a signing key, then set the second.
Most people will only need to set $smime_default_key (@pxref{smime_default_key}).

In ‘classic mode’, keys and certificates are managed by
the @samp{smime_keys} program that comes with Mutt.  By
default they are stored under @samp{~/.smime/}. (This is
set by the @samp{smime.rc} file with $smime_certificates (@pxref{smime_certificates}) and $smime_keys (@pxref{smime_keys}).)  To initialize this
directory, use the command ‘@samp{smime_keys
init}’ from a shell prompt.  The program can be then
be used to import and list certificates.  You may also want to
periodically run ‘@samp{smime_keys refresh}’
to update status flags for your certificates.

@node Configuration, Advanced Usage, Getting Started, Top
@chapter Configuration

@menu
* Location of Initialization Files::
* Starter Muttrc::
* Syntax of Initialization Files::
* Address Groups::
* Defining/Using Aliases::
* Changing the Default Key Bindings::
* Changing the current working directory::
* Defining Aliases for Character Sets::
* Setting Variables Based Upon Mailbox::
* Keyboard Macros::
* Using Color and Mono Video Attributes::
* Message Header Display::
* Alternative Addresses::
* Mailing Lists: Mailing Lists <1>.
* Using Multiple Spool Mailboxes::
* Monitoring Incoming Mail::
* User-Defined Headers::
* Specify Default Save Mailbox::
* Specify Default Fcc; Mailbox When Composing::
* Specify Default Save Filename and Default Fcc; Mailbox at Once::
* Change Settings Based Upon Message Recipients::
* Change Settings Before Formatting a Message::
* Choosing the Cryptographic Key of the Recipient::
* Dynamically Changing $index_format using Patterns::
* Adding Key Sequences to the Keyboard Buffer::
* Executing Functions::
* Message Scoring::
* Spam Detection::
* Setting and Querying Variables::
* Reading Initialization Commands From Another File::
* Removing Hooks::
* Format Strings::
* Control allowed header fields in a mailto; URL::
@end menu

@node Location of Initialization Files, Starter Muttrc, , Configuration
@section Location of Initialization Files

While the default configuration (or ‘preferences’) make
Mutt usable right out of the box, it is often desirable to tailor Mutt
to suit your own tastes. When Mutt is first invoked, it will attempt to
read the ‘system’ configuration file (defaults set by your
local system administrator), unless the ‘-n’ command line (@pxref{Command-Line Options}) option is specified.  This
file is typically @samp{/usr/local/share/mutt/Muttrc} or
@samp{/etc/Muttrc}. Mutt will next look for a file named
@samp{.muttrc} in your home directory.  If this file does
not exist and your home directory has a subdirectory named
@samp{.mutt}, Mutt tries to load a file named
@samp{.mutt/muttrc}.  If still not found, Mutt will try
@samp{$XDG_CONFIG_HOME/mutt/muttrc}.

@samp{.muttrc} is the file where you will usually place your
commands (@pxref{Configuration Commands}) to configure Mutt.

In addition, Mutt supports version specific configuration files that are
parsed instead of the default files as explained above.  For instance,
if your system has a @samp{Muttrc-0.88} file in the system
configuration directory, and you are running version 0.88 of Mutt, this
file will be sourced instead of the @samp{Muttrc} file.  The
same is true of the user configuration file, if you have a file
@samp{.muttrc-0.88.6} in your home directory, when you run
Mutt version 0.88.6, it will source this file instead of the default
@samp{.muttrc} file.  The version number is the same which
is visible using the ‘-v’ command line (@pxref{Command-Line Options}) switch or using the
@samp{show-version} key (default: V) from the index menu.

@node Starter Muttrc, Syntax of Initialization Files, Location of Initialization Files, Configuration
@section Starter Muttrc

Mutt is highly configurable because it's @emph{meant} to
be customized to your needs and preferences.  However, this
configurability can make it difficult when just getting started.  A
few sample muttrc files come with mutt, under
@samp{doc/mutt/samples/}.  Among them, @uref{https://gitlab.com/muttmua/mutt/tree/master/contrib/sample.muttrc-starter,sample.muttrc-starter} is a basic example config with a few
suggested settings and pointers to useful programs.

@node Syntax of Initialization Files, Address Groups, Starter Muttrc, Configuration
@section Syntax of Initialization Files

An initialization file consists of a series of commands (@pxref{Configuration Commands}).  Each line of the file may contain
one or more commands.  When multiple commands are used, they must be
separated by a semicolon (‘;’).

@noindent
@anchor{Multiple configuration commands per line}

@strong{Multiple configuration commands per line}

@example

set realname='Mutt user' ; ignore x-
@end example

The hash mark, or pound sign (‘#’), is used as a
‘comment’ character. You can use it to annotate your
initialization file. All text after the comment character to the end of
the line is ignored.

@noindent
@anchor{Commenting configuration files}

@strong{Commenting configuration files}

@example

my_hdr X-Disclaimer: Why are you listening to me? # This is a comment
@end example

Single quotes (‘'’) and double quotes (‘"’)
can be used to quote strings which contain spaces or other special
characters.  The difference between the two types of quotes is similar
to that of many popular shell programs, namely that a single quote is
used to specify a literal string (one that is not interpreted for shell
variables or quoting with a backslash [see next paragraph]), while
double quotes indicate a string for which should be evaluated.  For
example, backticks are evaluated inside of double quotes, but
@emph{not} for single quotes.

‘\’ quotes the next character, just as in shells such as
bash and zsh.  For example, if want to put quotes ‘"’
inside of a string, you can use ‘\’ to force the next
character to be a literal instead of interpreted character.

@noindent
@anchor{Escaping quotes in configuration files}

@strong{Escaping quotes in configuration files}

@example

set realname="Michael \"MuttDude\" Elkins"
@end example

‘\\’ means to insert a literal ‘\’ into the line.
‘\n’ and ‘\r’ have their usual C meanings of linefeed and
carriage-return, respectively.

A ‘\’ at the end of a line can be used to split commands
over multiple lines as it ‘escapes’ the line end, provided
that the split points don't appear in the middle of command names. Lines
are first concatenated before interpretation so that a multi-line can be
commented by commenting out the first line only.

@noindent
@anchor{Splitting long configuration commands over several lines}

@strong{Splitting long configuration commands over several lines}

@example

set status_format="some very \
long value split \
over several lines"
@end example

It is also possible to substitute the output of a Unix command in an
initialization file.  This is accomplished by enclosing the command in
backticks (``). In @ref{Using external command's output in configuration files}, the output of the
Unix command ‘uname -a’ will be substituted before the line
is parsed.  Since initialization files are line oriented, only the first
line of output from the Unix command will be substituted.

@noindent
@anchor{Using external command's output in configuration files}

@strong{Using external command's output in configuration files}

@example

my_hdr X-Operating-System: `uname -a`
@end example

To avoid the output of backticks being parsed, place them inside
double quotes.  In @ref{Preventing the output of backticks from being parsed}, the output
of the gpg decryption is assigned directly to $imap_pass, so that
special characters in the password (e.g.‘'’,
‘#’, ‘$’) are not parsed and interpreted
specially by mutt.

@noindent
@anchor{Preventing the output of backticks from being parsed}

@strong{Preventing the output of backticks from being parsed}

@example

set imap_pass="`gpg --batch -q --decrypt ~/.mutt/account.gpg`"
@end example

Both environment variables and Mutt variables can be accessed by
prepending ‘$’ to the name of the variable. For example,

@noindent
@anchor{Using environment variables in configuration files}

@strong{Using environment variables in configuration files}

@example

set record=+sent_on_$HOSTNAME
@end example

will cause Mutt to save outgoing messages to a folder named
‘sent_on_kremvax’ if the environment variable
@samp{$HOSTNAME} is set to ‘kremvax.’ (See
$record (@pxref{record}) for details.)

Mutt expands the variable when it is assigned, not when it is used. If
the value of a variable on the right-hand side of an assignment changes
after the assignment, the variable on the left-hand side will not be
affected.

If $muttlisp_inline_eval (@pxref{muttlisp_inline_eval}) is set, an unquoted
parenthesis-enclosed expression will be evaluated as MuttLisp.  See the
Using MuttLisp (@pxref{Using MuttLisp [EXPERIMENTAL]}) section for more details.

@noindent
@anchor{Using MuttLisp expresions}

@strong{Using MuttLisp expresions}

@example

set signature = \
  (if (equal $my_name "Kevin McCarthy") ~/kevin.sig ~/other.sig)
@end example

The commands understood by Mutt are explained in the next paragraphs.
For a complete list, see the command
reference (@pxref{Configuration Commands}).

All configuration files are expected to be in the current locale as
specified by the $charset (@pxref{charset}) variable which
doesn't have a default value since it's determined by Mutt at startup.
If a configuration file is not encoded in the same character set the
$config_charset (@pxref{config_charset}) variable should be
used: all lines starting with the next are recoded from $config_charset (@pxref{config_charset}) to $charset (@pxref{charset}).

This mechanism should be avoided if possible as it has the following
implications:

@itemize 

@item
These variables should be set early in a configuration
file with $charset (@pxref{charset}) preceding $config_charset (@pxref{config_charset}) so Mutt knows what
character set to convert to.

@item
If $config_charset (@pxref{config_charset})
is set, it should be set in each configuration file because the value is
global and @emph{not} per configuration
file.

@item
Because Mutt first recodes a line before it attempts to
parse it, a conversion introducing question marks or other characters as
part of errors (unconvertable characters, transliteration) may introduce
syntax errors or silently change the meaning of certain tokens
(e.g. inserting question marks into regular
expressions).
@end itemize

@node Address Groups, Defining/Using Aliases, Syntax of Initialization Files, Configuration
@section Address Groups

Usage:

@quotation

@t{group [
-group
name
]… @{
-rx
expr
… | 
-addr
expr
…@} ungroup [
-group
name
]… @{
*
| 
-rx
expr
… | 
-addr
expr
…@}}
@end quotation

Mutt supports grouping addresses logically into named groups. An address
or address pattern can appear in several groups at the same time. These
groups can be used in patterns (@pxref{Patterns; Searching; Limiting and Tagging}) (for searching, limiting and tagging) and
in hooks by using group patterns. This can be useful to classify mail
and take certain actions depending on in what groups the message is.
For example, the mutt user's mailing list would fit into the categories
‘mailing list’ and ‘mutt-related’. Using @samp{send-hook} (@pxref{Change Settings Based Upon Message Recipients}), the sender can
be set to a dedicated one for writing mailing list messages, and the
signature could be set to a mutt-related one for writing to a mutt list
— for other lists, the list sender setting still applies but a
different signature can be selected. Or, given a group only containing
recipients known to accept encrypted mail,
‘auto-encryption’ can be achieved easily.

The @code{group} command is used to directly add either
addresses or regular expressions to the specified group or groups. The
different categories of arguments to the @code{group}
command can be in any order. The flags @samp{-rx} and
@samp{-addr} specify what the following strings (that cannot
begin with a hyphen) should be interpreted as: either a regular
expression or an email address, respectively.

These address groups can also be created implicitly by the @code{alias} (@pxref{Defining/Using Aliases}), @code{lists} (@pxref{Mailing Lists <1>}), @code{subscribe} (@pxref{Mailing Lists <1>}) and @code{alternates} (@pxref{Alternative Addresses}) commands by
specifying the optional @samp{-group} option. For example,

@example

alternates -group me address1 address2
alternates -group me -group work address3
@end example

would create a group named ‘me’ which contains all your
addresses and a group named ‘work’ which contains only your
work address @emph{address3}. Besides many other
possibilities, this could be used to automatically mark your own
messages in a mailing list folder as read or use a special signature for
work-related messages.

The @code{ungroup} command is used to remove addresses or
regular expressions from the specified group or groups. The syntax is
similar to the @code{group} command, however the special
character @samp{*} can be used to empty a group of all of
its contents. As soon as a group gets empty because all addresses and
regular expressions have been removed, it'll internally be removed, too
(i.e. there cannot be an empty group). When removing regular expressions
from a group, the pattern must be specified exactly as given to the
@code{group} command or @samp{-group} argument.

@node Defining/Using Aliases, Changing the Default Key Bindings, Address Groups, Configuration
@section Defining/Using Aliases

Usage:

@quotation

@t{alias [
-group
name
]…  
key
address
[
address
]… unalias [
-group
name
]… @{
*
| 
key
…@}}
@end quotation

It's usually very cumbersome to remember or type out the address of
someone you are communicating with.  Mutt allows you to create
‘aliases’ which map a short string to a full address.

@quotation

@strong{Note}

If you want to create an alias for more than one address, you
@emph{must} separate the addresses with a comma
(‘,’).
@end quotation

The optional @samp{-group} argument to
@code{alias} causes the aliased address(es) to be added to
the named @emph{group}.

To add an alias:

@example

alias muttdude me@@cs.hmc.edu (Michael Elkins)
alias theguys manny, moe, jack
@end example

To remove an alias or aliases (‘*’ means all aliases):

@example

unalias muttdude
unalias *
@end example

Unlike other mailers, Mutt doesn't require aliases to be defined in a
special file.  The @code{alias} command can appear anywhere
in a configuration file, as long as this file is @code{source}d (@pxref{Reading Initialization Commands From Another File}).  Consequently, you
can have multiple alias files, or you can have all aliases defined in
your @samp{.muttrc}.

On the other hand, the @samp{<create-alias>} (@pxref{create-alias})
function can use only one file, the one pointed to by the $alias_file (@pxref{alias_file}) variable (which is
@samp{~/.muttrc} by default). This file is not special
either, in the sense that Mutt will happily append aliases to any file,
but in order for the new aliases to take effect you need to explicitly
@code{source} (@pxref{Reading Initialization Commands From Another File}) this file too.

@noindent
@anchor{Configuring external alias files}

@strong{Configuring external alias files}

@example

source /usr/local/share/Mutt.aliases
source ~/.mail_aliases
set alias_file=~/.mail_aliases
@end example

To use aliases, you merely use the alias at any place in Mutt where Mutt
prompts for addresses, such as the @emph{To:} or
@emph{Cc:} prompt.  You can also enter aliases in your
editor at the appropriate headers if you have the $edit_headers (@pxref{edit_headers}) variable set.

In addition, at the various address prompts, you can use the tab
character to expand a partial alias to the full alias.  If there are
multiple matches, Mutt will bring up a menu with the matching aliases.
In order to be presented with the full list of aliases, you must hit tab
without a partial alias, such as at the beginning of the prompt or after
a comma denoting multiple addresses.

In the alias menu, you can select as many aliases as you want with the
@samp{select-entry} key (default: <Return>), and use
the @emph{exit} key (default: q) to return to the address
prompt.

@node Changing the Default Key Bindings, Changing the current working directory, Defining/Using Aliases, Configuration
@section Changing the Default Key Bindings

Usage:

@quotation

@t{bind  
map
key
function
}
@end quotation

This command allows you to change the default key bindings (operation
invoked when pressing a key).

@emph{map} specifies in which menu the binding belongs.
Multiple maps may be specified by separating them with commas (no
additional whitespace is allowed). The currently defined maps are:

@noindent
@anchor{maps}

@table @asis

@item generic
This is not a real menu, but is used as a fallback for all of the other
menus except for the pager and editor modes.  If a key is not defined in
another menu, Mutt will look for a binding to use in this menu.  This
allows you to bind a key to a certain function in multiple menus instead
of having multiple @code{bind} statements to accomplish the
same task.

@item alias
The alias menu is the list of your personal aliases as defined in your
@samp{.muttrc}.  It is the mapping from a short alias name
to the full email address(es) of the recipient(s).

@item attach
The attachment menu is used to access the attachments on received
messages.

@item browser
The browser is used for both browsing the local directory structure, and
for listing all of your incoming mailboxes.

@item editor
The editor is used to allow the user to enter a single line of text, such as
the @emph{To} or @emph{Subject} prompts in the
@samp{compose} menu.

@item index
The index is the list of messages contained in a mailbox.

@item compose
The compose menu is the screen used when sending a new message.

@item pager
The pager is the mode used to display message/attachment data, and help
listings.

@item pgp
The pgp menu is used to select the OpenPGP keys used to encrypt outgoing
messages.

@item smime
The smime menu is used to select the OpenSSL certificates used to
encrypt outgoing messages.

@item postpone
The postpone menu is similar to the index menu, except is used when
recalling a message the user was composing, but saved until later.

@item query
The query menu is the browser for results returned by $query_command (@pxref{query_command}).

@item mix
The mixmaster screen is used to select remailer options for outgoing
messages (if Mutt is compiled with Mixmaster support).
@end table

@emph{key} is the key (or key sequence) you wish to bind.
To specify a control character, use the sequence
@emph{\Cx}, where @emph{x} is the letter of
the control character (for example, to specify control-A use
‘\Ca’).  Note that the case of @emph{x} as
well as @emph{\C} is ignored, so that
@emph{\CA}, @emph{\Ca},
@emph{\cA} and @emph{\ca} are all
equivalent.  An alternative form is to specify the key as a three digit
octal number prefixed with a ‘\’ (for example
@emph{\177} is equivalent to @emph{\c?}). In
addition, @emph{key} may be a symbolic name as shown in
@ref{Symbolic key names}.

@noindent
@anchor{Symbolic key names}

@strong{Symbolic key names}

@multitable @columnfractions 0.5 0.5
@item
Symbolic name@tab Meaning
@item
\t@tab tab
@item
<tab>@tab tab
@item
<backtab>@tab backtab / shift-tab
@item
\r@tab carriage return
@item
\n@tab newline
@item
\e@tab escape
@item
<esc>@tab escape
@item
<up>@tab up arrow
@item
<down>@tab down arrow
@item
<left>@tab left arrow
@item
<right>@tab right arrow
@item
<pageup>@tab Page Up
@item
<pagedown>@tab Page Down
@item
<backspace>@tab Backspace
@item
<delete>@tab Delete
@item
<insert>@tab Insert
@item
<enter>@tab Enter
@item
<return>@tab Return
@item
<home>@tab Home
@item
<end>@tab End
@item
<space>@tab Space bar
@item
<f1>@tab function key 1
@item
<f10>@tab function key 10
@end multitable

The @samp{<what-key>} function can be used to
explore keycode and symbolic names for other keys on your keyboard.
Executing this function will display information about each key
pressed, until terminated by @samp{^G}.

@emph{key} does not need to be enclosed in quotes unless
it contains a space (‘ ’) or semi-colon
(‘;’).

@emph{function} specifies which action to take when
@emph{key} is pressed.  For a complete list of functions,
see the reference (@pxref{Functions <1>}). Note that the
@code{bind} expects @emph{function} to be
specified without angle brackets.

The special function @samp{<noop>} unbinds the
specified key sequence.

@menu
* Terminal Keybindings::
@end menu

@node Terminal Keybindings, , , Changing the Default Key Bindings
@subsection Terminal Keybindings

Some key bindings are controlled by the terminal, and so by
default can't be bound inside Mutt.  These may include
@samp{^C}, @samp{^\}, @samp{^Q},
@samp{^S}, @samp{^Z}, and on BSD/Mac
@samp{^Y}.  These terminal settings can be viewed and
changed using the @samp{stty} program.

‘@samp{stty -a}’ will list the bound
characters (not all of them affect Mutt), and what actions they
take when pressed.  For example,
you may see ‘@samp{intr = ^C}’ in its
output.  This means typing @samp{^C} will send an
interrupt signal.  ‘@samp{quit = ^\}’
means typing @samp{^\} (commonly also
@samp{^4}) will send a quit signal.

To unbind a key from an action, you invoke ‘stty action
undef’.  For example, ‘@samp{stty quit
undef}’ will unbind @samp{^\} (and
@samp{^4}) from sending the quit signal.  Once unbound
(e.g, by placing that line in your .bashrc, or in a Mutt wrapper
script/function) you can use the key sequence in your Mutt
bindings.

@node Changing the current working directory, Defining Aliases for Character Sets, Changing the Default Key Bindings, Configuration
@section Changing the current working directory

Usage:

@quotation

@t{cd  
directory
}
@end quotation

The @samp{cd} command changes Mutt's current working directory.
This affects commands and functions like @samp{source},
@samp{change-folder}, and @samp{save-entry} that use
relative paths. Using @samp{cd} without directory changes to your
home directory.

@node Defining Aliases for Character Sets, Setting Variables Based Upon Mailbox, Changing the current working directory, Configuration
@section Defining Aliases for Character Sets

Usage:

@quotation

@t{charset-hook  
alias
charset
iconv-hook  
charset
local-charset
}
@end quotation

The @code{charset-hook} command defines an alias for a
character set.  This is useful to properly display messages which are
tagged with a character set name not known to Mutt.

The @code{iconv-hook} command defines a system-specific name
for a character set.  This is helpful when your systems character
conversion library insists on using strange, system-specific names for
character sets.

@node Setting Variables Based Upon Mailbox, Keyboard Macros, Defining Aliases for Character Sets, Configuration
@section Setting Variables Based Upon Mailbox

Usage:

@quotation

@t{folder-hook  
[!]regexp
command
}
@end quotation

It is often desirable to change settings based on which mailbox you are
reading.  The @code{folder-hook} command provides a method
by which you can execute any configuration command.
@emph{regexp} is a regular expression specifying in which
mailboxes to execute @emph{command} before loading.  If a
mailbox matches multiple @code{folder-hook}s, they are
executed in the order given in the @samp{.muttrc}.

The regexp parameter has mailbox
shortcut (@pxref{Mailbox Shortcuts}) expansion performed on the first character.
See  @ref{Mailbox Matching in Hooks} for more details.

@quotation

@strong{Note}

If you use the ‘!’ shortcut for $spoolfile (@pxref{spoolfile}) at the beginning of the pattern,
you must place it inside of double or single quotes in order to
distinguish it from the logical @emph{not} operator for
the expression.
@end quotation

@quotation

@strong{Note}

Settings are @emph{not} restored when you leave the
mailbox.  For example, a command action to perform is to change the
sorting method based upon the mailbox being read:

@example

folder-hook mutt "set sort=threads"
@end example

However, the sorting method is not restored to its previous value when
reading a different mailbox.  To specify a @emph{default}
command, use the pattern ‘.’ before other
@code{folder-hook}s adjusting a value on a per-folder basis
because @code{folder-hook}s are evaluated in the order given
in the configuration file.
@end quotation

@quotation

@strong{Note}

The keyboard buffer will not be processed until after all hooks
are run; multiple push (@pxref{Adding Key Sequences to the Keyboard Buffer}) or exec (@pxref{Executing Functions}) commands will end up being processed in
reverse order.
@end quotation

The following example will set the sort (@pxref{sort})
variable to @samp{date-sent} for all folders but to
@samp{threads} for all folders containing
‘mutt’ in their name.

@noindent
@anchor{Setting sort method based on mailbox name}

@strong{Setting sort method based on mailbox name}

@example

folder-hook . "set sort=date-sent"
folder-hook mutt "set sort=threads"
@end example

@node Keyboard Macros, Using Color and Mono Video Attributes, Setting Variables Based Upon Mailbox, Configuration
@section Keyboard Macros

Usage:

@quotation

@t{macro  
menu
key
sequence
[
description
]}
@end quotation

Macros are useful when you would like a single key to perform a series
of actions.  When you press @emph{key} in menu
@emph{menu}, Mutt will behave as if you had typed
@emph{sequence}.  So if you have a common sequence of
commands you type, you can create a macro to execute those commands with
a single key or fewer keys.

@emph{menu} is the map (@pxref{maps}) which
the macro will be bound in.  Multiple maps may be specified by
separating multiple menu arguments by commas. Whitespace may not be used
in between the menu arguments and the commas separating them.

@emph{key} and @emph{sequence} are expanded
by the same rules as the key bindings (@pxref{Changing the Default Key Bindings}) with
some additions.  The first is that control characters in
@emph{sequence} can also be specified as
@emph{^x}.  In order to get a caret (‘^’) you
need to use @emph{^^}.  Secondly, to specify a certain key
such as @emph{up} or to invoke a function directly, you
can use the format @emph{<key name>} and
@emph{<function name>}.  For a listing of key names
see the section on key bindings (@pxref{Changing the Default Key Bindings}).  Functions
are listed in the reference (@pxref{Functions <1>}).

The advantage with using function names directly is that the macros will
work regardless of the current key bindings, so they are not dependent
on the user having particular key definitions.  This makes them more
robust and portable, and also facilitates defining of macros in files
used by more than one user (e.g., the system Muttrc).

Optionally you can specify a descriptive text after
@emph{sequence}, which is shown in the help screens if
they contain a description.

@quotation

@strong{Note}

Macro definitions (if any) listed in the help screen(s), are
silently truncated at the screen width, and are not wrapped.
@end quotation

@node Using Color and Mono Video Attributes, Message Header Display, Keyboard Macros, Configuration
@section Using Color and Mono Video Attributes

Usage:

@quotation

@t{color  
object
[
attribute
]…  
foreground
background
color @{
header
| 
body
@} [
attribute
]…  
foreground
background
regexp
color  
index
[
attribute
]…  
foreground
background
pattern
color  
compose
composeobject
[
attribute
]…  
foreground
background
uncolor @{
index
| 
header
| 
body
@} @{
*
| 
pattern
…@}}
@end quotation

If your terminal supports color, you can spice up Mutt by creating your
own color scheme.  To define the color of an object (type of
information), you must specify both a foreground color
@emph{and} a background color (it is not possible to only
specify one or the other).

@emph{header} and @emph{body} match
@emph{regexp (@pxref{Regular Expressions})} in the
header/body of a message, @emph{index} matches
@emph{pattern (@pxref{Patterns; Searching; Limiting and Tagging})} in the
message index.  Note that IMAP server-side searches (=b, =B, =h) are
not supported for color index patterns.

When $header_color_partial (@pxref{header_color_partial})
is unset (the default), a @emph{header} matched by
@emph{regexp} will have color applied to the entire header.
When set, color is applied only to the exact text matched by
@emph{regexp}.

@emph{object} can be one of:

@itemize 

@item
attachment

@item
bold (highlighting bold patterns in the body of messages)

@item
error (error messages printed by Mutt)

@item
hdrdefault (default color of the message header in the pager)

@item
indicator (arrow or bar used to indicate the current item in a menu)

@item
markers (the ‘+’ markers at the beginning of wrapped lines in the pager)

@item
message (informational messages)

@item
normal

@item
prompt

@item
quoted (text matching $quote_regexp (@pxref{quote_regexp}) in the body of a message)

@item
quoted1, quoted2, ..., quoted@emph{N} (higher levels of quoting)

@item
search (highlighting of words in the pager)

@item
signature

@item
status (mode lines used to display info about the mailbox or message)

@item
tilde (the ‘~’ used to pad blank lines in the pager)

@item
tree (thread tree drawn in the message index and attachment menu)

@item
underline (highlighting underlined patterns in the body of messages)
@end itemize

@emph{composeobject} can be one of:

@itemize 

@item
header

@item
security_encrypt

@item
security_sign

@item
security_both

@item
security_none
@end itemize

@emph{attribute} can be one of the following:

@itemize 

@item
none

@item
bold

@item
underline

@item
reverse

@item
standout
@end itemize

@emph{foreground} and @emph{background} can
be one of the following:

@itemize 

@item
white

@item
black

@item
green

@item
magenta

@item
blue

@item
cyan

@item
yellow

@item
red

@item
default

@item
color@emph{x}
@end itemize

The color name can optionally be prefixed with the keyword
@samp{bright} or @samp{light} to make the color
boldfaced or light (e.g., @samp{brightred}). The precise
behavior depends on the terminal and its configuration. In particular,
the boldfaced/light difference and such background colors may be
available only for terminals configured with at least 16 colors,
as specified by the @samp{$TERM} environment variable.

If your terminal supports it, the special keyword
@emph{default} can be used as a transparent color.  The
value @emph{brightdefault} is also valid.  If Mutt is
linked against the @emph{S-Lang} library, you also need to
set the @samp{$COLORFGBG} environment variable to the
default colors of your terminal for this to work; for example (for
Bourne-like shells):

@example

set COLORFGBG="green;black"
export COLORFGBG
@end example

@quotation

@strong{Note}

The @emph{S-Lang} library requires you to use the
@emph{lightgray} and @emph{brown} keywords
instead of @emph{white} and @emph{yellow}
when setting this variable.
@end quotation

@quotation

@strong{Note}

The @code{uncolor} command can be applied to the index,
header and body objects only.  It removes entries from the list. You
@emph{must} specify the same pattern specified in the
@code{color} command for it to be removed.  The pattern
‘*’ is a special token which means to clear the color list
of all entries.
@end quotation

Mutt also recognizes the keywords @emph{color0},
@emph{color1}, ...,
@emph{color}@emph{N-1}
(@emph{N} being the number of colors supported by your
terminal).  This is useful when you remap the colors for your display
(for example by changing the color associated with
@emph{color2} for your xterm), since color names may then
lose their normal meaning.

@noindent
@anchor{mono}

If your terminal does not support color, it is still possible change the
video attributes through the use of the ‘mono’
command. Usage:

@quotation

@t{mono  
object
attribute
mono @{
header
| 
body
@}  
attribute
regexp
mono  
index
attribute
pattern
mono  
compose
composeobject
attribute
unmono @{
index
| 
header
| 
body
@} @{
*
| 
pattern
…@}}
@end quotation

For @emph{object}, @emph{composeobject}, and
@emph{attribute}, see the @code{color} command.

@node Message Header Display, Alternative Addresses, Using Color and Mono Video Attributes, Configuration
@section Message Header Display

@menu
* Header Display::
* Selecting Headers::
* Ordering Displayed Headers::
@end menu

@node Header Display, Selecting Headers, , Message Header Display
@subsection Header Display

When displaying a message in the pager, Mutt folds long header lines at
$wrap (@pxref{wrap}) columns. Though there're precise rules
about where to break and how, Mutt always folds headers using a tab for
readability. (Note that the sending side is not affected by this, Mutt
tries to implement standards compliant folding.)

@node Selecting Headers, Ordering Displayed Headers, Header Display, Message Header Display
@subsection Selecting Headers

Usage:

@quotation

@t{ignore  
pattern
[
pattern
]… unignore @{
*
| 
pattern
…@}}
@end quotation

Messages often have many header fields added by automatic processing
systems, or which may not seem useful to display on the screen.  This
command allows you to specify header fields which you don't normally
want to see in the pager.

You do not need to specify the full header field name.  For example,
‘ignore content-’ will ignore all header fields that begin
with the pattern ‘content-’. ‘ignore *’ will
ignore all headers.

To remove a previously added token from the list, use the
‘unignore’ command.  The ‘unignore’ command
will make Mutt display headers with the given pattern.  For example, if
you do ‘ignore x-’ it is possible to ‘unignore
x-mailer’.

‘unignore *’ will remove all tokens from the ignore list.

@noindent
@anchor{Header weeding}

@strong{Header weeding}

@example

# Sven's draconian header weeding
ignore *
unignore from date subject to cc
unignore organization organisation x-mailer: x-newsreader: x-mailing-list:
unignore posted-to:
@end example

@node Ordering Displayed Headers, , Selecting Headers, Message Header Display
@subsection Ordering Displayed Headers

Usage:

@quotation

@t{hdr_order  
header
[
header
]… unhdr_order @{
*
| 
header
…@}}
@end quotation

With the @code{hdr_order} command you can specify an order
in which Mutt will attempt to present these headers to you when viewing
messages.

‘@code{unhdr_order} *’ will clear all previous
headers from the order list, thus removing the header order effects set
by the system-wide startup file.

@noindent
@anchor{Configuring header display order}

@strong{Configuring header display order}

@example

hdr_order From Date: From: To: Cc: Subject:
@end example

@node Alternative Addresses, Mailing Lists <1>, Message Header Display, Configuration
@section Alternative Addresses

Usage:

@quotation

@t{alternates [
-group
name
]…  
regexp
[
regexp
]… unalternates [
-group
name
]… @{
*
| 
regexp
…@}}
@end quotation

With various functions, Mutt will treat messages differently, depending
on whether you sent them or whether you received them from someone else.
For instance, when replying to a message that you sent to a different
party, Mutt will automatically suggest to send the response to the
original message's recipients — responding to yourself won't make
much sense in many cases.  (See $reply_to (@pxref{reply_to}).)

Many users receive e-mail under a number of different addresses. To
fully use Mutt's features here, the program must be able to recognize
what e-mail addresses you receive mail under. That's the purpose of the
@code{alternates} command: It takes a list of regular
expressions, each of which can identify an address under which you
receive e-mail.

As addresses are matched using regular expressions and not exact strict
comparisons, you should make sure you specify your addresses as precise
as possible to avoid mismatches. For example, if you specify:

@example

alternates user@@example
@end example

Mutt will consider ‘@samp{some-user@@example}’
as being your address, too which may not be desired. As a solution, in
such cases addresses should be specified as:

@example

alternates '^user@@example$'
@end example

The @samp{-group} flag causes all of the subsequent regular
expressions to be added to the named group.

The @code{unalternates} command can be used to write
exceptions to @code{alternates} patterns. If an address
matches something in an @code{alternates} command, but you
nonetheless do not think it is from you, you can list a more precise
pattern under an @code{unalternates} command.

To remove a regular expression from the @code{alternates}
list, use the @code{unalternates} command with exactly the
same @emph{regexp}.  Likewise, if the
@emph{regexp} for an @code{alternates} command
matches an entry on the @code{unalternates} list, that
@code{unalternates} entry will be removed. If the
@emph{regexp} for @code{unalternates} is
‘*’, @emph{all entries} on
@code{alternates} will be removed.

@node Mailing Lists <1>, Using Multiple Spool Mailboxes, Alternative Addresses, Configuration
@section Mailing Lists

@noindent
@anchor{subscribe}

Usage:

@quotation

@t{lists [
-group
name
]…  
regexp
[
regexp
]… unlists @{
*
| 
regexp
…@} subscribe [
-group
name
]…  
regexp
[
regexp
]… unsubscribe @{
*
| 
regexp
…@}}
@end quotation

Mutt has a few nice features for handling
mailing lists (@pxref{Handling Mailing Lists}).  In order to take advantage of them, you must
specify which addresses belong to mailing lists, and which mailing lists
you are subscribed to. Mutt also has limited support for auto-detecting
mailing lists: it supports parsing @samp{mailto:} links in
the common @samp{List-Post:} header which has the same
effect as specifying the list address via the @code{lists}
command (except the group feature). Once you have done this, the @samp{<list-reply>} (@pxref{list-reply})
function will work for all known lists.  Additionally, when you send a
message to a known list and $followup_to (@pxref{followup_to}) is set, Mutt will add a
Mail-Followup-To header.  For unsubscribed lists, this will include
your personal address, ensuring you receive a copy of replies.  For
subscribed mailing lists, the header will not, telling other users'
mail user agents not to send copies of replies to your personal
address.

@quotation

@strong{Note}

The Mail-Followup-To header is a non-standard extension which is not
supported by all mail user agents.  Adding it is not bullet-proof
against receiving personal CCs of list messages.  Also note that the
generation of the Mail-Followup-To header is controlled by the $followup_to (@pxref{followup_to}) configuration variable since
it's common practice on some mailing lists to send Cc upon replies
(which is more a group- than a list-reply).
@end quotation

More precisely, Mutt maintains lists of patterns for the addresses of
known and subscribed mailing lists.  Every subscribed mailing list is
known. To mark a mailing list as known, use the @code{list}
command.  To mark it as subscribed, use @code{subscribe}.

You can use regular expressions with both commands. To mark all messages
sent to a specific bug report's address on Debian's bug tracking system
as list mail, for instance, you could say

@example

subscribe [0-9]+.*@@bugs.debian.org
@end example

as it's often sufficient to just give a portion of the list's e-mail
address.

Specify as much of the address as you need to remove ambiguity.  For
example, if you've subscribed to the Mutt mailing list, you will receive
mail addressed to @samp{mutt-users@@mutt.org}.  So, to tell
Mutt that this is a mailing list, you could add @samp{lists
mutt-users@@} to your initialization file.  To tell Mutt that
you are subscribed to it, add @samp{@code{subscribe}
mutt-users} to your initialization file instead.  If you also
happen to get mail from someone whose address is
@samp{mutt-users@@example.com}, you could use
@samp{@code{lists} ^mutt-users@@mutt\\.org$} or
@samp{@code{subscribe} ^mutt-users@@mutt\\.org$}
to match only mail from the actual list.

The @samp{-group} flag adds all of the subsequent regular
expressions to the named address group (@pxref{Address Groups})
in addition to adding to the specified address list.

The ‘unlists’ command is used to remove a token from the
list of known and subscribed mailing-lists. Use ‘unlists *’
to remove all tokens.

To remove a mailing list from the list of subscribed mailing lists, but
keep it on the list of known mailing lists, use
@code{unsubscribe}.

@node Using Multiple Spool Mailboxes, Monitoring Incoming Mail, Mailing Lists <1>, Configuration
@section Using Multiple Spool Mailboxes

Usage:

@quotation

@t{mbox-hook  
[!]regexp
mailbox
}
@end quotation

This command is used to move read messages from a specified mailbox to a
different mailbox automatically when you quit or change folders.
@emph{regexp} is a regular expression specifying the
mailbox to treat as a ‘spool’ mailbox and
@emph{mailbox} specifies where mail should be saved when
read.

The regexp parameter has mailbox
shortcut (@pxref{Mailbox Shortcuts}) expansion performed on the first character.
See  @ref{Mailbox Matching in Hooks} for more details.

Note that execution of mbox-hooks is dependent on the $move (@pxref{move}) configuration variable.  If set to
‘no’ (the default), mbox-hooks will not be executed.

Unlike some of the other @emph{hook} commands, only the
@emph{first} matching regexp is used (it is not possible
to save read mail in more than a single mailbox).

@node Monitoring Incoming Mail, User-Defined Headers, Using Multiple Spool Mailboxes, Configuration
@section Monitoring Incoming Mail

Usage:

@quotation

@t{mailboxes [
[
-poll
| 
-nopoll
]
[
-label
label
| 
-nolabel
]
mailbox
] []… unmailboxes @{
*
| 
mailbox
…@}}
@end quotation

This command specifies folders which can receive mail and which will be
checked for new messages periodically.

To disable polling, specify @samp{-nopoll} before the
mailbox name.  The @samp{-poll} argument can be used to
reenable polling for an existing mailbox.  If unspecified: a new
mailbox will poll by default, while an existing mailbox will be
unchanged.

The @samp{-label} argument can be used to specify an
alternative label to print in the sidebar or mailbox browser instead
of the mailbox path.  A label may be removed via the
@samp{-nolabel} argument.  If unspecified, an existing
mailbox label will be unchanged.

@emph{mailbox} can either be a local file or directory
(Mbox/Mmdf or Maildir/Mh). If Mutt was built with POP and/or IMAP
support, @emph{mailbox} can also be a POP/IMAP folder
URL. The URL syntax is described in @ref{URL Syntax}, POP
and IMAP are described in @ref{POP3 Support} and @ref{IMAP Support} respectively.

Mutt provides a number of advanced features for handling (possibly many)
folders and new mail within them, please refer to @ref{New Mail Detection} for details (including in what situations and how
often Mutt checks for new mail).
Additionally, $new_mail_command (@pxref{new_mail_command})
can be used to run a command when new mail is detected.

The ‘unmailboxes’ command is used to remove a token from
the list of folders which receive mail. Use ‘unmailboxes *’
to remove all tokens.

@quotation

@strong{Note}

The folders in the @code{mailboxes} command are resolved
when the command is executed, so if these names contain shortcut characters (@pxref{Mailbox Shortcuts}) (such as ‘=’
and ‘!’), any variable definition that affects these
characters (like $folder (@pxref{folder}) and $spoolfile (@pxref{spoolfile})) should be set before the
@code{mailboxes} command. If none of these shortcuts are
used, a local path should be absolute as otherwise Mutt tries to find it
relative to the directory from where Mutt was started which may not
always be desired.
@end quotation

@node User-Defined Headers, Specify Default Save Mailbox, Monitoring Incoming Mail, Configuration
@section User-Defined Headers

Usage:

@quotation

@t{my_hdr  
string
unmy_hdr @{
*
| 
field
…@}}
@end quotation

The @code{my_hdr} command allows you to create your own
header fields which will be added to every message you send and appear
in the editor if $edit_headers (@pxref{edit_headers}) is
set.

For example, if you would like to add an ‘Organization:’
header field to all of your outgoing messages, you can put the command
something like shown in @ref{Defining custom headers} in your
@samp{.muttrc}.

@noindent
@anchor{Defining custom headers}

@strong{Defining custom headers}

@example

my_hdr Organization: A Really Big Company, Anytown, USA
@end example

@quotation

@strong{Note}

Space characters are @emph{not} allowed between the
keyword and the colon (‘:’). The standard for electronic
mail (RFC2822) says that space is illegal there, so Mutt enforces the
rule.
@end quotation

If you would like to add a header field to a single message, you should
either set the $edit_headers (@pxref{edit_headers})
variable, or use the @samp{<edit-headers>} function
(default: ‘E’) in the compose menu so that you can edit the
header of your message along with the body.

To remove user defined header fields, use the
@code{unmy_hdr} command. You may specify an asterisk
(‘*’) to remove all header fields, or the fields to
remove. For example, to remove all ‘To’ and
‘Cc’ header fields, you could use:

@example

unmy_hdr to cc
@end example

@node Specify Default Save Mailbox, Specify Default Fcc; Mailbox When Composing, User-Defined Headers, Configuration
@section Specify Default Save Mailbox

Usage:

@quotation

@t{save-hook  
[!]pattern
mailbox
}
@end quotation

This command is used to override the default mailbox used when saving
messages. @emph{mailbox} will be used as the default if
the message matches @emph{pattern}, see @ref{Message Matching in Hooks} for information on the exact format.

To provide more flexibility and good defaults, Mutt applies the expandos
of $index_format (@pxref{index_format}) to
@emph{mailbox} after it was expanded.

@noindent
@anchor{Using %-expandos in save-hook}

@strong{Using %-expandos in save-hook}

@example

# default: save all to ~/Mail/<author name>
save-hook . ~/Mail/%F

# save from me@@turing.cs.hmc.edu and me@@cs.hmc.edu to $folder/elkins
save-hook me@@(turing\\.)?cs\\.hmc\\.edu$ +elkins

# save from aol.com to $folder/spam
save-hook aol\\.com$ +spam
@end example

Also see the @code{fcc-save-hook} (@pxref{Specify Default Save Filename and Default Fcc; Mailbox at Once}) command.

@node Specify Default Fcc; Mailbox When Composing, Specify Default Save Filename and Default Fcc; Mailbox at Once, Specify Default Save Mailbox, Configuration
@section Specify Default Fcc: Mailbox When Composing

Usage:

@quotation

@t{fcc-hook  
[!]pattern
mailbox
}
@end quotation

This command is used to save outgoing mail in a mailbox other than $record (@pxref{record}).  Mutt searches the initial list of
message recipients for the first matching @emph{pattern}
and uses @emph{mailbox} as the default Fcc: mailbox.  If
no match is found the message will be saved to $record (@pxref{record}) mailbox.

To provide more flexibility and good defaults, Mutt applies the
expandos of $index_format (@pxref{index_format}) to
@emph{mailbox} after it was expanded.

See @ref{Message Matching in Hooks} for information on the exact format
of @emph{pattern}.

@example
fcc-hook [@@.]aol\\.com$ +spammers
@end example

...will save a copy of all messages going to the aol.com domain to the
`+spammers' mailbox by default.  Also see the @code{fcc-save-hook} (@pxref{Specify Default Save Filename and Default Fcc; Mailbox at Once}) command.

Multiple mailboxes may be specified by separating them with $fcc_delimiter (@pxref{fcc_delimiter}), if set:

@example

  set fcc_delimiter = ','
  fcc-hook 'foo@@example\.com$' '+one,+two'
@end example

@node Specify Default Save Filename and Default Fcc; Mailbox at Once, Change Settings Based Upon Message Recipients, Specify Default Fcc; Mailbox When Composing, Configuration
@section Specify Default Save Filename and Default Fcc: Mailbox at Once

Usage:

@quotation

@t{fcc-save-hook  
[!]pattern
mailbox
}
@end quotation

This command is a shortcut, almost equivalent to doing both a @code{fcc-hook} (@pxref{Specify Default Fcc; Mailbox When Composing}) and a @code{save-hook} (@pxref{Specify Default Save Mailbox}) with its
arguments, including %-expansion on @emph{mailbox}
according to $index_format (@pxref{index_format}).

Note, however that the fcc-save-hook is not designed to take advantage
of multiple mailboxes, as fcc-hook is.  For correct behavior, you should
use separate fcc and save hooks in that case.

@node Change Settings Based Upon Message Recipients, Change Settings Before Formatting a Message, Specify Default Save Filename and Default Fcc; Mailbox at Once, Configuration
@section Change Settings Based Upon Message Recipients

@noindent
@anchor{reply-hook}@anchor{send2-hook}

Usage:

@quotation

@t{reply-hook  
[!]pattern
command
send-hook  
[!]pattern
command
send2-hook  
[!]pattern
command
}
@end quotation

These commands can be used to execute arbitrary configuration commands
based upon recipients of the message.  @emph{pattern} is
used to match the message, see @ref{Message Matching in Hooks} for
details. @emph{command} is executed when
@emph{pattern} matches.

@code{reply-hook} is matched against the message you are
@emph{replying to}, instead of the message you are
@emph{sending}.  @code{send-hook} is matched
against all messages, both @emph{new} and
@emph{replies}.

@quotation

@strong{Note}

@code{reply-hook}s are matched @emph{before} the
@code{send-hook}, @emph{regardless} of the order
specified in the user's configuration file.  However, you can inhibit
@code{send-hook} in the reply case by using the pattern
@samp{'! ~Q'} (@emph{not replied}, see
@ref{Message Matching in Hooks}) in the @code{send-hook} to tell
when @code{reply-hook} have been executed.
@end quotation

@code{send2-hook} is matched every time a message is
changed, either by editing it, or by using the compose menu to change
its recipients or subject.  @code{send2-hook} is executed
after @code{send-hook}, and can, e.g., be used to set
parameters such as the $sendmail (@pxref{sendmail})
variable depending on the message's sender address.

For each type of @code{send-hook} or
@code{reply-hook}, when multiple matches occur, commands are
executed in the order they are specified in the
@samp{.muttrc} (for that type of hook).

Example: @samp{@code{send-hook} mutt
"@code{set} mime_forward signature=''"}

Another typical use for this command is to change the values of the
$attribution (@pxref{attribution}), $attribution_locale (@pxref{attribution_locale}), and $signature (@pxref{signature}) variables in order to change the
language of the attributions and signatures based upon the recipients.

@quotation

@strong{Note}

@code{send-hook}'s are only executed once after getting the
initial list of recipients.  They are not executed when resuming a postponed
draft.  Adding a recipient after replying or
editing the message will not cause any @code{send-hook} to
be executed, similarly if $autoedit (@pxref{autoedit}) is
set (as then the initial list of recipients is empty). Also note that
@code{my_hdr} (@pxref{User-Defined Headers}) commands which
modify recipient headers, or the message's subject, don't have any
effect on the current message when executed from a
@code{send-hook}.
@end quotation

@node Change Settings Before Formatting a Message, Choosing the Cryptographic Key of the Recipient, Change Settings Based Upon Message Recipients, Configuration
@section Change Settings Before Formatting a Message

Usage:

@quotation

@t{message-hook  
[!]pattern
command
}
@end quotation

This command can be used to execute arbitrary configuration commands
before viewing or formatting a message based upon information about the
message.  @emph{command} is executed if the
@emph{pattern} matches the message to be displayed. When
multiple matches occur, commands are executed in the order they are
specified in the @samp{.muttrc}.

See @ref{Message Matching in Hooks} for information on the exact format
of @emph{pattern}.

Example:

@example

message-hook ~A 'set pager=builtin'
message-hook '~f freshmeat-news' 'set pager="less \"+/^  subject: .*\""'
@end example

@node Choosing the Cryptographic Key of the Recipient, Dynamically Changing $index_format using Patterns, Change Settings Before Formatting a Message, Configuration
@section Choosing the Cryptographic Key of the Recipient

Usage:

@quotation

@t{crypt-hook  
regexp
keyid
}
@end quotation

When encrypting messages with PGP/GnuPG or OpenSSL, you may want to
associate a certain key with a given e-mail address automatically,
either because the recipient's public key can't be deduced from the
destination address, or because, for some reasons, you need to override
the key Mutt would normally use.  The @code{crypt-hook}
command provides a method by which you can specify the ID of the public
key to be used when encrypting messages to a certain recipient.
You may use multiple crypt-hooks with the same regexp; multiple
matching crypt-hooks result in the use of multiple keyids for
a recipient.  During key selection, Mutt will confirm whether each
crypt-hook is to be used (unless the $crypt_confirmhook (@pxref{crypt_confirmhook}) option is unset).
If all crypt-hooks for a recipient are declined, Mutt will use the
original recipient address for key selection instead.

The meaning of @emph{keyid} is to be taken broadly in this
context: You can either put a numerical key ID or fingerprint here, an
e-mail address, or even just a real name.

@node Dynamically Changing $index_format using Patterns, Adding Key Sequences to the Keyboard Buffer, Choosing the Cryptographic Key of the Recipient, Configuration
@section Dynamically Changing $index_format using Patterns

Usage:

@quotation

@t{index-format-hook  
name
[!]pattern
format-string
}
@end quotation

This command is used to inject format strings dynamically into $index_format (@pxref{index_format}) based on pattern matching
against the current message.

The $index_format (@pxref{index_format}) expando
@emph{%@@name@@} specifies a placeholder for the
injection.  Index-format-hooks with the same @emph{name}
are matched using @emph{pattern} (@pxref{Patterns; Searching; Limiting and Tagging}) against the
current message.  Matching is done in the order specified in the
.muttrc, with the first match being used.  The hook's
@emph{format-string} is then substituted and evaluated.

Because the first match is used, best practice is to put a catch-all
@emph{~A} pattern as the last hook.  Here is an example
showing how to implement dynamic date formatting:

@example

set index_format="%4C %-6@@date@@ %-15.15F %Z (%4c) %s"

index-format-hook  date  "~d<1d"    "%[%H:%M]"
index-format-hook  date  "~d<1m"    "%[%a %d]"
index-format-hook  date  "~d<1y"    "%[%b %d]"
index-format-hook  date  "~A"       "%[%m/%y]"
@end example

Another example, showing a way to prepend to the subject.  Note that
without a catch-all ~A pattern, no match results in the expando
being replaced with an empty string.

@example

set index_format="%4C %@@subj_flags@@%s"

index-format-hook  subj_flags  "~f boss@@example.com"    "** BOSS ** "
index-format-hook  subj_flags  "~f spouse@@example.com"  ":-) "
@end example

@node Adding Key Sequences to the Keyboard Buffer, Executing Functions, Dynamically Changing $index_format using Patterns, Configuration
@section Adding Key Sequences to the Keyboard Buffer

Usage:

@quotation

@t{push  
string
}
@end quotation

This command adds the named string to the beginning of the keyboard buffer. The string
may contain control characters, key names and function names like the
sequence string in the macro (@pxref{Keyboard Macros}) command. You
may use it to automatically run a sequence of commands at startup, or
when entering certain folders. For example, @ref{Embedding push in folder-hook} shows how to automatically collapse all
threads when entering a folder.

@noindent
@anchor{Embedding push in folder-hook}

@strong{Embedding push in folder-hook}

@example

folder-hook . 'push <collapse-all>'
@end example

For using functions like shown in the example, it's important to use
angle brackets (‘<’ and ‘>’) to make
Mutt recognize the input as a function name. Otherwise it will simulate
individual just keystrokes, i.e. ‘@samp{push
collapse-all}’ would be interpreted as if you had typed
‘c’, followed by ‘o’, followed by
‘l’, ..., which is not desired and may lead to very
unexpected behavior.

Keystrokes can be used, too, but are less portable because of
potentially changed key bindings. With default bindings, this is
equivalent to the above example:

@example

folder-hook . 'push \eV'
@end example

because it simulates that Esc+V was pressed (which is the default
binding of @samp{<collapse-all>}).

@node Executing Functions, Message Scoring, Adding Key Sequences to the Keyboard Buffer, Configuration
@section Executing Functions

Usage:

@quotation

@t{exec  
function
[
function
]…}
@end quotation

This command can be used to execute any function. Functions are listed
in the function reference (@pxref{Functions <1>}).
‘@code{exec} @samp{function}’ is
equivalent to ‘@samp{push <function>}’.

@node Message Scoring, Spam Detection, Executing Functions, Configuration
@section Message Scoring

Usage:

@quotation

@t{score  
pattern
value
unscore @{
*
| 
pattern
…@}}
@end quotation

The @code{score} commands adds @emph{value}
to a message's score if @emph{pattern} matches it.
@emph{pattern} is a string in the format described in
the patterns (@pxref{Patterns; Searching; Limiting and Tagging}) section (note: For
efficiency reasons, patterns which scan information not available in
the index, such as @samp{~b}, @samp{~B},
@samp{~h}, @samp{~M}, or @samp{~X}
may not be used).  @emph{value} is a positive or
negative integer.  A message's final score is the sum total of all
matching @code{score} entries.  However, you may
optionally prefix @emph{value} with an equal sign
(‘=’) to cause evaluation to stop at a particular entry
if there is a match.  Negative final scores are rounded up to 0.

The @code{unscore} command removes score entries from the
list.  You @emph{must} specify the same pattern specified
in the @code{score} command for it to be removed.  The
pattern ‘*’ is a special token which means to clear the
list of all score entries.

Scoring occurs as the messages are read in, before the mailbox is
sorted.  Because of this, patterns which depend on threading, such as
@emph{~=}, @emph{~$}, and
@emph{~()}, will not work by default.  A workaround is
to push the scoring command in a folder hook.  This will cause the
mailbox to be rescored after it is opened and input starts being
processed:

@example

folder-hook . 'push "<enter-command>score ~= 10<enter>"'
@end example

@node Spam Detection, Setting and Querying Variables, Message Scoring, Configuration
@section Spam Detection

Usage:

@quotation

@t{spam  
pattern
format
nospam @{
*
| 
pattern
@}}
@end quotation

Mutt has generalized support for external spam-scoring filters.  By
defining your spam patterns with the @code{spam} and
@samp{nospam} commands, you can @emph{limit},
@emph{search}, and @emph{sort} your mail
based on its spam attributes, as determined by the external filter. You
also can display the spam attributes in your index display using the
@samp{%H} selector in the $index_format (@pxref{index_format}) variable. (Tip: try
@samp{%?H?[%H] ?} to display spam tags only when they are
defined for a given message.)

Note: the value displayed by @samp{%H} and searched by
@samp{~H} is stored in the header
cache (@pxref{Local Caching}).  Mutt isn't smart enough to invalidate a header cache
entry based on changing @samp{spam} rules, so if you
aren't seeing correct @samp{%H} values, try temporarily
turning off the header cache.  If that fixes the problem, then once
your spam rules are set to your liking, remove your stale header cache
files and turn the header cache back on.

Your first step is to define your external filter's spam patterns using
the @code{spam} command. @emph{pattern} should
be a regular expression that matches a header in a mail message. If any
message in the mailbox matches this regular expression, it will receive
a ‘spam tag’ or ‘spam attribute’ (unless it
also matches a @code{nospam} pattern — see below.) The
appearance of this attribute is entirely up to you, and is governed by
the @emph{format} parameter. @emph{format}
can be any static text, but it also can include back-references from the
@emph{pattern} expression. (A regular expression
‘back-reference’ refers to a sub-expression contained
within parentheses.) @samp{%1} is replaced with the first
back-reference in the regex, @samp{%2} with the second, etc.

To match spam tags, mutt needs the corresponding header information
which is always the case for local and POP folders but not for IMAP in
the default configuration. Depending on the spam header to be analyzed,
$imap_headers (@pxref{imap_headers}) may need to be
adjusted.

If you're using multiple spam filters, a message can have more than one
spam-related header. You can define @code{spam} patterns for
each filter you use. If a message matches two or more of these patterns,
and the $spam_separator (@pxref{spam_separator}) variable
is set to a string, then the message's spam tag will consist of all the
@emph{format} strings joined together, with the value of
$spam_separator (@pxref{spam_separator}) separating them.

For example, suppose one uses DCC, SpamAssassin, and PureMessage, then
the configuration might look like in @ref{Configuring spam detection}.

@noindent
@anchor{Configuring spam detection}

@strong{Configuring spam detection}

@example

spam "X-DCC-.*-Metrics:.*(....)=many"         "90+/DCC-%1"
spam "X-Spam-Status: Yes"                     "90+/SA"
spam "X-PerlMX-Spam: .*Probability=([0-9]+)%" "%1/PM"
set spam_separator=", "
@end example

If then a message is received that DCC registered with
‘many’ hits under the ‘Fuz2’ checksum, and
that PureMessage registered with a 97% probability of being spam, that
message's spam tag would read @samp{90+/DCC-Fuz2,
97/PM}. (The four characters before ‘=many’ in a
DCC report indicate the checksum used — in this case,
‘Fuz2’.)

If the $spam_separator (@pxref{spam_separator}) variable is
unset, then each spam pattern match supersedes the previous one. Instead
of getting joined @emph{format} strings, you'll get only
the last one to match.

The spam tag is what will be displayed in the index when you use
@samp{%H} in the $index_format (@pxref{index_format}) variable. It's also the
string that the @samp{~H} pattern-matching expression
matches against for @samp{<search>} and
@samp{<limit>} functions. And it's what sorting by
spam attribute will use as a sort key.

That's a pretty complicated example, and most people's actual
environments will have only one spam filter. The simpler your
configuration, the more effective Mutt can be, especially when it comes
to sorting.

Generally, when you sort by spam tag, Mutt will sort
@emph{lexically} — that is, by ordering strings
alphanumerically. However, if a spam tag begins with a number, Mutt will
sort numerically first, and lexically only when two numbers are equal in
value. (This is like UNIX's @samp{sort -n}.) A message with
no spam attributes at all — that is, one that didn't match
@emph{any} of your @code{spam} patterns
— is sorted at lowest priority. Numbers are sorted next, beginning
with 0 and ranging upward. Finally, non-numeric strings are sorted, with
‘a’ taking lower priority than ‘z’. Clearly,
in general, sorting by spam tags is most effective when you can coerce
your filter to give you a raw number. But in case you can't, Mutt can
still do something useful.

The @code{nospam} command can be used to write exceptions to
@code{spam} patterns. If a header pattern matches something
in a @code{spam} command, but you nonetheless do not want it
to receive a spam tag, you can list a more precise pattern under a
@code{nospam} command.

If the @emph{pattern} given to @code{nospam}
is exactly the same as the @emph{pattern} on an existing
@code{spam} list entry, the effect will be to remove the
entry from the spam list, instead of adding an exception.  Likewise, if
the @emph{pattern} for a @code{spam} command
matches an entry on the @code{nospam} list, that nospam
entry will be removed. If the @emph{pattern} for
@code{nospam} is ‘*’, @emph{all entries on
both lists} will be removed. This might be the default action
if you use @code{spam} and @code{nospam} in
conjunction with a @code{folder-hook}.

You can have as many @code{spam} or
@code{nospam} commands as you like.  You can even do your
own primitive @code{spam} detection within Mutt — for
example, if you consider all mail from @samp{MAILER-DAEMON}
to be spam, you can use a @code{spam} command like this:

@example

spam "^From: .*MAILER-DAEMON"       "999"
@end example

@node Setting and Querying Variables, Reading Initialization Commands From Another File, Spam Detection, Configuration
@section Setting and Querying Variables

@menu
* Variable Types::
* Commands::
* User-Defined Variables::
* Type Conversions::
@end menu

@node Variable Types, Commands, , Setting and Querying Variables
@subsection Variable Types

Mutt supports these types of configuration variables:

@table @asis

@item boolean
A boolean expression, either ‘yes’ or ‘no’.

@item number
A signed integer number in the range -32768 to 32767.

@item number (long)
A signed integer number in the range -2147483648 to 2147483647.

@item string
Arbitrary text.

@item path
A specialized string for representing paths including support for
mailbox shortcuts (see @ref{Mailbox Shortcuts}) as well as tilde
(‘~’) for a user's home directory and more.

@item quadoption
Like a boolean but triggers a prompt when set to ‘ask-yes’
or ‘ask-no’ with ‘yes’ and ‘no’
preselected respectively.

@item sort order
A specialized string allowing only particular words as values depending
on the variable.

@item regular expression
A regular expression, see @ref{Regular Expressions} for an introduction.

@item folder magic
Specifies the type of folder to use: @emph{mbox},
@emph{mmdf}, @emph{mh} or
@emph{maildir}.  Currently only used to determine the type
for newly created folders.

@item e-mail address
An e-mail address either with or without realname. The older
‘@samp{user@@example.org (Joe User)}’ form is
supported but strongly deprecated.

@item user-defined
Arbitrary text, see @ref{User-Defined Variables} for details.
@end table

@node Commands, User-Defined Variables, Variable Types, Setting and Querying Variables
@subsection Commands

The following commands are available to manipulate and query variables:

Usage:

@quotation

@t{set @{
[no | inv]
variable
| 
variable=value
@} []… toggle  
variable
[
variable
]… unset  
variable
[
variable
]… reset  
variable
[
variable
]…}
@end quotation

This command is used to set (and unset) configuration variables (@pxref{Configuration Variables}).  There are four
basic types of variables: boolean, number, string and quadoption.
@emph{boolean} variables can be @emph{set}
(true) or @emph{unset} (false).
@emph{number} variables can be assigned a positive integer
value.  @emph{string} variables consist of any number of
printable characters and must be enclosed in quotes if they contain
spaces or tabs.  You may also use the escape sequences ‘\n’
and ‘\t’ for newline and tab, respectively.
@emph{quadoption} variables are used to control whether or
not to be prompted for certain actions, or to specify a default action.
A value of @emph{yes} will cause the action to be carried
out automatically as if you had answered yes to the question.
Similarly, a value of @emph{no} will cause the action to
be carried out as if you had answered ‘no.’ A value of
@emph{ask-yes} will cause a prompt with a default answer
of ‘yes’ and @emph{ask-no} will provide a
default answer of ‘no.’

Prefixing a variable with ‘no’ will unset it.  Example:
@samp{@code{set} noaskbcc}.

For @emph{boolean} variables, you may optionally prefix
the variable name with @samp{inv} to toggle the value (on or
off).  This is useful when writing macros.  Example:
@samp{@code{set} invsmart_wrap}.

The @code{toggle} command automatically prepends the
@samp{inv} prefix to all specified variables.

The @code{unset} command automatically prepends the
@samp{no} prefix to all specified variables.

Using the @samp{<enter-command>} function in the
@emph{index} menu, you can query the value of a variable
by prefixing the name of the variable with a question mark:

@example

set ?allow_8bit
@end example

The question mark is actually only required for boolean and quadoption
variables.

The @code{reset} command resets all given variables to the
compile time defaults (hopefully mentioned in this manual). If you use
the command @code{set} and prefix the variable with
‘&’ this has the same behavior as the
@code{reset} command.

With the @code{reset} command there exists the special
variable ‘all’, which allows you to reset all variables to
their system defaults.

@node User-Defined Variables, Type Conversions, Commands, Setting and Querying Variables
@subsection User-Defined Variables

@menu
* Introduction: Introduction <3>.
* Examples::
@end menu

@node Introduction <3>, Examples, , User-Defined Variables
@subsubsection Introduction

Along with the variables listed in the Configuration variables (@pxref{Configuration Variables}) section, Mutt
supports user-defined variables with names starting with
@samp{my_} as in, for example, @samp{my_cfgdir}.

The @code{set} command either creates a custom
@samp{my_} variable or changes its value if it does exist
already. The @code{unset} and @code{reset}
commands remove the variable entirely.

Since user-defined variables are expanded in the same way that
environment variables are (except for the shell-escape (@pxref{shell-escape}) command and backtick
expansion), this feature can be used to make configuration files more
readable.

@node Examples, , Introduction <3>, User-Defined Variables
@subsubsection Examples

The following example defines and uses the variable
@samp{my_cfgdir} to abbreviate the calls of the @code{source} (@pxref{Reading Initialization Commands From Another File}) command:

@noindent
@anchor{Using user-defined variables for config file readability}

@strong{Using user-defined variables for config file readability}

@example

set my_cfgdir = $HOME/mutt/config

source $my_cfgdir/hooks
source $my_cfgdir/macros
# more source commands...
@end example

A custom variable can also be used in macros to backup the current value
of another variable. In the following example, the value of the $delete (@pxref{delete}) is changed temporarily while its
original value is saved as @samp{my_delete}.  After the
macro has executed all commands, the original value of $delete (@pxref{delete}) is restored.

@noindent
@anchor{Using user-defined variables for backing up other config option values}

@strong{Using user-defined variables for backing up other config option values}

@example

macro pager ,x '\
<enter-command>set my_delete=$delete<enter>\
<enter-command>set delete=yes<enter>\
...\
<enter-command>set delete=$my_delete<enter>'
@end example

Since Mutt expands such values already when parsing the configuration
file(s), the value of @samp{$my_delete} in the
last example would be the value of $delete (@pxref{delete}) exactly
as it was at that point during parsing the configuration file. If
another statement would change the value for $delete (@pxref{delete})
later in the same or another file, it would have no effect on
@samp{$my_delete}. However, the expansion can
be deferred to runtime, as shown in the next example, when escaping the
dollar sign.

@noindent
@anchor{Deferring user-defined variable expansion to runtime}

@strong{Deferring user-defined variable expansion to runtime}

@example

macro pager <PageDown> "\
<enter-command> set my_old_pager_stop=\$pager_stop pager_stop<Enter>\
<next-page>\
<enter-command> set pager_stop=\$my_old_pager_stop<Enter>\
<enter-command> unset my_old_pager_stop<Enter>"
@end example

Note that there is a space between
@samp{<enter-command>} and the @code{set}
configuration command, preventing Mutt from recording the
@code{macro}'s commands into its history.

@node Type Conversions, , User-Defined Variables, Setting and Querying Variables
@subsection Type Conversions

Variables are always assigned string values which Mutt parses into its
internal representation according to the type of the variable, for
example an integer number for numeric types. For all queries (including
$-expansion) the value is converted from its internal type back into
string. As a result, any variable can be assigned any value given that
its content is valid for the target. This also counts for custom
variables which are of type string. In case of parsing errors, Mutt will
print error messages. @ref{Type conversions using variables} demonstrates type
conversions.

@noindent
@anchor{Type conversions using variables}

@strong{Type conversions using variables}

@example

set my_lines = "5"                # value is string "5"
set pager_index_lines = $my_lines # value is integer 5

set my_sort = "date-received"     # value is string "date-received"
set sort = "last-$my_sort"        # value is sort last-date-received

set my_inc = $read_inc            # value is string "10" (default of $read_inc)
set my_foo = $my_inc              # value is string "10"
@end example

These assignments are all valid. If, however, the value of
@samp{$my_lines} would have been
‘five’ (or something else that cannot be parsed into a
number), the assignment to
@samp{$pager_index_lines} would have
produced an error message.

Type conversion applies to all configuration commands which take
arguments. But please note that every expanded value of a variable is
considered just a single token. A working example is:

@example

set my_pattern = "~A"
set my_number = "10"

# same as: score ~A +10
score $my_pattern +$my_number
@end example

What does @emph{not} work is:

@example

set my_mx = "+mailbox1 +mailbox2"
mailboxes $my_mx +mailbox3
@end example

because the value of @samp{$my_mx} is interpreted as a
single mailbox named ‘+mailbox1 +mailbox2’ and not two
distinct mailboxes.

@node Reading Initialization Commands From Another File, Removing Hooks, Setting and Querying Variables, Configuration
@section Reading Initialization Commands From Another File

Usage:

@quotation

@t{source  
filename
}
@end quotation

This command allows the inclusion of initialization commands from other
files.  For example, I place all of my aliases in
@samp{~/.mail_aliases} so that I can make my
@samp{~/.muttrc} readable and keep my aliases private.

If the filename begins with a tilde (‘~’), it will be
expanded to the path of your home directory.

If the filename ends with a vertical bar (‘|’), then
@emph{filename} is considered to be an executable program
from which to read input (e.g.  @samp{@code{source}
~/bin/myscript|}).

@node Removing Hooks, Format Strings, Reading Initialization Commands From Another File, Configuration
@section Removing Hooks

Usage:

@quotation

@t{unhook @{
*
| 
hook-type
@}}
@end quotation

This command permits you to flush hooks you have previously defined.
You can either remove all hooks by giving the ‘*’ character
as an argument, or you can remove all hooks of a specific type by saying
something like @samp{@code{unhook} send-hook}.

@node Format Strings, Control allowed header fields in a mailto; URL, Removing Hooks, Configuration
@section Format Strings

@menu
* Basic usage::
* Conditionals::
* Filters::
* Padding::
* Bytes size display::
@end menu

@node Basic usage, Conditionals, , Format Strings
@subsection Basic usage

Format strings are a general concept you'll find in several locations
through the Mutt configuration, especially in the $index_format (@pxref{index_format}), $pager_format (@pxref{pager_format}), $status_format (@pxref{status_format}), and other related
variables. These can be very straightforward, and it's quite possible
you already know how to use them.

The most basic format string element is a percent symbol followed by
another character. For example, @samp{%s} represents a
message's Subject: header in the $index_format (@pxref{index_format}) variable. The
‘expandos’ available are documented with each format
variable, but there are general modifiers available with all formatting
expandos, too. Those are our concern here.

Some of the modifiers are borrowed right out of C (though you might know
them from Perl, Python, shell, or another language). These are the
@samp{[-]m.n} modifiers, as in
@samp{%-12.12s}. As with such programming languages, these
modifiers allow you to specify the minimum and maximum size of the
resulting string, as well as its justification. If the ‘-’
sign follows the percent, the string will be left-justified instead of
right-justified. If there's a number immediately following that, it's
the minimum amount of space the formatted string will occupy — if
it's naturally smaller than that, it will be padded out with spaces.  If
a decimal point and another number follow, that's the maximum space
allowable — the string will not be permitted to exceed that width,
no matter its natural size. Each of these three elements is optional, so
that all these are legal format strings: @samp{%-12s},
@samp{%4c}, @samp{%.15F} and
@samp{%-12.15L}.

Mutt adds some other modifiers to format strings. If you use an equals
symbol (@samp{=}) as a numeric prefix (like the minus
above), it will force the string to be centered within its minimum space
range. For example, @samp{%=14y} will reserve 14 characters
for the %y expansion — that's the X-Label: header, in $index_format (@pxref{index_format}). If the expansion results in
a string less than 14 characters, it will be centered in a 14-character
space.  If the X-Label for a message were ‘test’, that
expansion would look like
‘     test     ’.

There are two very little-known modifiers that affect the way that an
expando is replaced. If there is an underline (‘_’)
character between any format modifiers (as above) and the expando
letter, it will expands in all lower case. And if you use a colon
(‘:’), it will replace all decimal points with underlines.

@node Conditionals, Filters, Basic usage, Format Strings
@subsection Conditionals

Depending on the format string variable, some of its sequences can be
used to optionally print a string if their value is nonzero. For
example, you may only want to see the number of flagged messages if such
messages exist, since zero is not particularly meaningful. To optionally
print a string based upon one of the above sequences, the following
construct is used:

@example

%?<sequence_char>?<optional_string>?
@end example

where @emph{sequence_char} is an expando, and
@emph{optional_string} is the string you would like
printed if @emph{sequence_char} is nonzero.
@emph{optional_string} may contain other sequences as well
as normal text, but you may not nest optional strings.

Here is an example illustrating how to optionally print the number of
new messages in a mailbox in $status_format (@pxref{status_format}):

@example

%?n?%n new messages.?
@end example

You can also switch between two strings using the following construct:

@example

%?<sequence_char>?<if_string>&<else_string>?
@end example

If the value of @emph{sequence_char} is non-zero,
@emph{if_string} will be expanded, otherwise
@emph{else_string} will be expanded.

@node Filters, Padding, Conditionals, Format Strings
@subsection Filters

Any format string ending in a vertical bar (‘|’) will be
expanded and piped through the first word in the string, using spaces as
separator. The string returned will be used for display.  If the
returned string ends in %, it will be passed through the formatter a
second time. This allows the filter to generate a replacement format
string including % expandos.

All % expandos in a format string are expanded before the script is
called so that:

@noindent
@anchor{Using external filters in format strings}

@strong{Using external filters in format strings}

@example

set status_format="script.sh '%r %f (%L)'|"
@end example

will make Mutt expand @samp{%r}, @samp{%f} and
@samp{%L} before calling the script. The example also shows
that arguments can be quoted: the script will receive the expanded
string between the single quotes as the only argument.

A practical example is the @samp{mutt_xtitle} script
installed in the @samp{samples} subdirectory of the Mutt
documentation: it can be used as filter for $status_format (@pxref{status_format}) to set the current
terminal's title, if supported.

@node Padding, Bytes size display, Filters, Format Strings
@subsection Padding

In most format strings, Mutt supports different types of padding using
special %-expandos:

@table @asis

@item @samp{%|X}
When this occurs, Mutt will fill the rest of the line with the character
@samp{X}. For example, filling the rest of the line with
dashes is done by setting:

@example

set status_format = "%v on %h: %B: %?n?%n&no? new messages %|-"
@end example

@item  @samp{%>X} 
Since the previous expando stops at the end of line, there must be a way
to fill the gap between two items via the @samp{%>X}
expando: it puts as many characters @samp{X} in between two
items so that the rest of the line will be right-justified. For example,
to not put the version string and hostname the above example on the left
but on the right and fill the gap with spaces, one might use (note the
space after @samp{%>}):

@example

set status_format = "%B: %?n?%n&no? new messages %> (%v on %h)"
@end example

@item @samp{%*X} 
Normal right-justification will print everything to the left of the
@samp{%>}, displaying padding and whatever lies to the
right only if there's room. By contrast, ‘soft-fill’ gives
priority to the right-hand side, guaranteeing space to display it and
showing padding only if there's still room. If necessary, soft-fill will
eat text leftwards to make room for rightward text. For example, to
right-justify the subject making sure as much as possible of it fits on
screen, one might use (note two spaces after @samp{%* }: the
second ensures there's a space between the truncated right-hand side and
the subject):

@example

set index_format="%4C %Z %@{%b %d@} %-15.15L (%?l?%4l&%4c?)%*  %s"
@end example
@end table

@node Bytes size display, , Padding, Format Strings
@subsection Bytes size display

Various format strings contain expandos that display the size of
messages in bytes.  This includes
@samp{%s} in $attach_format (@pxref{attach_format}),
@samp{%l} in $compose_format (@pxref{compose_format}),
@samp{%s} in $folder_format (@pxref{folder_format}),
@samp{%c} in $index_format (@pxref{index_format}),
and %l and %L in $status_format (@pxref{status_format}).
There are four configuration variables that can be used to customize
how the numbers are displayed.

$size_show_bytes (@pxref{size_show_bytes})
will display the number of bytes when the size is < 1
kilobyte.  When unset, kilobytes will be displayed instead.

$size_show_mb (@pxref{size_show_mb}) will display the
number of megabytes when the size is >= 1 megabyte.  When
unset, kilobytes will be displayed instead (which could be a large
number).

$size_show_fractions (@pxref{size_show_fractions}),
will display numbers with a single decimal place for values from
0 to 10 kilobytes, and 1 to 10 megabytes.

$size_units_on_left (@pxref{size_units_on_left}) will
display the unit (‘K’ or ‘M’) to the left
of the number, instead of the right if unset.

These variables also affect size display in a few other places, such
as progress indicators and attachment delimiters in the pager.

@node Control allowed header fields in a mailto; URL, , Format Strings, Configuration
@section Control allowed header fields in a mailto: URL

Usage:

@quotation

@t{mailto_allow @{
*
| 
header-field
…@} unmailto_allow @{
*
| 
header-field
…@}}
@end quotation

As a security measure, Mutt will only add user-approved header fields from a
@samp{mailto:} URL.  This is necessary since Mutt will handle
certain header fields, such as @samp{Attach:}, in a special way.
The @samp{mailto_allow} and @samp{unmailto_allow}
commands allow the user to modify the list of approved headers.

Mutt initializes the default list to contain only the @samp{Subject}
and @samp{Body} header fields, which are the only requirement specified
by the @samp{mailto:} specification in RFC2368.

@node Advanced Usage, Mutt's MIME Support, Configuration, Top
@chapter Advanced Usage

@menu
* Character Set Handling::
* Regular Expressions::
* Patterns; Searching, Limiting and Tagging: Patterns; Searching; Limiting and Tagging.
* Marking Messages::
* Using Tags::
* Using Hooks::
* Managing the Environment::
* External Address Queries::
* Mailbox Formats::
* Mailbox Shortcuts::
* Handling Mailing Lists::
* Display Munging::
* New Mail Detection::
* Editing Threads::
* Delivery Status Notification (DSN) Support: Delivery Status Notification [DSN] Support.
* Start a WWW Browser on URLs::
* Echoing Text::
* Message Composition Flow::
* Using MuttLisp (EXPERIMENTAL): Using MuttLisp [EXPERIMENTAL].
* Miscellany::
@end menu

@node Character Set Handling, Regular Expressions, , Advanced Usage
@section Character Set Handling

A ‘character set’ is basically a mapping between bytes and
glyphs and implies a certain character encoding scheme. For example, for
the ISO 8859 family of character sets, an encoding of 8bit per character
is used. For the Unicode character set, different character encodings
may be used, UTF-8 being the most popular. In UTF-8, a character is
represented using a variable number of bytes ranging from 1 to 4.

Since Mutt is a command-line tool run from a shell, and delegates
certain tasks to external tools (such as an editor for composing/editing
messages), all of these tools need to agree on a character set and
encoding. There exists no way to reliably deduce the character set a
plain text file has. Interoperability is gained by the use of
well-defined environment variables. The full set can be printed by
issuing @samp{locale} on the command line.

Upon startup, Mutt determines the character set on its own using
routines that inspect locale-specific environment variables. Therefore,
it is generally not necessary to set the @samp{$charset}
variable in Mutt. It may even be counter-productive as Mutt uses system
and library functions that derive the character set themselves and on
which Mutt has no influence. It's safest to let Mutt work out the locale
setup itself.

If you happen to work with several character sets on a regular basis,
it's highly advisable to use Unicode and an UTF-8 locale. Unicode can
represent nearly all characters in a message at the same time.  When not
using a Unicode locale, it may happen that you receive messages with
characters not representable in your locale. When displaying such a
message, or replying to or forwarding it, information may get lost
possibly rendering the message unusable (not only for you but also for
the recipient, this breakage is not reversible as lost information
cannot be guessed).

A Unicode locale makes all conversions superfluous which eliminates the
risk of conversion errors. It also eliminates potentially wrong
expectations about the character set between Mutt and external programs.

The terminal emulator used also must be properly configured for the
current locale. Terminal emulators usually do @emph{not}
derive the locale from environment variables, they need to be configured
separately. If the terminal is incorrectly configured, Mutt may display
random and unexpected characters (question marks, octal codes, or just
random glyphs), format strings may not work as expected, you may not be
abled to enter non-ascii characters, and possible more.  Data is always
represented using bytes and so a correct setup is very important as to
the machine, all character sets ‘look’ the same.

Warning: A mismatch between what system and library functions think the
locale is and what Mutt was told what the locale is may make it behave
badly with non-ascii input: it will fail at seemingly random places.
This warning is to be taken seriously since not only local mail handling
may suffer: sent messages may carry wrong character set information the
@emph{receiver} has too deal with. The need to set
@samp{$charset} directly in most cases points at terminal
and environment variable setup problems, not Mutt problems.

A list of officially assigned and known character sets can be found at
@uref{http://www.iana.org/assignments/character-sets,IANA},
a list of locally supported locales can be obtained by running
@samp{locale -a}.

@node Regular Expressions, Patterns; Searching; Limiting and Tagging, Character Set Handling, Advanced Usage
@section Regular Expressions

All string patterns in Mutt including those in more complex patterns (@pxref{Patterns; Searching; Limiting and Tagging}) must be specified using regular
expressions (regexp) in the ‘POSIX extended’ syntax (which
is more or less the syntax used by egrep and GNU awk).  For your
convenience, we have included below a brief description of this syntax.

The search is case sensitive if the pattern contains at least one upper
case letter, and case insensitive otherwise.

@quotation

@strong{Note}

‘\’ must be quoted if used for a regular expression in an
initialization command: ‘\\’.
@end quotation

A regular expression is a pattern that describes a set of strings.
Regular expressions are constructed analogously to arithmetic
expressions, by using various operators to combine smaller expressions.

@quotation

@strong{Note}

The regular expression can be enclosed/delimited by either " or ' which
is useful if the regular expression includes a white-space character.
See @ref{Syntax of Initialization Files} for more information on " and '
delimiter processing.  To match a literal " or ' you must preface it
with \ (backslash).
@end quotation

The fundamental building blocks are the regular expressions that match a
single character.  Most characters, including all letters and digits,
are regular expressions that match themselves.  Any metacharacter with
special meaning may be quoted by preceding it with a backslash.

The period ‘.’ matches any single character.  The caret
‘^’ and the dollar sign ‘$’ are metacharacters
that respectively match the empty string at the beginning and end of a
line.

A list of characters enclosed by ‘[’ and ‘]’
matches any single character in that list; if the first character of the
list is a caret ‘^’ then it matches any character
@emph{not} in the list.  For example, the regular
expression @emph{[0123456789]} matches any single digit.
A range of ASCII characters may be specified by giving the first and
last characters, separated by a hyphen ‘-’.  Most
metacharacters lose their special meaning inside lists.  To include a
literal ‘]’ place it first in the list.  Similarly, to
include a literal ‘^’ place it anywhere but first.
Finally, to include a literal hyphen ‘-’ place it last.

Certain named classes of characters are predefined.  Character classes
consist of ‘[:’, a keyword denoting the class, and
‘:]’.  The following classes are defined by the POSIX
standard in
@ref{POSIX regular expression character classes}

@noindent
@anchor{POSIX regular expression character classes}

@strong{POSIX regular expression character classes}

@multitable @columnfractions 0.5 0.5
@item
Character class@tab Description
@item
[:alnum:]@tab Alphanumeric characters
@item
[:alpha:]@tab Alphabetic characters
@item
[:blank:]@tab Space or tab characters
@item
[:cntrl:]@tab Control characters
@item
[:digit:]@tab Numeric characters
@item
[:graph:]@tab Characters that are both printable and visible. (A space is printable, but not visible, while an ‘a’ is both)
@item
[:lower:]@tab Lower-case alphabetic characters
@item
[:print:]@tab Printable characters (characters that are not control characters)
@item
[:punct:]@tab Punctuation characters (characters that are not letter, digits, control characters, or space characters)
@item
[:space:]@tab Space characters (such as space, tab and formfeed, to name a few)
@item
[:upper:]@tab Upper-case alphabetic characters
@item
[:xdigit:]@tab Characters that are hexadecimal digits
@end multitable

A character class is only valid in a regular expression inside the
brackets of a character list.

@quotation

@strong{Note}

Note that the brackets in these class names are part of the symbolic
names, and must be included in addition to the brackets delimiting the
bracket list. For example, @emph{[[:digit:]]} is
equivalent to @emph{[0-9]}.
@end quotation

Two additional special sequences can appear in character lists.  These
apply to non-ASCII character sets, which can have single symbols (called
collating elements) that are represented with more than one character,
as well as several characters that are equivalent for collating or
sorting purposes:

@table @asis

@item Collating Symbols
A collating symbol is a multi-character collating element enclosed in
‘[.’ and ‘.]’.  For example, if
‘ch’ is a collating element, then
@emph{[[.ch.]]} is a regexp that matches this collating
element, while @emph{[ch]} is a regexp that matches either
‘c’ or ‘h’.

@item Equivalence Classes
An equivalence class is a locale-specific name for a list of characters
that are equivalent. The name is enclosed in ‘[=’ and
‘=]’.  For example, the name ‘e’ might be used
to represent all of ‘e’ with grave
(‘è’), ‘e’ with acute
(‘é’) and ‘e’.  In this case,
@emph{[[=e=]]} is a regexp that matches any of:
‘e’ with grave (‘è’), ‘e’
with acute (‘é’) and ‘e’.
@end table

A regular expression matching a single character may be followed by one
of several repetition operators described in @ref{Regular expression repetition operators}.

@noindent
@anchor{Regular expression repetition operators}

@strong{Regular expression repetition operators}

@multitable @columnfractions 0.5 0.5
@item
Operator@tab Description
@item
?@tab The preceding item is optional and matched at most once
@item
*@tab The preceding item will be matched zero or more times
@item
+@tab The preceding item will be matched one or more times
@item
@{n@}@tab The preceding item is matched exactly @emph{n} times
@item
@{n,@}@tab The preceding item is matched @emph{n} or more times
@item
@{,m@}@tab The preceding item is matched at most @emph{m} times
@item
@{n,m@}@tab The preceding item is matched at least @emph{n} times, but no more than @emph{m} times
@end multitable

Two regular expressions may be concatenated; the resulting regular
expression matches any string formed by concatenating two substrings
that respectively match the concatenated subexpressions.

Two regular expressions may be joined by the infix operator
‘|’; the resulting regular expression matches any string
matching either subexpression.

Repetition takes precedence over concatenation, which in turn takes
precedence over alternation.  A whole subexpression may be enclosed in
parentheses to override these precedence rules.

@quotation

@strong{Note}

If you compile Mutt with the included regular expression engine, the
following operators may also be used in regular expressions as described
in @ref{GNU regular expression extensions}.
@end quotation

@noindent
@anchor{GNU regular expression extensions}

@strong{GNU regular expression extensions}

@multitable @columnfractions 0.5 0.5
@item
Expression@tab Description
@item
\\y@tab Matches the empty string at either the beginning or the end of a word
@item
\\B@tab Matches the empty string within a word
@item
\\<@tab Matches the empty string at the beginning of a word
@item
\\>@tab Matches the empty string at the end of a word
@item
\\w@tab Matches any word-constituent character (letter, digit, or underscore)
@item
\\W@tab Matches any character that is not word-constituent
@item
\\`@tab Matches the empty string at the beginning of a buffer (string)
@item
\\'@tab Matches the empty string at the end of a buffer
@end multitable

Please note however that these operators are not defined by POSIX, so
they may or may not be available in stock libraries on various systems.

@node Patterns; Searching; Limiting and Tagging, Marking Messages, Regular Expressions, Advanced Usage
@section Patterns: Searching, Limiting and Tagging

@menu
* Pattern Modifier::
* Simple Searches::
* Nesting and Boolean Operators::
* Searching by Date::
@end menu

@node Pattern Modifier, Simple Searches, , Patterns; Searching; Limiting and Tagging
@subsection Pattern Modifier

Many of Mutt's commands allow you to specify a pattern to match
(@samp{limit}, @samp{tag-pattern},
@samp{delete-pattern}, etc.). @ref{Pattern modifiers}
shows several ways to select messages.

@noindent
@anchor{Pattern modifiers}

@strong{Pattern modifiers}

@multitable @columnfractions 0.5 0.5
@item
Pattern modifier@tab Description
@item
~A@tab all messages
@item
~b @emph{EXPR}@tab messages which contain @emph{EXPR} in the message body ***)
@item
=b @emph{STRING}@tab If IMAP is enabled, like ~b but searches for @emph{STRING} on the server, rather than downloading each message and searching it locally.
@item
~B @emph{EXPR}@tab messages which contain @emph{EXPR} in the whole message ***)
@item
=B @emph{STRING}@tab If IMAP is enabled, like ~B but searches for @emph{STRING} on the server, rather than downloading each message and searching it locally.
@item
~c @emph{EXPR}@tab messages carbon-copied to @emph{EXPR}
@item
%c @emph{GROUP}@tab messages carbon-copied to any member of @emph{GROUP}
@item
~C @emph{EXPR}@tab messages either to: or cc: @emph{EXPR}
@item
%C @emph{GROUP}@tab messages either to: or cc: to any member of @emph{GROUP}
@item
~d [@emph{MIN}]-[@emph{MAX}]@tab messages with ‘date-sent’ in a Date range
@item
~D@tab deleted messages
@item
~e @emph{EXPR}@tab messages which contains @emph{EXPR} in the ‘Sender’ field
@item
%e @emph{GROUP}@tab messages which contain a member of @emph{GROUP} in the ‘Sender’ field
@item
~E@tab expired messages
@item
~F@tab flagged messages
@item
~f @emph{EXPR}@tab messages originating from @emph{EXPR}
@item
%f @emph{GROUP}@tab messages originating from any member of @emph{GROUP}
@item
~g@tab cryptographically signed messages
@item
~G@tab cryptographically encrypted messages
@item
~h @emph{EXPR}@tab messages which contain @emph{EXPR} in the message header ***)
@item
=h @emph{STRING}@tab If IMAP is enabled, like ~h but searches for @emph{STRING} on the server, rather than downloading each message and searching it locally; @emph{STRING} must be of the form ‘header: substring’ (see below).
@item
~H @emph{EXPR}@tab messages with a spam attribute matching @emph{EXPR}
@item
~i @emph{EXPR}@tab messages which match @emph{EXPR} in the ‘Message-ID’ field
@item
~k@tab messages which contain PGP key material
@item
~L @emph{EXPR}@tab messages either originated or received by @emph{EXPR}
@item
%L @emph{GROUP}@tab message either originated or received by any member of @emph{GROUP}
@item
~l@tab messages addressed to a known mailing list
@item
~m [@emph{MIN}]-[@emph{MAX}]@tab messages in the range @emph{MIN} to @emph{MAX} *)
@item
~M @emph{EXPR}@tab messages which contain a mime Content-Type matching @emph{EXPR} ***)
@item
~n [@emph{MIN}]-[@emph{MAX}]@tab messages with a score in the range @emph{MIN} to @emph{MAX} *)
@item
~N@tab new messages
@item
~O@tab old messages
@item
~p@tab messages addressed to you (consults $from (@pxref{from}), @code{alternates}, and local account/hostname information)
@item
~P@tab messages from you (consults $from (@pxref{from}), @code{alternates}, and local account/hostname information)
@item
~Q@tab messages which have been replied to
@item
~r [@emph{MIN}]-[@emph{MAX}]@tab messages with ‘date-received’ in a Date range
@item
~R@tab read messages
@item
~s @emph{EXPR}@tab messages having @emph{EXPR} in the ‘Subject’ field.
@item
~S@tab superseded messages
@item
~t @emph{EXPR}@tab messages addressed to @emph{EXPR}
@item
~T@tab tagged messages
@item
~u@tab messages addressed to a subscribed mailing list
@item
~U@tab unread messages
@item
~v@tab messages part of a collapsed thread.
@item
~V@tab cryptographically verified messages
@item
~x @emph{EXPR}@tab messages which contain @emph{EXPR} in the ‘References’ or ‘In-Reply-To’ field
@item
~X [@emph{MIN}]-[@emph{MAX}]@tab messages with @emph{MIN} to @emph{MAX} attachments *) ***)
@item
~y @emph{EXPR}@tab messages which contain @emph{EXPR} in the ‘X-Label’ field
@item
~z [@emph{MIN}]-[@emph{MAX}]@tab messages with a size in the range @emph{MIN} to @emph{MAX} *) **)
@item
~=@tab duplicated messages (see $duplicate_threads (@pxref{duplicate_threads}))
@item
~$@tab unreferenced messages (requires threaded view)
@item
~(@emph{PATTERN})@tab messages in threads
containing messages matching @emph{PATTERN}, e.g. all
threads containing messages from you: ~(~P)
@item
~<(@emph{PATTERN})@tab messages
whose immediate parent matches @emph{PATTERN},
e.g. replies to your messages: ~<(~P)
@item
~>(@emph{PATTERN})@tab messages
having an immediate child matching @emph{PATTERN},
e.g. messages you replied to: ~>(~P)
@end multitable

Where @emph{EXPR} is a regular expression (@pxref{Regular Expressions}), and @emph{GROUP} is an
address group (@pxref{Address Groups}).

*) The forms ‘<[@emph{MAX}]’,
‘>[@emph{MIN}]’,
‘[@emph{MIN}]-’ and
‘-[@emph{MAX}]’ are allowed, too.

**) The suffixes ‘K’ and ‘M’ are allowed to
specify kilobyte and megabyte respectively.

***) These patterns read each message in, and can therefore be much
slower.  Over IMAP this will entail downloading each message.  They
can not be used for message
scoring (@pxref{Message Scoring}), and it is recommended to avoid using them for index
coloring.

Special attention has to be paid when using regular expressions inside
of patterns.  Specifically, Mutt's parser for these patterns will strip
one level of backslash (‘\’), which is normally used for
quoting.  If it is your intention to use a backslash in the regular
expression, you will need to use two backslashes instead
(‘\\’).

You can force Mutt to treat
@emph{EXPR} as a simple string instead of a regular
expression by using = instead of ~ in the pattern name. For example,
@samp{=b *.*} will find all messages that contain the
literal string ‘*.*’. Simple string matches are less
powerful than regular expressions but can be considerably faster.

For IMAP folders, string matches @samp{=b},
@samp{=B}, and @samp{=h} will be performed on
the server instead of by fetching every message. IMAP treats
@samp{=h} specially: it must be of the form ‘header:
substring’ and will not partially match header names. The
substring part may be omitted if you simply wish to find messages
containing a particular header without regard to its value.

Patterns matching lists of addresses (notably c, C, p, P and t) match if
there is at least one match in the whole list. If you want to make sure
that all elements of that list match, you need to prefix your pattern
with ‘^’.  This example matches all mails which only has
recipients from Germany.

@noindent
@anchor{Matching all addresses in address lists}

@strong{Matching all addresses in address lists}

@example

^~C \.de$
@end example

You can restrict address pattern matching to aliases that you have
defined with the "@@" modifier.  This example matches messages whose
recipients are all from Germany, and who are known to your alias list.

@noindent
@anchor{Matching restricted to aliases}

@strong{Matching restricted to aliases}

@example

^@@~C \.de$
@end example

To match any defined alias, use a regular expression that matches any
string.  This example matches messages whose senders are known aliases.

@noindent
@anchor{Matching any defined alias}

@strong{Matching any defined alias}

@example

@@~f .
@end example

@node Simple Searches, Nesting and Boolean Operators, Pattern Modifier, Patterns; Searching; Limiting and Tagging
@subsection Simple Searches

Mutt supports two versions of so called ‘simple
searches’. These are issued if the query entered for searching,
limiting and similar operations does not seem to contain a valid pattern
modifier (i.e. it does not contain one of these characters:
‘~’, ‘=’ or ‘%’). If the query is
supposed to contain one of these special characters, they must be
escaped by prepending a backslash (‘\’).

The first type is by checking whether the query string equals
a keyword case-insensitively from @ref{Simple search keywords}:
If that is the case, Mutt will use the shown pattern modifier instead.
If a keyword would conflict with your search keyword, you need to turn
it into a regular expression to avoid matching the keyword table. For
example, if you want to find all messages matching ‘flag’
(using $simple_search (@pxref{simple_search}))
but don't want to match flagged messages, simply search for
‘@samp{[f]lag}’.

@noindent
@anchor{Simple search keywords}

@strong{Simple search keywords}

@multitable @columnfractions 0.5 0.5
@item
Keyword@tab Pattern modifier
@item
all@tab ~A
@item
.@tab ~A
@item
^@tab ~A
@item
del@tab ~D
@item
flag@tab ~F
@item
new@tab ~N
@item
old@tab ~O
@item
repl@tab ~Q
@item
read@tab ~R
@item
tag@tab ~T
@item
unread@tab ~U
@end multitable

The second type of simple search is to build a complex search pattern
using $simple_search (@pxref{simple_search}) as a
template. Mutt will insert your query properly quoted and search for the
composed complex query.

@node Nesting and Boolean Operators, Searching by Date, Simple Searches, Patterns; Searching; Limiting and Tagging
@subsection Nesting and Boolean Operators

Logical AND is performed by specifying more than one criterion.  For
example:

@example

~t mutt ~f elkins
@end example

would select messages which contain the word ‘mutt’ in the
list of recipients @emph{and} that have the word
‘elkins’ in the ‘From’ header field.

Mutt also recognizes the following operators to create more complex
search patterns:

@itemize 

@item
! — logical NOT operator

@item
| — logical OR operator

@item
() — logical grouping operator
@end itemize

Here is an example illustrating a complex search pattern.  This pattern
will select all messages which do not contain ‘mutt’ in the
‘To’ or ‘Cc’ field and which are from
‘elkins’.

@noindent
@anchor{Using boolean operators in patterns}

@strong{Using boolean operators in patterns}

@example

!(~t mutt|~c mutt) ~f elkins
@end example

Here is an example using white space in the regular expression (note the
‘'’ and ‘"’ delimiters).  For this to match,
the mail's subject must match the ‘^Junk +From +Me$’ and it
must be from either ‘Jim +Somebody’ or ‘Ed
+SomeoneElse’:

@example

'~s "^Junk +From +Me$" ~f ("Jim +Somebody"|"Ed +SomeoneElse")'
@end example

@quotation

@strong{Note}

If a regular expression contains parenthesis, or a vertical bar ("|"),
you @emph{must} enclose the expression in double or single
quotes since those characters are also used to separate different parts
of Mutt's pattern language.  For example: @samp{~f
"me@@(mutt\.org|cs\.hmc\.edu)"} Without the quotes, the
parenthesis wouldn't end.  This would be separated to two OR'd patterns:
@emph{~f me@@(mutt\.org} and
@emph{cs\.hmc\.edu)}. They are never what you want.
@end quotation

@node Searching by Date, , Nesting and Boolean Operators, Patterns; Searching; Limiting and Tagging
@subsection Searching by Date

Mutt supports two types of dates, @emph{absolute} and
@emph{relative}.

@menu
* Absolute Dates::
* Relative Dates::
@end menu

@node Absolute Dates, Relative Dates, , Searching by Date
@subsubsection Absolute Dates

Dates @emph{must} be in DD/MM/YY format (month and year
are optional, defaulting to the current month and year) or YYYYMMDD.  An
example of a valid range of dates is:

@example

Limit to messages matching: ~d 20/1/95-31/10
Limit to messages matching: ~d 19950120-19951031
@end example

If you omit the minimum (first) date, and just specify
‘-DD/MM/YY’ or ‘-YYYYMMDD’, all messages
@emph{before} the given date will be selected.  If you omit the
maximum (second) date, and specify ‘DD/MM/YY-’, all messages
@emph{after} the given date will be selected.  If you
specify a single date with no dash (‘-’), only messages
sent on the given date will be selected.

You can add error margins to absolute dates.  An error margin is a sign
(+ or -), followed by a digit, followed by one of the units in @ref{Date units}. As a special case, you can replace the sign
by a ‘*’ character, which is equivalent to giving identical
plus and minus error margins.

@noindent
@anchor{Date units}

@strong{Date units}

@multitable @columnfractions 0.5 0.5
@item
Unit@tab Description
@item
y@tab Years
@item
m@tab Months
@item
w@tab Weeks
@item
d@tab Days
@end multitable

Example: To select any messages two weeks around January 15, 2001, you'd
use the following pattern:

@example

Limit to messages matching: ~d 15/1/2001*2w
@end example

@node Relative Dates, , Absolute Dates, Searching by Date
@subsubsection Relative Dates

This type of date is relative to the current date, and may be specified
as:

@itemize 

@item
>@emph{offset} for messages older than
@emph{offset} units

@item
<@emph{offset} for messages newer than
@emph{offset} units

@item
=@emph{offset} for messages exactly
@emph{offset} units old
@end itemize

@emph{offset} is specified as a positive number with one
of the units from @ref{Relative date units}.

@noindent
@anchor{Relative date units}

@strong{Relative date units}

@multitable @columnfractions 0.5 0.5
@item
Unit@tab Description
@item
y@tab Years
@item
m@tab Months
@item
w@tab Weeks
@item
d@tab Days
@item
H@tab Hours
@item
M@tab Minutes
@item
S@tab Seconds
@end multitable

Example: to select messages less than 1 month old, you would use

@example

Limit to messages matching: ~d <1m
@end example

@quotation

@strong{Note}

All dates used when searching are relative to the
@emph{local} time zone, so unless you change the setting
of your $index_format (@pxref{index_format}) to include a
@samp{%[...]} format, these are @emph{not} the
dates shown in the main index.
@end quotation

@node Marking Messages, Using Tags, Patterns; Searching; Limiting and Tagging, Advanced Usage
@section Marking Messages

There are times that it's useful to ask Mutt to "remember" which message
you're currently looking at, while you move elsewhere in your mailbox.
You can do this with the ‘mark-message’ operator, which
is bound to the ‘~’ key by default.  Press this key to
enter an identifier for the marked message. When you want to return to
this message, press ‘'’ and the name that you previously
entered.

(Message marking is really just a shortcut for defining a macro
that returns you to the current message by searching for its
Message-ID.  You can choose a different prefix by setting the $mark_macro_prefix (@pxref{mark_macro_prefix}) variable.)

@node Using Tags, Using Hooks, Marking Messages, Advanced Usage
@section Using Tags

Sometimes it is desirable to perform an operation on a group of messages
all at once rather than one at a time.  An example might be to save
messages to a mailing list to a separate folder, or to delete all
messages with a given subject.  To tag all messages matching a pattern,
use the @samp{<tag-pattern>} function, which is bound
to ‘shift-T’ by default.  Or you can select individual
messages by hand using the @samp{<tag-message>}
function, which is bound to ‘t’ by default.  See patterns (@pxref{Patterns; Searching; Limiting and Tagging}) for Mutt's pattern matching syntax.

Once you have tagged the desired messages, you can use the
‘tag-prefix’ operator, which is the ‘;’
(semicolon) key by default.  When the ‘tag-prefix’ operator
is used, the @emph{next} operation will be applied to all
tagged messages if that operation can be used in that manner.  If the
$auto_tag (@pxref{auto_tag}) variable is set, the next
operation applies to the tagged messages automatically, without
requiring the ‘tag-prefix’.

In @code{macro}s (@pxref{Keyboard Macros}) or @code{push} (@pxref{Adding Key Sequences to the Keyboard Buffer}) commands, you can use the
@samp{<tag-prefix-cond>} operator.  If there are no
tagged messages, Mutt will ‘eat’ the rest of the macro to
abort it's execution.  Mutt will stop ‘eating’ the macro
when it encounters the @samp{<end-cond>} operator;
after this operator the rest of the macro will be executed as normal.

@node Using Hooks, Managing the Environment, Using Tags, Advanced Usage
@section Using Hooks

A @emph{hook} is a concept found in many other programs
which allows you to execute arbitrary commands before performing some
operation.  For example, you may wish to tailor your configuration based
upon which mailbox you are reading, or to whom you are sending mail.  In
the Mutt world, a @emph{hook} consists of a regular expression (@pxref{Regular Expressions}) or pattern (@pxref{Patterns; Searching; Limiting and Tagging}) along with a configuration
option/command.  See:

@itemize 

@item
@code{account-hook} (@pxref{Managing Multiple Accounts})

@item
@code{charset-hook} (@pxref{Defining Aliases for Character Sets})

@item
@code{crypt-hook} (@pxref{Choosing the Cryptographic Key of the Recipient})

@item
@code{fcc-hook} (@pxref{Specify Default Fcc; Mailbox When Composing})

@item
@code{fcc-save-hook} (@pxref{Specify Default Save Filename and Default Fcc; Mailbox at Once})

@item
@code{folder-hook} (@pxref{Setting Variables Based Upon Mailbox})

@item
@code{iconv-hook} (@pxref{Defining Aliases for Character Sets})

@item
@code{index-format-hook} (@pxref{Dynamically Changing $index_format using Patterns})

@item
@code{mbox-hook} (@pxref{Using Multiple Spool Mailboxes})

@item
@code{message-hook} (@pxref{Change Settings Before Formatting a Message})

@item
@code{reply-hook} (@pxref{reply-hook})

@item
@code{save-hook} (@pxref{Specify Default Save Mailbox})

@item
@code{send-hook} (@pxref{Change Settings Based Upon Message Recipients})

@item
@code{send2-hook} (@pxref{send2-hook})
@end itemize

@noindent
for specific details on each type of @emph{hook} available.
Also see Message Composition Flow (@pxref{Message Composition Flow}) for
an overview of the composition process.

@quotation

@strong{Note}

If a hook changes configuration settings, these changes remain effective
until the end of the current Mutt session. As this is generally not
desired, a ‘default’ hook needs to be added before all
other hooks of that type to restore configuration defaults.
@end quotation

@noindent
@anchor{Specifying a default hook}

@strong{Specifying a default hook}

@example

send-hook . 'unmy_hdr From:'
send-hook ~C'^b@@b\.b$' my_hdr from: c@@c.c
@end example

In @ref{Specifying a default hook}, by default the value of $from (@pxref{from}) and $realname (@pxref{realname}) is not overridden. When sending
messages either To: or Cc: to @samp{<b@@b.b>}, the
From: header is changed to @samp{<c@@c.c>}.

@menu
* Message Matching in Hooks::
* Mailbox Matching in Hooks::
@end menu

@node Message Matching in Hooks, Mailbox Matching in Hooks, , Using Hooks
@subsection Message Matching in Hooks

Hooks that act upon messages (@code{message-hook},
@code{reply-hook}, @code{send-hook},
@code{send2-hook}, @code{save-hook},
@code{fcc-hook}, @code{index-format-hook})
are evaluated in a slightly different
manner. For the other types of hooks, a regular
expression (@pxref{Regular Expressions}) is sufficient.  But in dealing with messages a finer
grain of control is needed for matching since for different purposes you
want to match different criteria.

Mutt allows the use of the search
pattern (@pxref{Patterns; Searching; Limiting and Tagging}) language for matching messages in hook commands.  This
works in exactly the same way as it would when
@emph{limiting} or @emph{searching} the
mailbox, except that you are restricted to those operators which match
information Mutt extracts from the header of the message (i.e., from,
to, cc, date, subject, etc.).

For example, if you wanted to set your return address based upon sending
mail to a specific address, you could do something like:

@example

send-hook '~t ^me@@cs\.hmc\.edu$' 'my_hdr From: Mutt User <user@@host>'
@end example

which would execute the given command when sending mail to
@emph{me@@cs.hmc.edu}.

However, it is not required that you write the pattern to match using
the full searching language.  You can still specify a simple
@emph{regular expression} like the other hooks, in which
case Mutt will translate your pattern into the full language, using the
translation specified by the $default_hook (@pxref{default_hook}) variable.  The pattern is
translated at the time the hook is declared, so the value of $default_hook (@pxref{default_hook}) that is in effect at that
time will be used.

@node Mailbox Matching in Hooks, , Message Matching in Hooks, Using Hooks
@subsection Mailbox Matching in Hooks

Hooks that match against mailboxes (@code{folder-hook},
@code{mbox-hook}) apply both regular
expression (@pxref{Regular Expressions}) syntax as well as mailbox
shortcut (@pxref{Mailbox Shortcuts}) expansion on the regexp parameter.  There is some
overlap between these, so special attention should be paid to the first
character of the regexp.

@example

# Here, ^ will expand to "the current mailbox" not "beginning of string":
folder-hook ^/home/user/Mail/bar "set sort=threads"

# If you want ^ to be interpreted as "beginning of string", one workaround
# is to enclose the regexp in parenthesis:
folder-hook (^/home/user/Mail/bar) "set sort=threads"

# This will expand to the default save folder for the alias "imap.example.com", which
# is probably not what you want:
folder-hook @@imap.example.com "set sort=threads"

# A workaround is to use parenthesis or a backslash:
folder-hook (@@imap.example.com) "set sort=threads"
folder-hook '\@@imap.example.com' "set sort=threads"
@end example

Keep in mind that mailbox shortcut expansion on the regexp parameter
takes place when the hook is initially parsed, not when the hook is
matching against a mailbox.  When Mutt starts up and is reading the
.muttrc, some mailbox shortcuts may not be usable.  For example, the
"current mailbox" shortcut, ^, will expand to an empty string because no
mailbox has been opened yet.  Mutt will issue an error for this case or
if the mailbox shortcut results in an empty regexp.

@node Managing the Environment, External Address Queries, Using Hooks, Advanced Usage
@section Managing the Environment

You can alter the environment that Mutt passes on to its child processes
using the ‘setenv’ and ‘unsetenv’ operators.
(N.B. These follow Mutt-style syntax, not shell-style!)  You can also
query current environment values by prefixing a ‘?’ character.

@example

setenv TERM vt100
setenv ORGANIZATION "The Mutt Development Team"
unsetenv DISPLAY
setenv ?LESS
@end example

@node External Address Queries, Mailbox Formats, Managing the Environment, Advanced Usage
@section External Address Queries

Mutt supports connecting to external directory databases such as LDAP,
ph/qi, bbdb, or NIS through a wrapper script which connects to Mutt
using a simple interface.  Using the $query_command (@pxref{query_command}) variable, you specify the
wrapper command to use.  For example:

@example

set query_command = "mutt_ldap_query.pl %s"
@end example

The wrapper script should accept the query on the command-line.  It
should return a one line message, then each matching response on a
single line, each line containing a tab separated address then name then
some other optional information.  On error, or if there are no matching
addresses, return a non-zero exit code and a one line error message.

An example multiple response output:

@example

Searching database ... 20 entries ... 3 matching:
me@@cs.hmc.edu           Michael Elkins  mutt dude
blong@@fiction.net       Brandon Long    mutt and more
roessler@@does-not-exist.org        Thomas Roessler mutt pgp
@end example

There are two mechanisms for accessing the query function of Mutt.  One
is to do a query from the index menu using the
@samp{<query>} function (default: Q).  This will
prompt for a query, then bring up the query menu which will list the
matching responses.  From the query menu, you can select addresses to
create aliases, or to mail.  You can tag multiple addresses to mail,
start a new query, or have a new query appended to the current
responses.

The other mechanism for accessing the query function is for address
completion, similar to the alias completion.  In any prompt for address
entry, you can use the @samp{<complete-query>}
function (default: ^T) to run a query based on the current address you
have typed.  Like aliases, Mutt will look for what you have typed back
to the last space or comma.  If there is a single response for that
query, Mutt will expand the address in place.  If there are multiple
responses, Mutt will activate the query menu.  At the query menu, you
can select one or more addresses to be added to the prompt.

@node Mailbox Formats, Mailbox Shortcuts, External Address Queries, Advanced Usage
@section Mailbox Formats

Mutt supports reading and writing of four different local mailbox
formats: mbox, MMDF, MH and Maildir.  The mailbox type is auto detected,
so there is no need to use a flag for different mailbox types.  When
creating new mailboxes, Mutt uses the default specified with the $mbox_type (@pxref{mbox_type}) variable. A short description of
the formats follows.

@emph{mbox}.  This is a widely used mailbox format for
UNIX.  All messages are stored in a single file.  Each message has a
line of the form:

@example

From me@@cs.hmc.edu Fri, 11 Apr 1997 11:44:56 PST
@end example

to denote the start of a new message (this is often referred to as the
‘From_’ line). The mbox format requires mailbox locking, is
prone to mailbox corruption with concurrently writing clients or
misinterpreted From_ lines. Depending on the environment, new mail
detection can be unreliable. Mbox folders are fast to open and easy to
archive.

@emph{MMDF}.  This is a variant of the
@emph{mbox} format.  Each message is surrounded by lines
containing ‘^A^A^A^A’ (four times control-A's). The same
problems as for mbox apply (also with finding the right message
separator as four control-A's may appear in message bodies).

@emph{MH}. A radical departure from
@emph{mbox} and @emph{MMDF}, a mailbox
consists of a directory and each message is stored in a separate file.
The filename indicates the message number (however, this is may not
correspond to the message number Mutt displays). Deleted messages are
renamed with a comma (‘,’) prepended to the filename. Mutt
detects this type of mailbox by looking for either
@samp{.mh_sequences} or @samp{.xmhcache} files
(needed to distinguish normal directories from MH mailboxes). MH is more
robust with concurrent clients writing the mailbox, but still may suffer
from lost flags; message corruption is less likely to occur than with
mbox/mmdf. It's usually slower to open compared to mbox/mmdf since many
small files have to be read (Mutt provides @ref{Header Caching} to greatly speed this process up).  Depending
on the environment, MH is not very disk-space efficient.

@emph{Maildir}.  The newest of the mailbox formats, used
by the Qmail MTA (a replacement for sendmail).  Similar to
@emph{MH}, except that it adds three subdirectories of the
mailbox: @emph{tmp}, @emph{new} and
@emph{cur}.  Filenames for the messages are chosen in such
a way they are unique, even when two programs are writing the mailbox
over NFS, which means that no file locking is needed and corruption is
very unlikely. Maildir maybe slower to open without caching in Mutt, it
too is not very disk-space efficient depending on the environment. Since
no additional files are used for metadata (which is embedded in the
message filenames) and Maildir is locking-free, it's easy to sync across
different machines using file-level synchronization tools.

@node Mailbox Shortcuts, Handling Mailing Lists, Mailbox Formats, Advanced Usage
@section Mailbox Shortcuts

There are a number of built in shortcuts which refer to specific
mailboxes.  These shortcuts can be used anywhere you are prompted for a
file or mailbox path or in path-related configuration variables. Note
that these only work at the beginning of a string.

@noindent
@anchor{Mailbox shortcuts}

@strong{Mailbox shortcuts}

@multitable @columnfractions 0.5 0.5
@item
Shortcut@tab Refers to...
@item
@samp{!}@tab your $spoolfile (@pxref{spoolfile}) (incoming) mailbox
@item
@samp{>}@tab your $mbox (@pxref{mbox}) file
@item
@samp{<}@tab your $record (@pxref{record}) file
@item
@samp{^}@tab the current mailbox
@item
@samp{-} or @samp{!!}@tab the file you've last visited
@item
@samp{~}@tab your home directory
@item
@samp{=} or @samp{+}@tab your $folder (@pxref{folder}) directory
@item
@emph{@@alias}@tab to the default save folder (@pxref{Specify Default Save Mailbox}) as determined by the address of the alias
@end multitable

For example, to store a copy of outgoing messages in the folder they
were composed in, a @code{folder-hook} (@pxref{Setting Variables Based Upon Mailbox}) can be used
to set $record (@pxref{record}):

@example

  folder-hook . 'set record=^'
@end example

Note: the $record (@pxref{record}) shortcut
‘@samp{<}’ is substituted without any
regard to multiple mailboxes and $fcc_delimiter (@pxref{fcc_delimiter}).  If you use multiple
Fcc mailboxes, and also want to use the
‘@samp{<}’ mailbox shortcut, it might be
better to set $record (@pxref{record}) to the primary
mailbox and use a fcc-hook (@pxref{Specify Default Fcc; Mailbox When Composing}) to set all
mailboxes during message composition.

@node Handling Mailing Lists, Display Munging, Mailbox Shortcuts, Advanced Usage
@section Handling Mailing Lists

Mutt has a few configuration options that make dealing with large
amounts of mail easier.  The first thing you must do is to let Mutt know
what addresses you consider to be mailing lists (technically this does
not have to be a mailing list, but that is what it is most often used
for), and what lists you are subscribed to.  This is accomplished
through the use of the @code{lists}
and @code{subscribe} (@pxref{Mailing Lists <1>}) commands in your
@samp{.muttrc}.  Alternatively or additionally, you can set
$auto_subscribe (@pxref{auto_subscribe}) to automatically
subscribe addresses found in a @samp{List-Post} header.

Now that Mutt knows what your mailing lists are, it can do several
things, the first of which is the ability to show the name of a list
through which you received a message (i.e., of a subscribed list) in the
@emph{index} menu display.  This is useful to distinguish
between personal and list mail in the same mailbox.  In the $index_format (@pxref{index_format}) variable, the expando
‘%L’ will print the string ‘To <list>’
when ‘list’ appears in the ‘To’ field, and
‘Cc <list>’ when it appears in the ‘Cc’
field (otherwise it prints the name of the author).

Often times the ‘To’ and ‘Cc’ fields in
mailing list messages tend to get quite large. Most people do not bother
to remove the author of the message they reply to from the list,
resulting in two or more copies being sent to that person.  The
@samp{<list-reply>} function, which by default is
bound to ‘L’ in the @emph{index} menu and
@emph{pager}, helps reduce the clutter by only replying to
the known mailing list addresses instead of all recipients (except as
specified by @samp{Mail-Followup-To}, see below).

Mutt also supports the @samp{Mail-Followup-To} header.  When
you send a message to a list of recipients which includes one or several
known mailing lists, and if the $followup_to (@pxref{followup_to}) option is set, Mutt will
generate a Mail-Followup-To header.  If any of the recipients are
subscribed mailing lists, this header will contain all the recipients
to whom you send this message, but not your address. This indicates that
group-replies or list-replies (also known as ‘followups’)
to this message should only be sent to the original recipients of the
message, and not separately to you - you'll receive your copy through
one of the mailing lists you are subscribed to.  If none of the
recipients are subscribed mailing lists, the header will also contain
your address, ensuring you receive a copy of replies.

Conversely, when group-replying or list-replying to a message which has
a @samp{Mail-Followup-To} header, Mutt will respect this
header if the $honor_followup_to (@pxref{honor_followup_to}) configuration
variable is set.  Using list-reply (@pxref{list-reply})
will in this case also make sure that the reply goes to the mailing
list, even if it's not specified in the list of recipients in the
@samp{Mail-Followup-To}.

@quotation

@strong{Note}

When header editing is enabled, you can create a
@samp{Mail-Followup-To} header manually.  Mutt will only
auto-generate this header if it doesn't exist when you send the message.
@end quotation

The other method some mailing list admins use is to generate a
‘Reply-To’ field which points back to the mailing list
address rather than the author of the message.  This can create problems
when trying to reply directly to the author in private, since most mail
clients will automatically reply to the address given in the
‘Reply-To’ field.  Mutt uses the $reply_to (@pxref{reply_to}) variable to help decide which
address to use.  If set to @emph{ask-yes} or
@emph{ask-no}, you will be prompted as to whether or not
you would like to use the address given in the ‘Reply-To’
field, or reply directly to the address given in the ‘From’
field.  When set to @emph{yes}, the
‘Reply-To’ field will be used when present.

The ‘X-Label:’ header field can be used to further identify
mailing lists or list subject matter (or just to annotate messages
individually).  The $index_format (@pxref{index_format})
variable's ‘%y’ and ‘%Y’ expandos can be used
to expand ‘X-Label:’ fields in the index, and Mutt's
pattern-matcher can match regular expressions to ‘X-Label:’
fields with the ‘~y’ selector.  ‘X-Label:’ is
not a standard message header field, but it can easily be inserted by
procmail and other mail filtering agents.

You can change or delete the ‘X-Label:’ field within
Mutt using the ‘edit-label’ command, bound to the
‘y’ key by default.  This works for tagged messages, too.
While in the edit-label function, pressing the <complete>
binding (TAB, by default) will perform completion against all labels
currently in use.

Lastly, Mutt has the ability to sort (@pxref{sort}) the
mailbox into threads (@pxref{Threaded Mode}).  A thread is a
group of messages which all relate to the same subject.  This is usually
organized into a tree-like structure where a message and all of its
replies are represented graphically.  If you've ever used a threaded
news client, this is the same concept.  It makes dealing with large
volume mailing lists easier because you can easily delete uninteresting
threads and quickly find topics of value.

@node Display Munging, New Mail Detection, Handling Mailing Lists, Advanced Usage
@section Display Munging

Working within the confines of a console or terminal window, it is
often useful to be able to modify certain information elements in a
non-destructive way -- to change how they display, without changing
the stored value of the information itself.  This is especially so of
message subjects, which may often be polluted with extraneous metadata
that either is reproduced elsewhere, or is of secondary interest.

@quotation

@t{subjectrx  
pattern
replacement
unsubjectrx @{
*
| 
pattern
@}}
@end quotation

@samp{subjectrx} specifies a regular expression
‘pattern’ which, if detected in a message subject, causes
the subject to be replaced with the ‘replacement’ value.
The replacement is subject to substitutions in the same way as for the
spam (@pxref{Spam Detection}) command: @samp{%L} for the text
to the left of the match, @samp{%R} for text to the right of the
match, and @samp{%1} for the first subgroup in the match (etc).
If you simply want to erase the match, set it to ‘%L%R’.
Any number of @samp{subjectrx} commands may coexist.

Note this well: the ‘replacement’ value replaces the
entire subject, not just the match!

@samp{unsubjectrx} removes a given subjectrx from the
substitution list.  If @samp{*} is used as the pattern,
all substitutions will be removed.

@noindent
@anchor{Subject Munging}

@strong{Subject Munging}

@example

# Erase [rt #12345] tags from Request Tracker (RT) e-mails
subjectrx '\[rt #[0-9]+\] *' '%L%R'

# Servicedesk is another RT that sends more complex subjects.
# Keep the ticket number.
subjectrx '\[servicedesk #([0-9]+)\] ([^.]+)\.([^.]+) - (new|open|pending|update) - ' '%L[#%1] %R'

# Strip out annoying [listname] prefixes in subjects
subjectrx '\[[^]]*\]:? *' '%L%R'
@end example

@node New Mail Detection, Editing Threads, Display Munging, Advanced Usage
@section New Mail Detection

Mutt supports setups with multiple folders, allowing all of them to be
monitored for new mail (see @ref{Monitoring Incoming Mail} for details).

@menu
* How New Mail Detection Works::
* Polling For New Mail::
* Monitoring New Mail::
* Calculating Mailbox Message Counts::
@end menu

@node How New Mail Detection Works, Polling For New Mail, , New Mail Detection
@subsection How New Mail Detection Works

For Mbox and Mmdf folders, new mail is detected by comparing access
and/or modification times of files: Mutt assumes a folder has new mail
if it wasn't accessed after it was last modified. Utilities like
@samp{biff} or @samp{frm} or any other program
which accesses the mailbox might cause Mutt to never detect new mail for
that mailbox if they do not properly reset the access time. Other
possible causes of Mutt not detecting new mail in these folders are
backup tools (updating access times) or filesystems mounted without
access time update support (for Linux systems, see the
@samp{relatime} option).

@quotation

@strong{Note}

Contrary to older Mutt releases, it now maintains the new mail status of
a folder by properly resetting the access time if the folder contains at
least one message which is neither read, nor deleted, nor marked as old.
@end quotation

In cases where new mail detection for Mbox or Mmdf folders appears to be
unreliable, the $check_mbox_size (@pxref{check_mbox_size})
option can be used to make Mutt track and consult file sizes for new
mail detection instead which won't work for size-neutral changes.

New mail for Maildir is assumed if there is one message in the
@samp{new/} subdirectory which is not marked deleted (see
$maildir_trash (@pxref{maildir_trash})). For MH folders, a
mailbox is considered having new mail if there's at least one message in
the ‘unseen’ sequence as specified by $mh_seq_unseen (@pxref{mh_seq_unseen}).

Mutt does not poll POP3 folders for new mail, it only periodically
checks the currently opened folder (if it's a POP3 folder).

For IMAP, by default Mutt uses recent message counts provided by the
server to detect new mail. If the $imap_idle (@pxref{imap_idle}) option is set, it'll use the IMAP
IDLE extension if advertised by the server.

The $mail_check_recent (@pxref{mail_check_recent})
option changes whether Mutt will notify you of new mail in an
already visited mailbox.  When set (the default) it will only notify
you of new mail received since the last time you opened the mailbox.
When unset, Mutt will notify you of any new mail in the mailbox.

@node Polling For New Mail, Monitoring New Mail, How New Mail Detection Works, New Mail Detection
@subsection Polling For New Mail

When in the index menu and being idle (also see $timeout (@pxref{timeout})), Mutt periodically checks for new
mail in all folders which have been configured via the
@code{mailboxes} command (excepting those specified with
the @samp{-nopoll} flag).  The interval depends on the
folder type: for local/IMAP folders it consults $mail_check (@pxref{mail_check}) and $pop_checkinterval (@pxref{pop_checkinterval}) for POP folders.

Outside the index menu the directory browser supports checking for new
mail using the @samp{<check-new>} function which is
unbound by default. Pressing TAB will bring up a menu showing the files
specified by the @code{mailboxes} command, and indicate
which contain new messages. Mutt will automatically enter this mode when
invoked from the command line with the @samp{-y} option.

For the pager, index and directory browser menus, Mutt contains the
@samp{<buffy-list>} function (bound to
‘.’ by default) which will print a list of folders with new
mail in the command line at the bottom of the screen.

For the index, by default Mutt displays the number of mailboxes with new
mail in the status bar, please refer to the $status_format (@pxref{status_format}) variable for details.

When changing folders, Mutt fills the prompt with the first folder from
the mailboxes list containing new mail (if any), pressing
@samp{<Space>} will cycle through folders with new
mail.  The (by default unbound) function
@samp{<next-unread-mailbox>} in the index can be used
to immediately open the next folder with unread mail (if any).

@node Monitoring New Mail, Calculating Mailbox Message Counts, Polling For New Mail, New Mail Detection
@subsection Monitoring New Mail

When the @emph{Inotify} mechanism for monitoring of
files is supported (Linux only) and not disabled at compilation time,
Mutt immediately notifies about new mail for all folders configured
via the @code{mailboxes} (@pxref{Monitoring Incoming Mail})
command (excepting those specified with the @samp{-nopoll}
flag).  Dependent on mailbox
format (@pxref{Mailbox Formats}) also added @emph{old} mails are tracked
(not for Maildir).

No configuration variables are available.  Trace output is given when
debugging is enabled via command
line option (@pxref{Command line options}) @samp{-d3}.  The lower level 2 only shows
errors, the higher level 5 all including raw Inotify events.

@quotation

@strong{Note}

Getting events about new mail is limited to the capabilities of the
underlying mechanism.  @emph{Inotify} only reports local
changes, i. e. new mail notification works for mails delivered by an
agent on the same machine as Mutt, but not when delivered remotely on
a network file system as NFS.  Also the monitoring handles might fail
in rare conditions, so you better don't completely rely on this
feature.
@end quotation

@node Calculating Mailbox Message Counts, , Monitoring New Mail, New Mail Detection
@subsection Calculating Mailbox Message Counts

If $mail_check_stats (@pxref{mail_check_stats}) is set,
Mutt will periodically calculate the unread, flagged, and total
message counts for each mailbox watched by the
@code{mailboxes} command.  This calculation takes place at
the same time as new mail polling, but is controlled by a separate
timer: $mail_check_stats_interval (@pxref{mail_check_stats_interval}).

The sidebar can display these message counts.  See $sidebar_format (@pxref{sidebar_format}).

@node Editing Threads, Delivery Status Notification [DSN] Support, New Mail Detection, Advanced Usage
@section Editing Threads

Mutt has the ability to dynamically restructure threads that are broken
either by misconfigured software or bad behavior from some
correspondents. This allows to clean your mailboxes from these
annoyances which make it hard to follow a discussion.

@menu
* Linking Threads::
* Breaking Threads::
@end menu

@node Linking Threads, Breaking Threads, , Editing Threads
@subsection Linking Threads

Some mailers tend to ‘forget’ to correctly set the
‘In-Reply-To:’ and ‘References:’ headers when
replying to a message. This results in broken discussions because Mutt
has not enough information to guess the correct threading.  You can fix
this by tagging the reply, then moving to the parent message and using
the @samp{<link-threads>} function (bound to & by
default). The reply will then be connected to this parent message.

You can also connect multiple children at once, tagging them and using
the @samp{<tag-prefix>} command (‘;’) or
the $auto_tag (@pxref{auto_tag}) option.

@node Breaking Threads, , Linking Threads, Editing Threads
@subsection Breaking Threads

On mailing lists, some people are in the bad habit of starting a new
discussion by hitting ‘reply’ to any message from the list
and changing the subject to a totally unrelated one.  You can fix such
threads by using the @samp{<break-thread>} function
(bound by default to #), which will turn the subthread starting from the
current message into a whole different thread.

@node Delivery Status Notification [DSN] Support, Start a WWW Browser on URLs, Editing Threads, Advanced Usage
@section Delivery Status Notification (DSN) Support

RFC1894 defines a set of MIME content types for relaying information
about the status of electronic mail messages.  These can be thought of
as ‘return receipts.’

To support DSN, there are two variables. $dsn_notify (@pxref{dsn_notify}) is used to request receipts for
different results (such as failed message, message delivered, etc.).
$dsn_return (@pxref{dsn_return}) requests how much of your
message should be returned with the receipt (headers or full message).

When using $sendmail (@pxref{sendmail}) for mail delivery,
you need to use either Berkeley sendmail 8.8.x (or greater) a MTA
supporting DSN command line options compatible to Sendmail: The -N and
-R options can be used by the mail client to make requests as to what
type of status messages should be returned. Please consider your MTA
documentation whether DSN is supported.

For SMTP delivery using $smtp_url (@pxref{smtp_url}), it
depends on the capabilities announced by the server whether Mutt will
attempt to request DSN or not.

@node Start a WWW Browser on URLs, Echoing Text, Delivery Status Notification [DSN] Support, Advanced Usage
@section Start a WWW Browser on URLs

If a message contains URLs, it is efficient to get a menu with all the
URLs and start a WWW browser on one of them.  This functionality is
provided by the external urlview program which can be retrieved at
@uref{https://github.com/sigpipe/urlview,https://github.com/sigpipe/urlview}
and the configuration commands:

@example

macro index \cb |urlview\n
macro pager \cb |urlview\n
@end example

@node Echoing Text, Message Composition Flow, Start a WWW Browser on URLs, Advanced Usage
@section Echoing Text

Usage:

@quotation

@t{echo  
message
}
@end quotation

You can print messages to the message window using the "echo" command.
This might be useful after a macro finishes executing.  After printing
the message, echo will pause for the number of seconds specified by
$sleep_time (@pxref{sleep_time}).

@example

echo "Sourcing muttrc file"

unset confirmappend
macro index ,a "<save-message>=archive<enter><enter-command>echo 'Saved to archive'<enter>"
@end example

@node Message Composition Flow, Using MuttLisp [EXPERIMENTAL], Echoing Text, Advanced Usage
@section Message Composition Flow

This is a brief overview of the steps Mutt takes during message
composition.  It also shows the order and timing of hook execution.

@itemize 

@item
Reply envelope settings.  $reverse_name (@pxref{reverse_name}) processing.  To,
Cc, Subject, References header defaults.

@item
my_hdr (@pxref{User-Defined Headers}) processing for To, Cc,
Bcc, Subject headers.

@item
Prompts for To, Cc, Bcc, Subject headers.
See $askcc (@pxref{askcc}),
$askbcc (@pxref{askbcc}),
$fast_reply (@pxref{fast_reply}).

@item
From header setting.  Note: this is so send-hook (@pxref{Change Settings Based Upon Message Recipients})s below can match ~P, but
From is re-set further below in case a send-hook changes the
value.

@item
reply-hook (@pxref{reply-hook})

@item
send-hook (@pxref{Change Settings Based Upon Message Recipients})

@item
From header setting.

@item
my_hdr (@pxref{User-Defined Headers}) processing for From,
Reply-To, Message-ID and user-defined headers.  The To, Cc,
Bcc, Subject, and Return-Path headers are ignored at this
stage.

@item
Message body and signature generation.

@item
send2-hook (@pxref{send2-hook})

@item
$realname (@pxref{realname}) part of From header setting.

@item
$editor (@pxref{editor}) invocation for the
message.

@item
send2-hook (@pxref{send2-hook})

@item
Cryptographic settings.

@item
fcc-hook (@pxref{Specify Default Fcc; Mailbox When Composing}).  Fcc setting.

@item
Compose menu (@pxref{The Compose Menu}).  Note: send2-hook (@pxref{send2-hook}) is evaluated each time
the headers are changed.

@item
Message encryption and signing.  Key selection.

@item
Fcc saving if $fcc_before_send (@pxref{fcc_before_send}) is set.  (Note the
variable documentation for caveats of Fcc'ing before sending.)

@item
Message sending.

@item
Fcc saving if $fcc_before_send (@pxref{fcc_before_send}) is unset
(the default).  Note: prior to version 1.12, the Fcc was saved
before sending the message.  It is now by default saved
afterwards, but if the saving fails, the user is prompted.
@end itemize

@node Using MuttLisp [EXPERIMENTAL], Miscellany, Message Composition Flow, Advanced Usage
@section Using MuttLisp (EXPERIMENTAL)

MuttLisp is a Lisp-like enhancement for the Mutt configuration
file.  It is currently experimental, meaning new releases may
change or break syntax.  MuttLisp is not a real language, and is
not meant to be an alternative to macros.  The features are
purposely minimal, with the actual work still being done by Mutt
commands (@pxref{Configuration Commands}).

There are two ways to invoke MuttLisp: via the
@samp{run} command, or interpolated as a command
argument.

@menu
* Running a command generated by MuttLisp::
* Interpolating MuttLisp in a Command Argument::
* MuttLisp Syntax::
* MuttLisp Functions::
* Examples: Examples <1>.
@end menu

@node Running a command generated by MuttLisp, Interpolating MuttLisp in a Command Argument, , Using MuttLisp [EXPERIMENTAL]
@subsection Running a command generated by MuttLisp

Usage:

@quotation

@t{run  
MuttLisp
}
@end quotation

The @samp{run} command evaluates the MuttLisp argument.
The output of the MuttLisp is then executed as a
Mutt command, as if it were typed in the muttrc instead.

@example

run (concat "set my_name = '" \
      (or $ENV_NAME "Test User") "'")

  ==> generates and runs the line:
      set my_name = 'Test User'
@end example

This will set the Mutt User-Defined Variable (@pxref{User-Defined Variables})
@samp{$my_name} to either the environment variable $ENV_NAME, if
defined, or else "Test User".

@node Interpolating MuttLisp in a Command Argument, MuttLisp Syntax, Running a command generated by MuttLisp, Using MuttLisp [EXPERIMENTAL]
@subsection Interpolating MuttLisp in a Command Argument

The second way of running is directly as a command argument.
An unquoted parenthesis expression will be evaluated, and the result
substituted as the argument.

To avoid breaking existing configurations, this is disabled by
default.  It can be enabled by setting $muttlisp_inline_eval (@pxref{muttlisp_inline_eval}).  Before doing so, you should
review your Mutt configuration to ensure you don't have any bare
parenthesis expressions elsewhere, such as the regexp parameter
of a folder-hook (@pxref{Setting Variables Based Upon Mailbox}).  These can typically be
surrounded by single or double-quotes to prevent being evaluated as
MuttLisp.

@example

set my_name = (or $ENV_NAME "Test User")
@end example

The result of the MuttLisp is directly assigned as the argument.
It isn't reinterpreted, so there is no need for the outer
quotes.  This is in contrast with the run (@pxref{Running a command generated by MuttLisp}) command, where the output is
reinterpreted by the muttrc parser.

@node MuttLisp Syntax, MuttLisp Functions, Interpolating MuttLisp in a Command Argument, Using MuttLisp [EXPERIMENTAL]
@subsection MuttLisp Syntax

MuttLisp was inspired by Lisp, and so follows the same basic
syntax.  All statements are surrounded by parenthesis.  The first argument
inside the parenthesis is a function to invoke.  The remaining arguments
are passed as parameters.

The arguments to functions are read and evaluated using muttrc syntax (@pxref{Syntax of Initialization Files}).  This means Mutt
variables or environment variables can be passed directly, or
interpolated inside a double-quoted string.

Although the arguments to a function are evaluated, the result
of the function call is not.

@example

echo (concat '$' 'spoolfile')
  ==> $spoolfile
@end example

MuttLisp has no types - everything is stored and evaluated as
a string, just as with the muttrc.  True is defined as a non-empty
string, and false as the empty string.

The muttrc is evaluated line by line, and MuttLisp is similarly
constrained.  Input can be continued on more than one line by
placing a backslash at the end of the line.

@node MuttLisp Functions, Examples <1>, MuttLisp Syntax, Using MuttLisp [EXPERIMENTAL]
@subsection MuttLisp Functions

@menu
* concat::
* quote::
* equal::
* not::
* and::
* or::
* if::
@end menu

@node concat, quote, , MuttLisp Functions
@subsubsection concat

Combines all arguments into a single string.

@example

echo (concat one two three)
  ==> onetwothree
@end example

@node quote, equal, concat, MuttLisp Functions
@subsubsection quote

Prevents interpretation of the list.  Note that the list must
still obey MuttLisp syntax: single quotes, double quotes,
backticks, and parenthesis are still parsed prior to
@samp{quote} running and must be matching.

@example

echo (quote one two three)
  ==> one two three

echo (quote $spoolfile)
  ==> $spoolfile

echo (quote (one two three))
  ==> (one two three)
@end example

@node equal, not, quote, MuttLisp Functions
@subsubsection equal

Performs a case-sensitive comparison of each argument.  Stops evaluating
arguments when it finds the first one that is not equal.  Returns
"t" if they are all equal, and the empty string if not.

@example

echo (equal one one)
  ==> "t"

echo (equal one `echo one`)
  ==> "t"

echo (equal one one two `echo three`)
  ==> ""
  note: `echo three` does not execute.

echo (equal "one two" `echo one two`)
  ==> ""
  note: backticks generate two arguments "one" and "two"

echo (equal "one two" "`echo one two`")
  ==> "t"
  note: backticks inside double quotes generates a single argument: "one two"
@end example

@node not, and, equal, MuttLisp Functions
@subsubsection not

Accepts a single argument only.
Returns "t" if the argument evaluates to the empty string.
Otherwise returns the empty string.

@example

echo (not one)
  ==> ""

echo (not "")
  ==> "t"

echo (not (equal one two))
  ==> "t"
@end example

@node and, or, not, MuttLisp Functions
@subsubsection and

Returns the first argument that evalutes to the empty string.
Otherwise returns the last argument, or "t" if there are no arguments.

@example

echo (and one two)
  ==> "two"

echo (and "" two `echo three`)
  ==> ""
  note: `echo three` does not execute.

echo (and)
  ==> "t"
@end example

@node or, if, and, MuttLisp Functions
@subsubsection or

Returns the first argument that evaluates to a non-empty string.  Otherwise
returns the empty string.

@example

echo (or one two)
  ==> "one"

echo (or "" two `echo three`)
  ==> "two"
  note: `echo three` does not execute.

echo (or)
  ==> ""
@end example

@node if, , or, MuttLisp Functions
@subsubsection if

Requires 2 or 3 arguments.  The first is a conditional.  If it
evaluates to "true" (a non-empty string), the second argument is
evaluated and returned.  Otherwise the third argument is evaluated
and returned.

@example

echo (if a one two)
  ==> "one"

echo (if "" one two)
  ==> "two"

set spoolfile = "/var/mail/user"
echo (if (equal $spoolfile "/var/mail/user") yes no)
  ==> "yes"
@end example

@node Examples <1>, , MuttLisp Functions, Using MuttLisp [EXPERIMENTAL]
@subsection Examples

It's important to remember that function arguments are
evaluated, but the result is not.  Also, the result of an
interpolated command argument is used directly, and needs no
quoting.

@example

# A three-way toggle of $index_format:

set muttlisp_inline_eval
set my_idx1 = "one"
set my_idx2 = "two"
set my_idx3 = "three"
set index_format = $my_idx1

macro index i '<enter-command>set index_format =  \
  (or                                             \
    (if (equal $index_format $my_idx1) $my_idx2)  \
    (if (equal $index_format $my_idx2) $my_idx3)  \
    $my_idx1) \
<enter>'
@end example

The output of the run command is re-evaluated by the muttrc
parser.  So it's important to pay more attention to quoting
issues when generating the command string below.

@example

# Conditionally set up background editing in tmux or GNU Screen:

run \
  (if (or $STY $TMUX)                             \
    (concat                                       \
      'set background_edit;'                      \
      'set editor = "bgedit-screen-tmux.sh vim"') \
    (concat                                       \
      'unset background_edit;'                    \
      'set editor = "vim"'))
@end example

Because backticks are evaluated by MuttLisp too, we need to use
the run command below and pay close attention to quoting.

@example

# Use a Mutt variable inside backticks.

set spoolfile = "/var/mail/testuser"

# This will generate and then run the command string:
#   set my_var = "`~/bin/myscript.sh /var/mail/testuser`"
run                                       \
  (concat                                 \
     'set my_var = "`~/bin/myscript.sh '  \
     $spoolfile                           \
     '`"')
@end example

@node Miscellany, , Using MuttLisp [EXPERIMENTAL], Advanced Usage
@section Miscellany

This section documents various features that fit nowhere else.

@table @asis

@item  Address normalization 
Mutt normalizes all e-mail addresses to the simplest form possible. If
an address contains a realname, the form @emph{Joe User
<joe@@example.com>} is used and the pure e-mail address
without angle brackets otherwise, i.e. just
@emph{joe@@example.com}.

This normalization affects all headers Mutt generates including aliases.

@item  Initial folder selection 
The folder Mutt opens at startup is determined as follows: the folder
specified in the @samp{$MAIL} environment variable if
present. Otherwise, the value of @samp{$MAILDIR} is taken
into account. If that isn't present either, Mutt takes the user's
mailbox in the mailspool as determined at compile-time (which may also
reside in the home directory). The $spoolfile (@pxref{spoolfile}) setting overrides this
selection. Highest priority has the mailbox given with the
@samp{-f} command line option.
@end table

@node Mutt's MIME Support, Optional Features, Advanced Usage, Top
@chapter Mutt's MIME Support

Quite a bit of effort has been made to make Mutt the premier text-mode
MIME MUA.  Every effort has been made to provide the functionality that
the discerning MIME user requires, and the conformance to the standards
wherever possible.  When configuring Mutt for MIME, there are two extra
types of configuration files which Mutt uses.  One is the
@samp{mime.types} file, which contains the mapping of file
extensions to IANA MIME types.  The other is the
@samp{mailcap} file, which specifies the external commands
to use for handling specific MIME types.

@menu
* Using MIME in Mutt::
* MIME Type Configuration with mime.types: MIME Type Configuration with mime_types.
* MIME Viewer Configuration with Mailcap::
* MIME Autoview::
* MIME Multipart/Alternative::
* Attachment Searching and Counting::
* MIME Lookup::
@end menu

@node Using MIME in Mutt, MIME Type Configuration with mime_types, , Mutt's MIME Support
@section Using MIME in Mutt

@menu
* MIME Overview::
* Viewing MIME Messages in the Pager::
* The Attachment Menu::
* The Compose Menu::
@end menu

@node MIME Overview, Viewing MIME Messages in the Pager, , Using MIME in Mutt
@subsection MIME Overview

MIME is short for ‘Multipurpose Internet Mail Extension’
and describes mechanisms to internationalize and structure mail
messages. Before the introduction of MIME, messages had a single text
part and were limited to us-ascii header and content. With MIME,
messages can have attachments (and even attachments which itself have
attachments and thus form a tree structure), nearly arbitrary characters
can be used for sender names, recipients and subjects.

Besides the handling of non-ascii characters in message headers, to Mutt
the most important aspect of MIME are so-called MIME types. These are
constructed using a @emph{major} and
@emph{minor} type separated by a forward slash.  These
specify details about the content that follows. Based upon these, Mutt
decides how to handle this part. The most popular major type is
‘@samp{text}’ with minor types for plain text,
HTML and various other formats. Major types also exist for images,
audio, video and of course general application data (e.g. to separate
cryptographically signed data with a signature, send office documents,
and in general arbitrary binary data). There's also the
@samp{multipart} major type which represents the root of a
subtree of MIME parts. A list of supported MIME types can be found in
@ref{Supported MIME types}.

MIME also defines a set of encoding schemes for transporting MIME
content over the network: @samp{7bit},
@samp{8bit}, @samp{quoted-printable},
@samp{base64} and @samp{binary}. There're some
rules when to choose what for encoding headers and/or body (if needed),
and Mutt will in general make a good choice.

Mutt does most of MIME encoding/decoding behind the scenes to form
messages conforming to MIME on the sending side. On reception, it can be
flexibly configured as to how what MIME structure is displayed (and if
it's displayed): these decisions are based on the content's MIME type.
There are three areas/menus in dealing with MIME: the pager (while
viewing a message), the attachment menu and the compose menu.

@node Viewing MIME Messages in the Pager, The Attachment Menu, MIME Overview, Using MIME in Mutt
@subsection Viewing MIME Messages in the Pager

When you select a message from the index and view it in the pager, Mutt
decodes as much of a message as possible to a text representation.  Mutt
internally supports a number of MIME types, including the
@samp{text} major type (with all minor types), the
@samp{message/rfc822} (mail messages) type and some
@samp{multipart} types. In addition, it recognizes a variety
of PGP MIME types, including PGP/MIME and
@samp{application/pgp}.

Mutt will denote attachments with a couple lines describing them.
These lines are of the form:

@example

[-- Attachment #1: Description --]
[-- Type: text/plain, Encoding: 7bit, Size: 10000 --]
@end example

Where the @emph{Description} is the description or
filename given for the attachment, and the @emph{Encoding}
is one of the already mentioned content encodings.

If Mutt cannot deal with a MIME type, it will display a message like:

@example

[-- image/gif is unsupported (use 'v' to view this part) --]
@end example

@node The Attachment Menu, The Compose Menu, Viewing MIME Messages in the Pager, Using MIME in Mutt
@subsection The Attachment Menu

The default binding for @samp{<view-attachments>} is
‘v’, which displays the attachment menu for a message.  The
attachment menu displays a list of the attachments in a message.  From
the attachment menu, you can save, print, pipe, delete, and view
attachments.  You can apply these operations to a group of attachments
at once, by tagging the attachments and by using the
@samp{<tag-prefix>} operator.  You can also reply to
the current message from this menu, and only the current attachment (or
the attachments tagged) will be quoted in your reply.  You can view
attachments as text, or view them using the mailcap viewer definition
(the mailcap mechanism is explained later in detail).

Finally, you can apply the usual message-related functions (like @samp{<resend-message>} (@pxref{resend-message}),
and the @samp{<reply>} and
@samp{<forward>} functions) to attachments of type
@samp{message/rfc822}.

See table @ref{Default Attachment Menu Bindings} for all available
functions.

@node The Compose Menu, , The Attachment Menu, Using MIME in Mutt
@subsection The Compose Menu

The compose menu is the menu you see before you send a message.  It
allows you to edit the recipient list, the subject, and other aspects of
your message.  It also contains a list of the attachments of your
message, including the main body.  From this menu, you can print, copy,
filter, pipe, edit, compose, review, and rename an attachment or a list
of tagged attachments.  You can also modifying the attachment
information, notably the type, encoding and description.

Attachments appear as follows by default:

@example

- 1 [text/plain, 7bit, 1K]           /tmp/mutt-euler-8082-0 <no description>
  2 [applica/x-gunzip, base64, 422K] ~/src/mutt-0.85.tar.gz <no description>
@end example

The ‘-’ denotes that Mutt will delete the file after
sending (or postponing, or canceling) the message.  It can be toggled
with the @samp{<toggle-unlink>} command (default: u).
The next field is the MIME content-type, and can be changed with the
@samp{<edit-type>} command (default: ^T).  The next
field is the encoding for the attachment, which allows a binary message
to be encoded for transmission on 7bit links.  It can be changed with
the @samp{<edit-encoding>} command (default: ^E).  The
next field is the size of the attachment, rounded to kilobytes or
megabytes.  The next field is the filename, which can be changed with
the @samp{<rename-file>} command (default: R).  The
final field is the description of the attachment, and can be changed
with the @samp{<edit-description>} command (default:
d). See $attach_format (@pxref{attach_format}) for a full
list of available expandos to format this display to your needs.

@node MIME Type Configuration with mime_types, MIME Viewer Configuration with Mailcap, Using MIME in Mutt, Mutt's MIME Support
@section MIME Type Configuration with mime.types

To get most out of MIME, it's important that a MIME part's content type
matches the content as closely as possible so that the recipient's
client can automatically select the right viewer for the
content. However, there's no reliable for Mutt to know how to detect
every possible file type. Instead, it uses a simple plain text mapping
file that specifies what file extension corresponds to what MIME
type. This file is called @samp{mime.types}.

When you add an attachment to your mail message, Mutt searches your
personal @samp{mime.types} file at
@samp{$HOME/.mime.types}, and then the system
@samp{mime.types} file at
@samp{/usr/local/share/mutt/mime.types} or
@samp{/etc/mime.types}

Each line starts with the full MIME type, followed by a space and
space-separated list of file extensions. For example you could use:

@noindent
@anchor{mime_types}

@strong{mime.types}

@example

application/postscript          ps eps
application/pgp                 pgp
audio/x-aiff                    aif aifc aiff
@end example

A sample @samp{mime.types} file comes with the Mutt
distribution, and should contain most of the MIME types you are likely
to use.

If Mutt can not determine the MIME type by the extension of the file you
attach, it will run the command specified in
$mime_type_query_command (@pxref{mime_type_query_command}).
If that command is not specified, Mutt will look at the file.  If the file
is free of binary information, Mutt will assume that the file is plain text,
and mark it as @samp{text/plain}.  If the file contains binary
information, then Mutt will mark it as
@samp{application/octet-stream}.  You can change the MIME
type that Mutt assigns to an attachment by using the
@samp{<edit-type>} command from the compose menu
(default: ^T), see @ref{Supported MIME types} for supported
major types. Mutt recognizes all of these if the appropriate entry is
found in the @samp{mime.types} file. Non-recognized mime
types should only be used if the recipient of the message is likely to
be expecting such attachments.

@noindent
@anchor{Supported MIME types}

@strong{Supported MIME types}

@multitable @columnfractions 0.333333333333333 0.333333333333333 0.333333333333333
@item
MIME major type@tab Standard@tab Description
@item
@samp{application}@tab yes@tab General application data
@item
@samp{audio}@tab yes@tab Audio data
@item
@samp{image}@tab yes@tab Image data
@item
@samp{message}@tab yes@tab Mail messages, message status information
@item
@samp{model}@tab yes@tab VRML and other modeling data
@item
@samp{multipart}@tab yes@tab Container for other MIME parts
@item
@samp{text}@tab yes@tab Text data
@item
@samp{video}@tab yes@tab Video data
@item
@samp{chemical}@tab no@tab Mostly molecular data
@end multitable

MIME types are not arbitrary, they need to be assigned by @uref{http://www.iana.org/assignments/media-types/,IANA}.

@node MIME Viewer Configuration with Mailcap, MIME Autoview, MIME Type Configuration with mime_types, Mutt's MIME Support
@section MIME Viewer Configuration with Mailcap

Mutt supports RFC 1524 MIME Configuration, in particular the Unix
specific format specified in Appendix A of RFC 1524.  This file format
is commonly referred to as the ‘mailcap’ format.  Many MIME
compliant programs utilize the mailcap format, allowing you to specify
handling for all MIME types in one place for all programs.  Programs
known to use this format include Firefox, lynx and metamail.

In order to handle various MIME types that Mutt doesn't have built-in
support for, it parses a series of external configuration files to find
an external handler. The default search string for these files is a
colon delimited list containing the following files:

@enumerate 

@item
@samp{$HOME/.mailcap}

@item
@samp{$PKGDATADIR/mailcap}

@item
@samp{$SYSCONFDIR/mailcap}

@item
@samp{/etc/mailcap}

@item
@samp{/usr/etc/mailcap}

@item
@samp{/usr/local/etc/mailcap}
@end enumerate

where @samp{$HOME} is your home directory. The
@samp{$PKGDATADIR} and the @samp{$SYSCONFDIR}
directories depend on where Mutt is installed: the former is the default
for shared data, the latter for system configuration files.

The default search path can be obtained by running the following
command:

@example

mutt -nF /dev/null -Q mailcap_path
@end example

In particular, the metamail distribution will install a mailcap file,
usually as @samp{/usr/local/etc/mailcap}, which contains
some baseline entries.

@menu
* The Basics of the Mailcap File::
* Secure Use of Mailcap::
* Advanced Mailcap Usage::
* Example Mailcap Files::
@end menu

@node The Basics of the Mailcap File, Secure Use of Mailcap, , MIME Viewer Configuration with Mailcap
@subsection The Basics of the Mailcap File

A mailcap file consists of a series of lines which are comments, blank,
or definitions.

A comment line consists of a # character followed by anything you want.

A blank line is blank.

A definition line consists of a content type, a view command, and any
number of optional fields.  Each field of a definition line is divided
by a semicolon ‘;’ character.

The content type is specified in the MIME standard
‘type/subtype’ notation.  For example,
@samp{text/plain}, @samp{text/html},
@samp{image/gif}, etc.  In addition, the mailcap format
includes two formats for wildcards, one using the special
‘*’ subtype, the other is the implicit wild, where you only
include the major type.  For example, @samp{image/*}, or
@samp{video} will match all image types and video types,
respectively.

The view command is a Unix command for viewing the type specified. There
are two different types of commands supported. The default is to send
the body of the MIME message to the command on stdin. You can change
this behavior by using @samp{%s} as a parameter to your view
command.  This will cause Mutt to save the body of the MIME message to a
temporary file, and then call the view command with the
@samp{%s} replaced by the name of the temporary file. In
both cases, Mutt will turn over the terminal to the view program until
the program quits, at which time Mutt will remove the temporary file if
it exists. This means that mailcap does @emph{not} work
out of the box with programs which detach themselves from the terminal
right after starting, like @samp{open} on Mac OS X. In order
to nevertheless use these programs with mailcap, you probably need
custom shell scripts.

So, in the simplest form, you can send a @samp{text/plain}
message to the external pager more on standard input:

@example

text/plain; more
@end example

Or, you could send the message as a file:

@example

text/plain; more %s
@end example

Perhaps you would like to use lynx to interactively view a
@samp{text/html} message:

@example

text/html; lynx %s
@end example

In this case, lynx does not support viewing a file from standard input,
so you must use the @samp{%s} syntax.

@quotation

@strong{Note}

@emph{Some older versions of lynx contain a bug where they will
check the mailcap file for a viewer for @samp{text/html}.
They will find the line which calls lynx, and run it.  This causes lynx
to continuously spawn itself to view the object.}
@end quotation

On the other hand, maybe you don't want to use lynx interactively, you
just want to have it convert the @samp{text/html} to
@samp{text/plain}, then you can use:

@example

text/html; lynx -dump %s | more
@end example

Perhaps you wish to use lynx to view @samp{text/html} files,
and a pager on all other text formats, then you would use the following:

@example

text/html; lynx %s
text/*; more
@end example

@node Secure Use of Mailcap, Advanced Mailcap Usage, The Basics of the Mailcap File, MIME Viewer Configuration with Mailcap
@subsection Secure Use of Mailcap

The interpretation of shell meta-characters embedded in MIME parameters
can lead to security problems in general.  Mutt tries to quote
parameters in expansion of @samp{%s} syntaxes properly, and
avoids risky characters by substituting them, see the $mailcap_sanitize (@pxref{mailcap_sanitize}) variable.

Although Mutt's procedures to invoke programs with mailcap seem to be
safe, there are other applications parsing mailcap, maybe taking less
care of it.  Therefore you should pay attention to the following rules:

@emph{Keep the %-expandos away from shell quoting.} Don't
quote them with single or double quotes.  Mutt does this for you, the
right way, as should any other program which interprets mailcap.  Don't
put them into backtick expansions.  Be highly careful with evil
statements, and avoid them if possible at all.  Trying to fix broken
behavior with quotes introduces new leaks — there is no
alternative to correct quoting in the first place.

If you have to use the %-expandos' values in context where you need
quoting or backtick expansions, put that value into a shell variable and
reference the shell variable where necessary, as in the following
example (using @samp{$charset} inside the backtick expansion
is safe, since it is not itself subject to any further expansion):

@example

text/test-mailcap-bug; cat %s; copiousoutput; test=charset=%@{charset@} \
        && test "`echo $charset | tr '[A-Z]' '[a-z]'`" != iso-8859-1
@end example

@node Advanced Mailcap Usage, Example Mailcap Files, Secure Use of Mailcap, MIME Viewer Configuration with Mailcap
@subsection Advanced Mailcap Usage

@menu
* Optional Fields::
* Search Order::
* Command Expansion::
@end menu

@node Optional Fields, Search Order, , Advanced Mailcap Usage
@subsubsection Optional Fields

In addition to the required content-type and view command fields, you
can add semi-colon ‘;’ separated fields to set flags and
other options.  Mutt recognizes the following optional fields:

@table @asis

@item copiousoutput
This flag tells Mutt that the command passes possibly large amounts of
text on standard output.  This causes Mutt to invoke a pager (either
the internal pager or the external pager defined by the pager variable)
on the output of the view command.  Without this flag, Mutt assumes that
the command is interactive.  One could use this to replace the pipe to
@samp{more} in the @samp{lynx -dump} example in
the Basic section:

@example

text/html; lynx -dump %s ; copiousoutput
@end example

This will cause lynx to format the @samp{text/html} output
as @samp{text/plain} and Mutt will use your standard pager
to display the results.

Mutt will set the @samp{COLUMNS} environment variable to
the width of the pager.  Some programs make use of this environment
variable automatically.  Others provide a command line argument that
can use this to set the output width:

@example

text/html; lynx -dump -width $@{COLUMNS:-80@} %s; copiousoutput
@end example

Note that when using the built-in pager, @emph{only}
entries with this flag will be considered a handler for a MIME type
— all other entries will be ignored.

@item needsterminal
Mutt uses this flag when viewing attachments with @code{auto_view} (@pxref{MIME Autoview}), in order to
decide whether it should honor the setting of the $wait_key (@pxref{wait_key}) variable or not.  When an attachment
is viewed using an interactive program, and the corresponding mailcap
entry has a @emph{needsterminal} flag, Mutt will use $wait_key (@pxref{wait_key}) and the exit status of the program
to decide if it will ask you to press a key after the external program
has exited.  In all other situations it will not prompt you for a key.

@item compose=<command>
This flag specifies the command to use to create a new attachment of a
specific MIME type.  Mutt supports this from the compose menu.

@item composetyped=<command>
This flag specifies the command to use to create a new attachment of a
specific MIME type.  This command differs from the compose command in
that Mutt will expect standard MIME headers on the data.  This can be
used to specify parameters, filename, description, etc. for a new
attachment.  Mutt supports this from the compose menu.

@item print=<command>
This flag specifies the command to use to print a specific MIME type.
Mutt supports this from the attachment and compose menus.

@item edit=<command>
This flag specifies the command to use to edit a specific MIME type.
Mutt supports this from the compose menu, and also uses it to compose
new attachments.  Mutt will default to the defined $editor (@pxref{editor}) for text attachments.

@item nametemplate=<template>
This field specifies the format for the file denoted by
@samp{%s} in the command fields.  Certain programs will
require a certain file extension, for instance, to correctly view a
file.  For instance, lynx will only interpret a file as
@samp{text/html} if the file ends in
@samp{.html}.  So, you would specify lynx as a
@samp{text/html} viewer with a line in the mailcap file
like:

@example

text/html; lynx %s; nametemplate=%s.html
@end example

@item test=<command>
This field specifies a command to run to test whether this mailcap entry
should be used.  The command is defined with the command expansion rules
defined in the next section.  If the command returns 0, then the test
passed, and Mutt uses this entry.  If the command returns non-zero, then
the test failed, and Mutt continues searching for the right entry.  Note
that the content-type must match before Mutt performs the test.  For
example:

@example

text/html; firefox -remote 'openURL(%s)' ; test=RunningX
text/html; lynx %s
@end example

In this example, Mutt will run the program @samp{RunningX}
which will return 0 if the X Window manager is running, and non-zero if
it isn't.  If @samp{RunningX} returns 0, then Mutt will run
firefox to display the @samp{text/html} object.  If RunningX
doesn't return 0, then Mutt will go on to the next entry and use lynx to
display the @samp{text/html} object.
@end table

@node Search Order, Command Expansion, Optional Fields, Advanced Mailcap Usage
@subsubsection Search Order

When searching for an entry in the mailcap file, Mutt will search for
the most useful entry for its purpose.  For instance, if you are
attempting to print an @samp{image/gif}, and you have the
following entries in your mailcap file, Mutt will search for an entry
with the print command:

@example

image/*;        xv %s
image/gif;      ; print= anytopnm %s | pnmtops | lpr; \
                nametemplate=%s.gif
@end example

Mutt will skip the @samp{image/*} entry and use the
@samp{image/gif} entry with the print command.

In addition, you can use this with @code{auto_view} (@pxref{MIME Autoview}) to denote two
commands for viewing an attachment, one to be viewed automatically, the
other to be viewed interactively from the attachment menu using the
@samp{<view-mailcap>} function (bound to
‘m’ by default). In addition, you can then use the test
feature to determine which viewer to use interactively depending on your
environment.

@example

text/html;      firefox -remote 'openURL(%s)' ; test=RunningX
text/html;      lynx %s; nametemplate=%s.html
text/html;      lynx -dump %s; nametemplate=%s.html; copiousoutput
@end example

For @code{auto_view} (@pxref{MIME Autoview}), Mutt
will choose the third entry because of the
@samp{copiousoutput} tag.  For interactive viewing, Mutt
will run the program @samp{RunningX} to determine if it
should use the first entry.  If the program returns non-zero, Mutt will
use the second entry for interactive viewing. The last entry is for
inline display in the pager and the
@samp{<view-attach>} function in the attachment menu.

Entries with the @samp{copiousoutput} tag should always be
specified as the last one per type. For non-interactive use, the last
entry will then actually be the first matching one with the tag set.
For non-interactive use, only @samp{copiousoutput}-tagged
entries are considered. For interactive use, Mutt ignores this tag and
treats all entries equally. Therefore, if not specified last, all
following entries without this tag would never be considered for
@samp{<view-attach>} because the
@samp{copiousoutput} before them matched already.

@node Command Expansion, , Search Order, Advanced Mailcap Usage
@subsubsection Command Expansion

The various commands defined in the mailcap files are passed to the
@samp{/bin/sh} shell using the @samp{system(3)}
function.  Before the command is passed to @samp{/bin/sh
-c}, it is parsed to expand various special parameters with
information from Mutt.  The keywords Mutt expands are:

@table @asis

@item %s
As seen in the basic mailcap section, this variable is expanded to a
filename specified by the calling program.  This file contains the body
of the message to view/print/edit or where the composing program should
place the results of composition.  In addition, the use of this keyword
causes Mutt to not pass the body of the message to the view/print/edit
program on stdin.

@item %t
Mutt will expand @samp{%t} to the text representation of the
content type of the message in the same form as the first parameter of
the mailcap definition line, i.e. @samp{text/html} or
@samp{image/gif}.

@item %@{<parameter>@}
Mutt will expand this to the value of the specified parameter from the
Content-Type: line of the mail message.  For instance, if your mail
message contains:

@example

Content-Type: text/plain; charset=iso-8859-1
@end example

then Mutt will expand @samp{%@{charset@}} to
‘iso-8859-1’.  The default metamail mailcap file uses this
feature to test the charset to spawn an xterm using the right charset to
view the message.

@item \%
This will be replaced by a literal @samp{%}.
@end table

Mutt does not currently support the @samp{%F} and
@samp{%n} keywords specified in RFC 1524.  The main purpose
of these parameters is for multipart messages, which is handled
internally by Mutt.

@node Example Mailcap Files, , Advanced Mailcap Usage, MIME Viewer Configuration with Mailcap
@subsection Example Mailcap Files

This mailcap file is fairly simple and standard:

@example

# I'm always running X :)
video/*;        xanim %s > /dev/null
image/*;        xv %s > /dev/null

# I'm always running firefox (if my computer had more memory, maybe)
text/html;      firefox -remote 'openURL(%s)'
@end example

This mailcap file shows quite a number of examples:

@example

# Use xanim to view all videos   Xanim produces a header on startup,
# send that to /dev/null so I don't see it
video/*;        xanim %s > /dev/null

# Send html to a running firefox by remote
text/html;      firefox -remote 'openURL(%s)'; test=RunningFirefox

# If I'm not running firefox but I am running X, start firefox on the
# object
text/html;      firefox %s; test=RunningX

# Else use lynx to view it as text
text/html;      lynx %s

# This version would convert the text/html to text/plain
text/html;      lynx -dump %s; copiousoutput

# I use enscript to print text in two columns to a page
text/*;         more %s; print=enscript -2Gr %s

# Firefox adds a flag to tell itself to view jpegs internally
image/jpeg;xv %s; x-mozilla-flags=internal

# Use xv to view images if I'm running X
# In addition, this uses the \ to extend the line and set my editor
# for images
image/*;xv %s; test=RunningX; \
        edit=xpaint %s

# Convert images to text using the netpbm tools
image/*;  (anytopnm %s | pnmscale -xysize 80 46 | ppmtopgm | pgmtopbm |
pbmtoascii -1x2 ) 2>&1 ; copiousoutput

# Send excel spreadsheets to my NT box
application/ms-excel; open.pl %s
@end example

@node MIME Autoview, MIME Multipart/Alternative, MIME Viewer Configuration with Mailcap, Mutt's MIME Support
@section MIME Autoview

Usage:

@quotation

@t{auto_view  
mimetype
[
mimetype
]… unauto_view @{
*
| 
mimetype
…@}}
@end quotation

In addition to explicitly telling Mutt to view an attachment with the
MIME viewer defined in the mailcap file from the attachments menu, Mutt
has support for automatically viewing MIME attachments while in the
pager.

For this to work, you must define a viewer in the mailcap file which
uses the @samp{copiousoutput} option to denote that it is
non-interactive.  Usually, you also use the entry to convert the
attachment to a text representation which you can view in the pager.

You then use the @code{auto_view} configuration command to
list the content-types that you wish to view automatically.  For
instance, if you set it to:

@example

auto_view text/html application/x-gunzip \
  application/postscript image/gif application/x-tar-gz
@end example

...Mutt would try to find corresponding entries for rendering
attachments of these types as text. A corresponding mailcap could look
like:

@example

text/html;      lynx -dump %s; copiousoutput; nametemplate=%s.html
image/*;        anytopnm %s | pnmscale -xsize 80 -ysize 50 | ppmtopgm | \
                pgmtopbm | pbmtoascii ; copiousoutput
application/x-gunzip;   gzcat; copiousoutput
application/x-tar-gz; gunzip -c %s | tar -tf - ; copiousoutput
application/postscript; ps2ascii %s; copiousoutput
@end example

@code{unauto_view} can be used to remove previous entries
from the @code{auto_view} list.  This can be used with @code{message-hook} (@pxref{Change Settings Before Formatting a Message}) to
autoview messages based on size, etc.
‘@code{unauto_view} *’ will remove all previous
entries.

@node MIME Multipart/Alternative, Attachment Searching and Counting, MIME Autoview, Mutt's MIME Support
@section MIME Multipart/Alternative

The @samp{multipart/alternative} container type only has
child MIME parts which represent the same content in an alternative
way. This is often used to send HTML messages which contain an
alternative plain text representation.

Mutt has some heuristics for determining which attachment of a
@samp{multipart/alternative} type to display:

@enumerate 

@item
First, Mutt will check the @code{alternative_order} list to
determine if one of the available types is preferred.  It consists of a
number of MIME types in order, including support for implicit and
explicit wildcards. For example:

@example

alternative_order text/enriched text/plain text \
  application/postscript image/*
@end example

@item
Next, Mutt will check if any of the types have a defined @code{auto_view} (@pxref{MIME Autoview}), and use that.

@item
Failing that, Mutt will look for any text type.

@item
As a last attempt, Mutt will look for any type it knows how to handle.
@end enumerate

To remove a MIME type from the @code{alternative_order}
list, use the @code{unalternative_order} command.

Generating @samp{multipart/alternative} content is supported
via the
$send_multipart_alternative (@pxref{send_multipart_alternative})
quadoption and
$send_multipart_alternative_filter (@pxref{send_multipart_alternative_filter})
filter script.  The composed @samp{text/plain} content
will be piped to the filter script's stdin.  The output from the
filter script should be the generated mime type of the content, a
blank line, and the content.  For example:

@example

text/html

<html>
<body>
Content in html format
</body>
</html>
@end example

A preview of the alternative can be viewed in the compose menu using the functions
@samp{<view-alt>},
@samp{<view-alt-text>} and
@samp{<view-alt-mailcap>}, bound to
"v", "Esc v" and "V" by default.

@node Attachment Searching and Counting, MIME Lookup, MIME Multipart/Alternative, Mutt's MIME Support
@section Attachment Searching and Counting

If you ever lose track of attachments in your mailboxes, Mutt's
attachment-counting and -searching support might be for you.  You can
make your message index display the number of qualifying attachments in
each message, or search for messages by attachment count.  You also can
configure what kinds of attachments qualify for this feature with the
@code{attachments} and @code{unattachments}
commands.

In order to provide this information, Mutt needs to fully MIME-parse all
messages affected first. This can slow down operation especially for
remote mail folders such as IMAP because all messages have to be
downloaded first regardless whether the user really wants to view them
or not though using @ref{Body Caching} usually means to
download the message just once.

By default, Mutt will not search inside
@samp{multipart/alternative} containers.  This can be
changed via the $count_alternatives (@pxref{count_alternatives}) configuration
variable.

The syntax is:

@quotation

@t{attachments  
@{ + | - @}disposition
mime-type
unattachments  
@{ + | - @}disposition
mime-type
attachments  
?
unattachments  
*
}
@end quotation

@emph{disposition} is the attachment's Content-Disposition
type — either @samp{inline} or
@samp{attachment}.  You can abbreviate this to
@samp{I} or @samp{A}.

The first part of a message or multipart group, if inline, is counted
separately than other inline parts.  Specify @samp{root}
or @samp{R} for @emph{disposition} to count
these as attachments.  If this first part is of type
multipart/alternative, note that its top-level inline parts are also
counted via @samp{root} @emph{disposition}
(if $count_alternatives (@pxref{count_alternatives}) is
set).

Disposition is prefixed by either a ‘+’ symbol or a
‘-’ symbol.  If it's a ‘+’, you're saying that
you want to allow this disposition and MIME type to qualify.  If it's a
‘-’, you're saying that this disposition and MIME type is
an exception to previous ‘+’ rules.  There are examples
below of how this is useful.

@emph{mime-type} is the MIME type of the attachment you
want the command to affect.  A MIME type is always of the format
@samp{major/minor}, where @samp{major} describes
the broad category of document you're looking at, and
@samp{minor} describes the specific type within that
category.  The major part of mime-type must be literal text (or the
special token ‘@samp{*}’), but the minor part
may be a regular expression.  (Therefore,
‘@samp{*/.*}’ matches any MIME type.)

The MIME types you give to the @code{attachments} directive
are a kind of pattern.  When you use the @code{attachments}
directive, the patterns you specify are added to a list.  When you use
@code{unattachments}, the pattern is removed from the list.
The patterns are not expanded and matched to specific MIME types at this
time — they're just text in a list.  They're only matched when
actually evaluating a message.

Some examples might help to illustrate.  The examples that are not
commented out define the default configuration of the lists.

@noindent
@anchor{Attachment counting}

@strong{Attachment counting}

@example


# Removing a pattern from a list removes that pattern literally. It
# does not remove any type matching the pattern.
#
#  attachments   +A */.*
#  attachments   +A image/jpeg
#  unattachments +A */.*
#
# This leaves "attached" image/jpeg files on the allowed attachments
# list. It does not remove all items, as you might expect, because the
# second */.* is not a matching expression at this time.
#
# Remember: "unattachments" only undoes what "attachments" has done!
# It does not trigger any matching on actual messages.

# Qualify any MIME part with an "attachment" disposition, EXCEPT for
# text/x-vcard and application/pgp parts. (PGP parts are already known
# to mutt, and can be searched for with ~g, ~G, and ~k.)
#
# I've added x-pkcs7 to this, since it functions (for S/MIME)
# analogously to PGP signature attachments. S/MIME isn't supported
# in a stock mutt build, but we can still treat it specially here.
#

attachments   +A */.*
attachments   -A text/x-vcard application/pgp.*
attachments   -A application/x-pkcs7-.*


# Discount all MIME parts with an "inline" disposition, unless they're
# text/plain. (Why inline a text/plain part unless it's external to the
# message flow?)

attachments   +I text/plain


# These two lines make Mutt qualify MIME containers.  (So, for example,
# a message/rfc822 forward will count as an attachment.)  The first
# line is unnecessary if you already have "attach-allow */.*", of
# course.  These are off by default!  The MIME elements contained
# within a message/* or multipart/* are still examined, even if the
# containers themselves don't qualify.

#attachments  +A message/.* multipart/.*
#attachments  +I message/.* multipart/.*


## You probably don't really care to know about deleted attachments.
attachments   -A message/external-body
attachments   -I message/external-body
@end example

Entering the command ‘@code{attachments} ?’ as
a command will list your current settings in Muttrc format, so that it
can be pasted elsewhere.

Entering the command ‘@code{unattachments} *’ as
a command will Clear all attachment settings.

@node MIME Lookup, , Attachment Searching and Counting, Mutt's MIME Support
@section MIME Lookup

Usage:

@quotation

@t{mime_lookup  
mimetype
[
mimetype
]… unmime_lookup @{
*
| 
mimetype
…@}}
@end quotation

Mutt's @code{mime_lookup} list specifies a list of MIME
types that should @emph{not} be treated according to their
mailcap entry.  This option is designed to deal with binary types such
as @samp{application/octet-stream}.  When an attachment's
MIME type is listed in @code{mime_lookup}, then the
extension of the filename will be compared to the list of extensions in
the @samp{mime.types} file.  The MIME type associated with
this extension will then be used to process the attachment according to
the rules in the mailcap file and according to any other configuration
options (such as @code{auto_view}) specified.  Common usage
would be:

@example

mime_lookup application/octet-stream application/X-Lotus-Manuscript
@end example

In addition, the @samp{unmime_lookup} command may be used to
disable this feature for any particular MIME type if it had been set,
for example, in a global @samp{.muttrc}.

@node Optional Features, Security Considerations, Mutt's MIME Support, Top
@chapter Optional Features

@menu
* General Notes::
* SSL/TLS Support::
* POP3 Support::
* IMAP Support::
* SMTP Support::
* OAUTHBEARER Support::
* Managing Multiple Accounts::
* Local Caching::
* Exact Address Generation::
* Sending Anonymous Messages via Mixmaster::
* Sidebar: Sidebar <1>.
* Compressed Folders Feature::
* Autocrypt::
@end menu

@node General Notes, SSL/TLS Support, , Optional Features
@section General Notes

@menu
* Enabling/Disabling Features::
* URL Syntax::
@end menu

@node Enabling/Disabling Features, URL Syntax, , General Notes
@subsection Enabling/Disabling Features

Mutt supports several of optional features which can be enabled or
disabled at compile-time by giving the @emph{configure}
script certain arguments. These are listed in the ‘Optional
features’ section of the @emph{configure --help}
output.

Which features are enabled or disabled can later be determined from the
output of @samp{mutt -v}. If a compile option starts with
‘+’ it is enabled and disabled if prefixed with
‘-’. For example, if Mutt was compiled using GnuTLS for
encrypted communication instead of OpenSSL, @samp{mutt -v}
would contain:

@example

-USE_SSL_OPENSSL +USE_SSL_GNUTLS
@end example

@node URL Syntax, , Enabling/Disabling Features, General Notes
@subsection URL Syntax

Mutt optionally supports the IMAP, POP3 and SMTP protocols which require
to access servers using URLs. The canonical syntax for specifying URLs
in Mutt is (an item enclosed in @samp{[]} means it is
optional and may be omitted):

@example

proto[s]://[username[:password]@@]server[:port][/path]
@end example

@emph{proto} is the communication protocol:
@samp{imap} for IMAP, @samp{pop} for POP3 and
@samp{smtp} for SMTP. If ‘s’ for ‘secure
communication’ is appended, Mutt will attempt to establish an
encrypted communication using SSL or TLS.

Since all protocols supported by Mutt support/require authentication,
login credentials may be specified in the URL. This has the advantage
that multiple IMAP, POP3 or SMTP servers may be specified (which isn't
possible using, for example, $imap_user (@pxref{imap_user})). The username may contain the
‘@@’ symbol being used by many mail systems as part of the
login name. The special characters ‘/’
(@samp{%2F}), ‘:’ (@samp{%3A}) and
‘%’ (@samp{%25}) have to be URL-encoded in
usernames using the @samp{%}-notation.

A password can be given, too but is not recommended if the URL is
specified in a configuration file on disk.

If no port number is given, Mutt will use the system's default for the
given protocol (usually consulting @samp{/etc/services}).

The optional path is only relevant for IMAP and ignored elsewhere.

@noindent
@anchor{URLs}

@strong{URLs}

@example

pops://host/
imaps://user@@host/INBOX/Sent
smtp://user@@host:587/
@end example

@node SSL/TLS Support, POP3 Support, General Notes, Optional Features
@section SSL/TLS Support

If Mutt is compiled with IMAP, POP3 and/or SMTP support, it can also be
compiled with support for SSL or TLS using either OpenSSL or GnuTLS ( by
running the @emph{configure} script with the
@emph{--enable-ssl=...} option for OpenSSL or
@emph{--enable-gnutls=...} for GnuTLS). Mutt can then
attempt to encrypt communication with remote servers if these protocols
are suffixed with ‘s’ for ‘secure
communication’.

@menu
* STARTTLS::
* Tunnel::
@end menu

@node STARTTLS, Tunnel, , SSL/TLS Support
@subsection STARTTLS

When non-secure URL protocols @samp{imap://},
@samp{pop://}, and @samp{smtp://} are
used, the initial connection to the server will be unencrypted.
@samp{STARTTLS} can be used to negotiate an encrypted
connection after the initial unencrypted connection and exchange.

Two configuration variables control Mutt's behavior with
@samp{STARTTLS}.  $ssl_starttls (@pxref{ssl_starttls}) will initiate
@samp{STARTTLS} if the server advertises support for
it.  $ssl_force_tls (@pxref{ssl_force_tls}) will
always try to initiate it, whether the server advertises support
or not.

Mutt @emph{highly recommends} setting $ssl_force_tls (@pxref{ssl_force_tls}) unless you need to
connect to an unencrypted server.  It's possible for an attacker
to spoof interactions during the initial connection and hide
support for @samp{STARTTLS}.  The only way to prevent
these attacks is by forcing @samp{STARTTLS} with the
$ssl_force_tls (@pxref{ssl_force_tls}) configuration
variable.

@node Tunnel, , STARTTLS, SSL/TLS Support
@subsection Tunnel

When connecting through a $tunnel (@pxref{tunnel})
and $tunnel_is_secure (@pxref{tunnel_is_secure}) is
set (the default), Mutt will assume the connection to the server
through the pipe is already secured.  Mutt will ignore $ssl_starttls (@pxref{ssl_starttls}) and $ssl_force_tls (@pxref{ssl_force_tls}), behaving as if TLS
has already been negotiated.

When $tunnel_is_secure (@pxref{tunnel_is_secure}) is
unset, Mutt will respect the values of $ssl_starttls (@pxref{ssl_starttls}) and $ssl_force_tls (@pxref{ssl_force_tls}).  It is
@emph{highly recommended} to set $ssl_force_tls (@pxref{ssl_force_tls}) in this case, to
force @samp{STARTTLS} negotiation.  Note that doing so
will prevent connection to an IMAP server configured for
preauthentication (@samp{PREAUTH}).  If you use this
configuration, it is recommended to use a secure tunnel.

@node POP3 Support, IMAP Support, SSL/TLS Support, Optional Features
@section POP3 Support

If Mutt is compiled with POP3 support (by running the
@emph{configure} script with the
@emph{--enable-pop} flag), it has the ability to work with
mailboxes located on a remote POP3 server and fetch mail for local
browsing.

Remote POP3 servers can be accessed using URLs with the
@samp{pop} protocol for unencrypted and
@samp{pops} for encrypted communication, see @ref{URL Syntax} for details.

Polling for new mail is more expensive over POP3 than locally. For this
reason the frequency at which Mutt will check for mail remotely can be
controlled by the $pop_checkinterval (@pxref{pop_checkinterval}) variable, which
defaults to every 60 seconds.

POP is read-only which doesn't allow for some features like editing
messages or changing flags. However, using @ref{Header Caching} and @ref{Body Caching} Mutt
simulates the new/old/read flags as well as flagged and replied.  Mutt
applies some logic on top of remote messages but cannot change them so
that modifications of flags are lost when messages are downloaded from
the POP server (either by Mutt or other tools).

@noindent
@anchor{fetch-mail}

Another way to access your POP3 mail is the
@samp{<fetch-mail>} function (default: G).  It allows
to connect to $pop_host (@pxref{pop_host}), fetch all your
new mail and place it in the local $spoolfile (@pxref{spoolfile}).  After this point, Mutt runs
exactly as if the mail had always been local.

@quotation

@strong{Note}

If you only need to fetch all messages to a local mailbox you should
consider using a specialized program, such as
@samp{fetchmail(1)}, @samp{getmail(1)} or
similar.
@end quotation

@node IMAP Support, SMTP Support, POP3 Support, Optional Features
@section IMAP Support

If Mutt was compiled with IMAP support (by running the
@emph{configure} script with the
@emph{--enable-imap} flag), it has the ability to work
with folders located on a remote IMAP server.

You can access the remote inbox by selecting the folder by its URL (see
@ref{URL Syntax} for details) using the
@samp{imap} or @samp{imaps} protocol.
Alternatively, a pine-compatible notation is also supported, i.e.
@samp{@{[username@@]imapserver[:port][/ssl]@}path/to/folder}

Note that not all servers use ‘/’ as the hierarchy
separator.  Mutt should correctly notice which separator is being used
by the server and convert paths accordingly.

When browsing folders on an IMAP server, you can toggle whether to look
at only the folders you are subscribed to, or all folders with the
@emph{toggle-subscribed} command.  See also the $imap_list_subscribed (@pxref{imap_list_subscribed}) variable.

Polling for new mail on an IMAP server can cause noticeable delays. So,
you'll want to carefully tune the $mail_check (@pxref{mail_check}) and $timeout (@pxref{timeout}) variables. Reasonable values are:

@example

set mail_check=90
set timeout=15
@end example

with relatively good results even over slow modem lines.

@quotation

@strong{Note}

Note that if you are using mbox as the mail store on UW servers prior to
v12.250, the server has been reported to disconnect a client if another
client selects the same folder.
@end quotation

@menu
* The IMAP Folder Browser::
* Authentication::
@end menu

@node The IMAP Folder Browser, Authentication, , IMAP Support
@subsection The IMAP Folder Browser

As of version 1.2, Mutt supports browsing mailboxes on an IMAP
server. This is mostly the same as the local file browser, with the
following differences:

@itemize 

@item
In lieu of file permissions, Mutt displays the string
‘IMAP’, possibly followed by the symbol ‘+’,
indicating that the entry contains both messages and subfolders. On
Cyrus-like servers folders will often contain both messages and
subfolders.  A mailbox name with a trailing delimiter (usually
‘/’ or ‘.’) indicates subfolders.

@item
For the case where an entry can contain both messages and subfolders,
the selection key (bound to @samp{enter} by default) will
choose to descend into the subfolder view. If you wish to view the
messages in that folder, you must use @samp{view-file}
instead (bound to @samp{space} by default).

@item
You can create, delete and rename mailboxes with the
@samp{<create-mailbox>},
@samp{<delete-mailbox>}, and
@samp{<rename-mailbox>} commands (default bindings:
@samp{C}, @samp{d} and @samp{r},
respectively). You may also @samp{<subscribe>} and
@samp{<unsubscribe>} to mailboxes (normally these are
bound to @samp{s} and @samp{u}, respectively).
@end itemize

@node Authentication, , The IMAP Folder Browser, IMAP Support
@subsection Authentication

Mutt supports four authentication methods with IMAP servers: SASL,
GSSAPI, CRAM-MD5, and LOGIN (there is a patch by Grant Edwards to add
NTLM authentication for you poor exchange users out there, but it has
yet to be integrated into the main tree). There is also support for the
pseudo-protocol ANONYMOUS, which allows you to log in to a public IMAP
server without having an account. To use ANONYMOUS, simply make your
username blank or ‘anonymous’.

SASL is a special super-authenticator, which selects among several
protocols (including GSSAPI, CRAM-MD5, ANONYMOUS, and DIGEST-MD5) the
most secure method available on your host and the server. Using some of
these methods (including DIGEST-MD5 and possibly GSSAPI), your entire
session will be encrypted and invisible to those teeming network
snoops. It is the best option if you have it. To use it, you must have
the Cyrus SASL library installed on your system and compile Mutt with
the @emph{--with-sasl} flag.

Mutt will try whichever methods are compiled in and available on the
server, in the following order: SASL, ANONYMOUS, GSSAPI, CRAM-MD5,
LOGIN.

There are a few variables which control authentication:

@itemize 

@item
$imap_user (@pxref{imap_user}) - controls the username
under which you request authentication on the IMAP server, for all
authenticators. This is overridden by an explicit username in the
mailbox path (i.e. by using a mailbox name of the form
@samp{@{user@@host@}}).

@item
$imap_pass (@pxref{imap_pass}) - a password which you may
preset, used by all authentication methods where a password is needed.

@item
$imap_authenticators (@pxref{imap_authenticators}) - a
colon-delimited list of IMAP authentication methods to try, in the order
you wish to try them. If specified, this overrides Mutt's default
(attempt everything, in the order listed above).
@end itemize

@node SMTP Support, OAUTHBEARER Support, IMAP Support, Optional Features
@section SMTP Support

Besides supporting traditional mail delivery through a
sendmail-compatible program, Mutt supports delivery through SMTP if it
was configured and built with @samp{--enable-smtp}.

If the configuration variable $smtp_url (@pxref{smtp_url})
is set, Mutt will contact the given SMTP server to deliver messages; if
it is unset, Mutt will use the program specified by $sendmail (@pxref{sendmail}).

For details on the URL syntax, please see @ref{URL Syntax}.

The built-in SMTP support supports encryption (the
@samp{smtps} protocol using SSL or TLS) as well as SMTP
authentication using SASL. The authentication mechanisms for SASL are
specified in $smtp_authenticators (@pxref{smtp_authenticators}) defaulting to
an empty list which makes Mutt try all available methods from
most-secure to least-secure.

@node OAUTHBEARER Support, Managing Multiple Accounts, SMTP Support, Optional Features
@section OAUTHBEARER Support

Preliminary OAUTH support for IMAP, POP, and SMTP is provided via
external scripts.

At least for Gmail, you can use the @samp{oauth2.py}
script from Google's gmail-oauth2-tools: @uref{https://github.com/google/gmail-oauth2-tools/blob/master/python/oauth2.py,https://github.com/google/gmail-oauth2-tools/blob/master/python/oauth2.py}

You'll need to get your own oauth client credentials for Gmail here:
@uref{https://console.developers.google.com/apis/credentials,https://console.developers.google.com/apis/credentials}

Then, you'd use @samp{oauth2.py} with
@samp{--generate_oauth2_token} to get a refresh token, and
configure mutt with:

@example

set imap_authenticators="oauthbearer"
set imap_oauth_refresh_command="/path/to/oauth2.py --quiet --user=[email_address]\
    --client_id=[client_id] --client_secret=[client_secret]\
    --refresh_token=[refresh_token]"
@end example

Substitute pop or smtp for imap in the above example to configure for those.

An alternative script is @uref{https://gitlab.com/muttmua/mutt/tree/master/contrib/mutt_oauth2.py,contrib/mutt_oauth2.py} script.  For more details see @uref{https://gitlab.com/muttmua/mutt/tree/master/contrib/mutt_oauth2.py.README,contrib/mutt_oauth2.py.README}.

@menu
* XOAUTH2 Support::
@end menu

@node XOAUTH2 Support, , , OAUTHBEARER Support
@subsection XOAUTH2 Support

Support for the deprecated XOAUTH2 protocol is also available.  To
enable this, add ‘xoauth2’ to the
$imap_authenticators (@pxref{imap_authenticators}),
$pop_authenticators (@pxref{pop_authenticators}), or
$smtp_authenticators (@pxref{smtp_authenticators}) config
variables.  XOAUTH2 uses the same refresh command configuration variables
as OAUTHBEARER:
$imap_oauth_refresh_command (@pxref{imap_oauth_refresh_command}),
$pop_oauth_refresh_command (@pxref{pop_oauth_refresh_command}), and
$smtp_oauth_refresh_command (@pxref{smtp_oauth_refresh_command}).
Those will need to be set to a script to generate the appropriate XOAUTH2
token.

@node Managing Multiple Accounts, Local Caching, OAUTHBEARER Support, Optional Features
@section Managing Multiple Accounts

Usage:

@quotation

@t{account-hook  
regexp
command
}
@end quotation

If you happen to have accounts on multiple IMAP, POP and/or SMTP
servers, you may find managing all the authentication settings
inconvenient and error-prone. The @code{account-hook} (@pxref{Managing Multiple Accounts}) command
may help. This hook works like @code{folder-hook} (@pxref{Setting Variables Based Upon Mailbox}) but is
invoked whenever Mutt needs to access a remote mailbox (including inside
the folder browser), not just when you open the mailbox. This includes
(for example) polling for new mail, storing Fcc messages and saving
messages to a folder. As a consequence, @code{account-hook} (@pxref{Managing Multiple Accounts}) should
only be used to set connection-related settings such as passwords or
tunnel commands but not settings such as sender address or name (because
in general it should be considered unpredictable which @code{account-hook} (@pxref{Managing Multiple Accounts}) was last
used).

Some examples:

@example

account-hook . 'unset imap_user; unset imap_pass; unset tunnel'
account-hook imap://host1/ 'set imap_user=me1 imap_pass=foo'
account-hook imap://host2/ 'set tunnel="ssh host2 /usr/libexec/imapd"'
account-hook smtp://user@@host3/ 'set tunnel="ssh host3 /usr/libexec/smtpd"'
@end example

To manage multiple accounts with, for example, different values of $record (@pxref{record}) or sender addresses, @code{folder-hook} (@pxref{Setting Variables Based Upon Mailbox}) has to be
used together with the @code{mailboxes} (@pxref{Monitoring Incoming Mail}) command.

@noindent
@anchor{Managing multiple accounts}

@strong{Managing multiple accounts}

@example

mailboxes imap://user@@host1/INBOX
folder-hook imap://user@@host1/ 'set folder=imap://host1/ ; set record=+INBOX/Sent'

mailboxes imap://user@@host2/INBOX
folder-hook imap://user@@host2/ 'set folder=imap://host2/ ; set record=+INBOX/Sent'
@end example

In example @ref{Managing multiple accounts} the folders are defined
using @code{mailboxes} (@pxref{Monitoring Incoming Mail}) so
Mutt polls them for new mail. Each @code{folder-hook} (@pxref{Setting Variables Based Upon Mailbox}) triggers
when one mailbox below each IMAP account is opened and sets $folder (@pxref{folder}) to the account's root folder. Next, it
sets $record (@pxref{record}) to the
@emph{INBOX/Sent} folder below the newly set $folder (@pxref{folder}). Please notice that the value the
‘+’ mailbox shortcut (@pxref{Mailbox Shortcuts})
refers to depends on the @emph{current} value of $folder (@pxref{folder}) and therefore has to be set separately
per account. Setting other values like $from (@pxref{from})
or $signature (@pxref{signature}) is analogous to setting
$record (@pxref{record}).

@node Local Caching, Exact Address Generation, Managing Multiple Accounts, Optional Features
@section Local Caching

Mutt contains two types of local caching: @emph{(1)} the
so-called ‘header caching’ and @emph{(2)} the
so-called ‘body caching’ which are both described in this
section.

Header caching is optional as it depends on external libraries, body
caching is always enabled if Mutt is compiled with POP and/or IMAP
support as these use it (body caching requires no external library).

@menu
* Header Caching::
* Body Caching::
* Cache Directories::
* Maintenance::
@end menu

@node Header Caching, Body Caching, , Local Caching
@subsection Header Caching

Mutt provides optional support for caching message headers for the
following types of folders: IMAP, POP, Maildir and MH. Header caching
greatly speeds up opening large folders because for remote folders,
headers usually only need to be downloaded once. For Maildir and MH,
reading the headers from a single file is much faster than looking at
possibly thousands of single files (since Maildir and MH use one file
per message.)

Header caching can be enabled via the configure script and the
@emph{--enable-hcache} option. It's not turned on by
default because external database libraries are required: one of
tokyocabinet, kyotocabinet, lmdb, qdbm, gdbm or bdb must be present.

If enabled, $header_cache (@pxref{header_cache}) can be
used to either point to a file or a directory. If set to point to a
file, one database file for all folders will be used (which may result
in lower performance), but one file per folder if it points to a
directory.

@node Body Caching, Cache Directories, Header Caching, Local Caching
@subsection Body Caching

Both cache methods can be combined using the same directory for storage
(and for IMAP/POP even provide meaningful file names) which simplifies
manual maintenance tasks.

In addition to caching message headers only, Mutt can also cache whole
message bodies. This results in faster display of messages for POP and
IMAP folders because messages usually have to be downloaded only once.

For configuration, the variable $message_cachedir (@pxref{message_cachedir}) must point to a directory. There, Mutt will
create a hierarchy of subdirectories named like the account and mailbox
path the cache is for.

@node Cache Directories, Maintenance, Body Caching, Local Caching
@subsection Cache Directories

For using both, header and body caching, $header_cache (@pxref{header_cache}) and $message_cachedir (@pxref{message_cachedir}) can be safely set
to the same value.

In a header or body cache directory, Mutt creates a directory hierarchy
named like: @samp{proto:user@@hostname} where
@samp{proto} is either ‘pop’ or
‘imap.’ Within there, for each folder, Mutt stores messages
in single files and header caches in files with the
‘.hcache’ extension.  All files can be removed as needed if
the consumed disk space becomes an issue as Mutt will silently fetch
missing items again. Pathnames are always stored in UTF-8 encoding.

For Maildir and MH, the header cache files are named after the MD5
checksum of the path.

@node Maintenance, , Cache Directories, Local Caching
@subsection Maintenance

Mutt does not (yet) support maintenance features for header cache
database files so that files have to be removed in case they grow too
big. It depends on the database library used for header caching whether
disk space freed by removing messages is re-used.

For body caches, Mutt can keep the local cache in sync with the remote
mailbox if the $message_cache_clean (@pxref{message_cache_clean}) variable is
set. Cleaning means to remove messages from the cache which are no
longer present in the mailbox which only happens when other mail clients
or instances of Mutt using a different body cache location delete
messages (Mutt itself removes deleted messages from the cache when
syncing a mailbox). As cleaning can take a noticeable amount of time, it
should not be set in general but only occasionally.

@node Exact Address Generation, Sending Anonymous Messages via Mixmaster, Local Caching, Optional Features
@section Exact Address Generation

Mutt supports the ‘Name <user@@host>’ address syntax
for reading and writing messages, the older ‘user@@host
(Name)’ syntax is only supported when reading messages. The
@emph{--enable-exact-address} switch can be given to
configure to build it with write-support for the latter
syntax. @samp{EXACT_ADDRESS} in the output of @samp{mutt
-v} indicates whether it's supported.

Note: If the full address contains non-ascii characters, or sequences
that require RFC 2047 encoding, Mutt reverts to writing out the
normalized ‘Name <user@@host>’ form, in order to
generate legal output.

@node Sending Anonymous Messages via Mixmaster, Sidebar <1>, Exact Address Generation, Optional Features
@section Sending Anonymous Messages via Mixmaster

You may also have compiled Mutt to co-operate with Mixmaster, an
anonymous remailer.  Mixmaster permits you to send your messages
anonymously using a chain of remailers. Mixmaster support in Mutt is for
mixmaster version 2.04 or later.

To use it, you'll have to obey certain restrictions.  Most important,
you cannot use the @samp{Cc} and @samp{Bcc}
headers.  To tell Mutt to use mixmaster, you have to select a remailer
chain, using the mix function on the compose menu.

The chain selection screen is divided into two parts.  In the (larger)
upper part, you get a list of remailers you may use.  In the lower part,
you see the currently selected chain of remailers.

You can navigate in the chain using the
@samp{<chain-prev>} and
@samp{<chain-next>} functions, which are by default
bound to the left and right arrows and to the @samp{h} and
@samp{l} keys (think vi keyboard bindings).  To insert a
remailer at the current chain position, use the
@samp{<insert>} function.  To append a remailer behind
the current chain position, use @samp{<select-entry>}
or @samp{<append>}.  You can also delete entries from
the chain, using the corresponding function.  Finally, to abandon your
changes, leave the menu, or @samp{<accept>} them
pressing (by default) the @samp{Return} key.

Note that different remailers do have different capabilities, indicated
in the %c entry of the remailer menu lines (see $mix_entry_format (@pxref{mix_entry_format})).  Most important is
the ‘middleman’ capability, indicated by a capital
‘M’: This means that the remailer in question cannot be
used as the final element of a chain, but will only forward messages to
other mixmaster remailers.  For details on the other capabilities,
please have a look at the mixmaster documentation.

@node Sidebar <1>, Compressed Folders Feature, Sending Anonymous Messages via Mixmaster, Optional Features
@section Sidebar

@menu
* Introduction: Introduction <4>.
* Variables::
* Functions::
* Commands: Commands <1>.
* Colors::
* Sort::
* See Also::
@end menu

@node Introduction <4>, Variables, , Sidebar <1>
@subsection Introduction

The Sidebar shows a list of all your mailboxes.  The list can be
turned on and off, it can be themed and the list style can be
configured.

@node Variables, Functions, Introduction <4>, Sidebar <1>
@subsection Variables

@noindent
@anchor{Sidebar Variables}

@strong{Sidebar Variables}

@multitable @columnfractions 0.333333333333333 0.333333333333333 0.333333333333333
@item
Name@tab Type@tab Default
@item
@samp{sidebar_delim_chars}@tab string@tab @samp{/.}
@item
@samp{sidebar_divider_char}@tab string@tab @samp{|}
@item
@samp{sidebar_folder_indent}@tab boolean@tab @samp{no}
@item
@samp{sidebar_format}@tab string@tab @samp{%B%*  %n}
@item
@samp{sidebar_indent_string}@tab string@tab @samp{  } (two spaces)
@item
@samp{sidebar_new_mail_only}@tab boolean@tab @samp{no}
@item
@samp{sidebar_next_new_wrap}@tab boolean@tab @samp{no}
@item
@samp{sidebar_short_path}@tab boolean@tab @samp{no}
@item
@samp{sidebar_sort_method}@tab enum@tab @samp{unsorted}
@item
@samp{sidebar_visible}@tab boolean@tab @samp{no}
@item
@samp{sidebar_width}@tab number@tab @samp{20}
@end multitable

@node Functions, Commands <1>, Variables, Sidebar <1>
@subsection Functions

Sidebar adds the following functions to Mutt.
By default, none of them are bound to keys.

@noindent
@anchor{Sidebar Functions}

@strong{Sidebar Functions}

@multitable @columnfractions 0.333333333333333 0.333333333333333 0.333333333333333
@item
Menus@tab Function@tab Description
@item
index,pager@tab @samp{<sidebar-next>}@tab Move the highlight to next mailbox
@item
index,pager@tab @samp{<sidebar-next-new>}@tab Move the highlight to next mailbox with new mail
@item
index,pager@tab @samp{<sidebar-open>}@tab Open highlighted mailbox
@item
index,pager@tab @samp{<sidebar-page-down>}@tab Scroll the Sidebar down 1 page
@item
index,pager@tab @samp{<sidebar-page-up>}@tab Scroll the Sidebar up 1 page
@item
index,pager@tab @samp{<sidebar-prev>}@tab Move the highlight to previous mailbox
@item
index,pager@tab @samp{<sidebar-prev-new>}@tab Move the highlight to previous mailbox with new mail
@item
index,pager@tab @samp{<sidebar-toggle-visible>}@tab Make the Sidebar (in)visible
@end multitable

@node Commands <1>, Colors, Functions, Sidebar <1>
@subsection Commands

@quotation

@t{sidebar_whitelist  
mailbox
[
mailbox
]… unsidebar_whitelist @{
*
| 
mailbox
…@}}
@end quotation

This command specifies mailboxes that will always be displayed
in the sidebar, even if $sidebar_new_mail_only (@pxref{sidebar_new_mail_only})
is set and the mailbox does not contain new mail.

The ‘unsidebar_whitelist’ command is used to remove a mailbox from
the list of whitelisted mailboxes. Use ‘unsidebar_whitelist *’
to remove all mailboxes.

@node Colors, Sort, Commands <1>, Sidebar <1>
@subsection Colors

@noindent
@anchor{Sidebar Colors}

@strong{Sidebar Colors}

@multitable @columnfractions 0.333333333333333 0.333333333333333 0.333333333333333
@item
Name@tab Default Color@tab Description
@item
@samp{sidebar_divider}@tab default@tab The dividing line between the Sidebar and the Index/Pager panels
@item
@samp{sidebar_flagged}@tab default@tab Mailboxes containing flagged mail
@item
@samp{sidebar_highlight}@tab underline@tab Cursor to select a mailbox
@item
@samp{sidebar_indicator}@tab mutt @samp{indicator}@tab The mailbox open in the Index panel
@item
@samp{sidebar_new}@tab default@tab Mailboxes containing new mail
@item
@samp{sidebar_spoolfile}@tab default@tab Mailbox that receives incoming mail
@end multitable

If the @samp{sidebar_indicator} color isn't set, then the default Mutt
indicator color will be used (the color used in the index panel).

@node Sort, See Also, Colors, Sidebar <1>
@subsection Sort

@noindent
@anchor{Sidebar Sort}

@strong{Sidebar Sort}

@multitable @columnfractions 0.5 0.5
@item
Sort@tab Description
@item
@samp{alpha}@tab Alphabetically by path or label
@item
@samp{count}@tab Total number of messages
@item
@samp{flagged}@tab Number of flagged messages
@item
@samp{name}@tab Alphabetically by path or label
@item
@samp{new}@tab Number of unread messages
@item
@samp{path}@tab Alphabetically by path (ignores label)
@item
@samp{unread}@tab Number of unread messages
@item
@samp{unsorted}@tab Do not resort the paths
@end multitable

@node See Also, , Sort, Sidebar <1>
@subsection See Also

@itemize 

@item
Regular Expressions (@pxref{Regular Expressions})

@item
Patterns (@pxref{Patterns; Searching; Limiting and Tagging})

@item
Color command (@pxref{Using Color and Mono Video Attributes})
@end itemize

@node Compressed Folders Feature, Autocrypt, Sidebar <1>, Optional Features
@section Compressed Folders Feature

@menu
* Introduction: Introduction <5>.
* Commands: Commands <2>.
@end menu

@node Introduction <5>, Commands <2>, , Compressed Folders Feature
@subsection Introduction

The Compressed Folder patch allows Mutt to read mailbox files that are
compressed.  But it isn't limited to compressed files.  It works well
with encrypted files, too.  In fact, if you can create a program/script
to convert to and from your format, then Mutt can read it.

The patch adds three hooks to Mutt: @samp{open-hook},
@samp{close-hook} and @samp{append-hook}.  They
define commands to: uncompress a file; compress a file; append
messages to an already compressed file.

There are some examples of both compressed and encrypted files,
later.  For now, the documentation will just concentrate on
compressed files.

@node Commands <2>, , Introduction <5>, Compressed Folders Feature
@subsection Commands

@quotation

@t{open-hook  
pattern
shell-command
close-hook  
pattern
shell-command
append-hook  
pattern
shell-command
}
@end quotation

The shell-command must contain two placeholders for filenames:
@samp{%f} and @samp{%t}.  These represent
‘from’ and ‘to’ filenames.  These placeholders
should be placed inside single-quotes to prevent unintended shell
expansions.

If you need the exact string ‘%f’ or ‘%t’ in your
command, simply double up the ‘%’ character, e.g.
‘%%f’ or ‘%%t’.

@noindent
@anchor{Not all Hooks are Required}

@strong{Not all Hooks are Required}

@multitable @columnfractions 0.2 0.2 0.2 0.2 0.2
@item
Open@tab Close@tab Append@tab Effect@tab Useful if
@item
Open@tab -@tab -@tab Folder is readonly@tab The folder is just a backup
@item
Open@tab Close@tab -@tab Folder is read/write, but the entire folder must be
written if anything is changed@tab Your compression format doesn't support appending
@item
Open@tab Close@tab Append@tab Folder is read/write and emails can be efficiently added
to the end@tab Your compression format supports appending
@item
Open@tab -@tab Append@tab Folder is readonly, but can be appended to@tab You want to store emails, but never change them
@end multitable

@quotation

@strong{Note}

The command:

@itemize 

@item
should return a non-zero exit status on failure

@item
should not delete any files
@end itemize
@end quotation

@menu
* Read from compressed mailbox::
* Write to a compressed mailbox::
* Append to a compressed mailbox::
* Empty Files::
* Security::
@end menu

@node Read from compressed mailbox, Write to a compressed mailbox, , Commands <2>
@subsubsection Read from compressed mailbox

@example
open-hook regexp shell-command
@end example

If Mutt is unable to open a file, it then looks for
@samp{open-hook} that matches the filename.

If your compression program doesn't have a well-defined extension,
then you can use @samp{.} as the regexp.

@noindent
@anchor{Example of open-hook}

@strong{Example of open-hook}

@example
open-hook '\.gz$' "gzip -cd '%f' > '%t'"
@end example

@itemize 

@item
Mutt finds a file, ‘example.gz’,
that it can't read

@item
Mutt has an @samp{open-hook}
whose regexp matches the filename:
@samp{\.gz$}

@item
Mutt uses the command @samp{gzip -cd}
to create a temporary file that it @emph{can}
read
@end itemize

@node Write to a compressed mailbox, Append to a compressed mailbox, Read from compressed mailbox, Commands <2>
@subsubsection Write to a compressed mailbox

@example
close-hook regexp shell-command
@end example

When Mutt has finished with a compressed mail folder, it will look
for a matching @samp{close-hook} to recompress the file.
This hook is optional (@pxref{Not all Hooks are Required}).

@quotation

@strong{Note}

If the folder has not been modified, the
@samp{close-hook} will not be called.
@end quotation

@noindent
@anchor{Example of close-hook}

@strong{Example of close-hook}

@example
close-hook '\.gz$' "gzip -c '%t' > '%f'"
@end example

@itemize 

@item
Mutt has finished with a folder, ‘example.gz’,
that it opened with @samp{open-hook}

@item
The folder has been modified

@item
Mutt has a @samp{close-hook} whose regexp
matches the filename: @samp{\.gz$}

@item
Mutt uses the command @samp{gzip -c}
to create a new compressed file
@end itemize

@node Append to a compressed mailbox, Empty Files, Write to a compressed mailbox, Commands <2>
@subsubsection Append to a compressed mailbox

@example
append-hook regexp shell-command
@end example

When Mutt wants to append an email to a compressed mail folder, it
will look for a matching @samp{append-hook}.
This hook is optional (@pxref{Not all Hooks are Required}).

Using the @samp{append-hook} will save time, but
Mutt won't be able to determine the type of the mail folder
inside the compressed file.

Mutt will @emph{assume} the type to be that of
the @samp{$mbox_type} variable.  Mutt also uses
this type for temporary files.

Mutt will only use the @samp{append-hook} for existing files.
The @samp{close-hook} will be used for empty, or missing files.

@quotation

@strong{Note}

If your command writes to stdout, it is vital that you use
@samp{>>} in the ‘append-hook’.
If not, data will be lost.
@end quotation

@noindent
@anchor{Example of append-hook}

@strong{Example of append-hook}

@example
append-hook '\.gz$' "gzip -c '%t' >> '%f'"
@end example

@itemize 

@item
Mutt wants to append an email to a folder, ‘example.gz’,
that it opened with @samp{open-hook}

@item
Mutt has an @samp{append-hook} whose regexp matches
the filename: @samp{\.gz$}

@item
Mutt knows the mailbox type from the @samp{$mbox}
variable

@item
Mutt uses the command @samp{gzip -c}
to append to an existing compressed file
@end itemize

@node Empty Files, Security, Append to a compressed mailbox, Commands <2>
@subsubsection Empty Files

Mutt assumes that an empty file is not compressed.  In this
situation, unset $save_empty (@pxref{save_empty}), so
that the compressed file will be removed if you delete all of the
messages.

@node Security, , Empty Files, Commands <2>
@subsubsection Security

Encrypted files are decrypted into temporary files which are
stored in the $tmpdir (@pxref{tmpdir}) directory.
This could be a security risk.

@node Autocrypt, , Compressed Folders Feature, Optional Features
@section Autocrypt

Mutt can be compiled with Autocrypt support by running
@samp{configure} with the
@samp{--enable-autocrypt} flag.  Autocrypt provides
easy to use, passive protection against data collection.  Keys are
distributed via an @samp{Autocrypt:} header added to
emails.  It does @emph{not} protect against active
adversaries, and so should not be considered a substitute for
normal encryption via your keyring, using key signing and the web
of trust to verify identities.  With an understanding of these
limitations, Autocrypt still provides an easy way to minimize
cleartext emails sent between common correspondents, without
having to explicitly exchange keys.  More information can be found
at @uref{https://autocrypt.org/,https://autocrypt.org/}.

@menu
* Requirements::
* First Run::
* Compose Menu: Compose Menu <1>.
* Account Management::
* Alternative Key and Keyring Strategies::
@end menu

@node Requirements, First Run, , Autocrypt
@subsection Requirements

Autocrypt requires support for ECC cryptography, and Mutt by
default will generate ECC keys.  Therefore GnuPG 2.1 or greater
is required.  Additionally, Mutt's Autocrypt implementation uses
GPGME and requires at least version 1.8.0.

Account and peer information is stored in a sqlite3 database, and
so Mutt must be configured with the @samp{--with-sqlite3}
flag when autocrypt is enabled.

It is highly recommended Mutt be configured
@samp{--with-idn} or
@samp{--with-idn2} so that Autocrypt can properly
deal with international domain names.

While Mutt uses GPGME for Autocrypt, normal keyring operations
can still be performed via classic mode (i.e. with $crypt_use_gpgme (@pxref{crypt_use_gpgme}) unset).
However, to avoid unnecessary prompts, it is recommended gpg not
be configured in @samp{loopback pinentry} mode, and
that $pgp_use_gpg_agent (@pxref{pgp_use_gpg_agent})
remain set (the default).

@node First Run, Compose Menu <1>, Requirements, Autocrypt
@subsection First Run

To enable Autocrypt, set $autocrypt (@pxref{autocrypt}), and if desired change the
value of $autocrypt_dir (@pxref{autocrypt_dir}) in
your muttrc.  The first time Mutt is run after that, you will be
prompted to create $autocrypt_dir (@pxref{autocrypt_dir}).  Mutt will then
automatically create an sqlite3 database and GPG keyring in that
directory.  Note since these files should be considered private,
Mutt will create this directory with mode
@samp{700}.  If you create the directory manually,
you should do the same.

Mutt recommends keeping the $autocrypt_dir (@pxref{autocrypt_dir}) directory set
differently from your GnuPG keyring directory
(e.g. @samp{~/.gnupg}).  Keys are automatically
imported into the keyring from @samp{Autocrypt:}
headers.  Compared to standard ‘web of trust’ keys,
Autocrypt keys are somewhat ephemeral, and the autocrypt
database is used to track when keys change or fall out of use.
Having these keys mixed in with your normal keyring will make it
more difficult to use features such as $crypt_opportunistic_encrypt (@pxref{crypt_opportunistic_encrypt})
and Autocrypt at the same time.

The $autocrypt_dir (@pxref{autocrypt_dir}) variable
is not designed to be changed while Mutt is running.  The
database is created (if necessary) and connected to during
startup.  Changing the variable can result in a situation where
Mutt is looking in one place for the database and a different
place for the GPG keyring, resulting in strange behavior.

Once the directory, keyring, and database are created, Mutt will
ask whether you would like to create an account.  In order to
use Autocrypt, each sending address needs an account.  As a
convenience you can create an account during the first run.  If
you would like to add additional accounts later, this can be
done via the @samp{<autocrypt-acct-menu>}
function in the index, by default bound to @samp{A}.

Account creation will first ask you for an email address.  Next,
it will ask whether you want to create a new key or select an
existing key.  (Note key selection takes place from the $autocrypt_dir (@pxref{autocrypt_dir}) keyring, which
will normally be empty during first run).  Finally, it will ask
whether this address should prefer encryption or not.  Autocrypt
1.1 allows automatically enabling encryption if
@emph{both} sender and receiver have set
‘prefer encryption’.  Otherwise, you will need to
manually enable autocrypt encryption in the compose menu.  For
more details, see the compose menu section below.

After optionally creating an account, Mutt will prompt you to
scan mailboxes for Autocrypt headers.  This step occurs because
header cached messages are not re-scanned for Autocrypt headers.
Scanning during this step will temporarily disable the header
cache while opening each mailbox.  If you wish to do this
manually later, you can simulate the same thing by unsetting
$header_cache (@pxref{header_cache}) and opening a
mailbox.

A final technical note: the first run process takes place
between reading the muttrc and opening the initial mailbox.
Some muttrc files will push (@pxref{Adding Key Sequences to the Keyboard Buffer}) macros
to be run after opening the mailbox.  To prevent this from
interfering with the first run prompts, Mutt disables all macros
during the first run.

@node Compose Menu <1>, Account Management, First Run, Autocrypt
@subsection Compose Menu

When enabled, Autocrypt will add a line to the compose menu with
two fields: @samp{Autocrypt:} and
@samp{Recommendation:}.

The @samp{Autocrypt:} field shows whether the
message will be encrypted by Autocrypt when sent.  It has two
values: @samp{Encrypt} and @samp{Off}.
@samp{Encrypt} can be enabled using the
@samp{<autocrypt-menu>} function, by default
bound to @samp{o}.

The @samp{Recommendation:} field shows the output of
the Autocrypt recommendation engine.  This can have one of five
values:

@itemize 

@item
@samp{Off} means the engine is disabled.  This
can happen if the From address doesn't have an autocrypt
account, or if the account has been manually disabled.

@item
@samp{No} means one or more recipients are
missing an autocrypt key, or the key found is unusable
(i.e. expired, revoked, disabled, invalid, or not usable for
encryption.)

@item
@samp{Discouraged} means a key was found for
every recipient, but the engine is not confident the message
will be decryptable by the recipient.  This can happen if
the key hasn't been used recently (compared to their last
seen email).

It can also happen if the key wasn't seen first-hand from
the sender.  Autocrypt has a feature where recipient keys
can be included in group-encrypted emails.  This allows you
to reply to a conversation where you don't have a key
first-hand from one of the other recipients.  However, those
keys are not trusted as much as from first-hand emails, so
the engine warns you with a @samp{Discouraged}
status.

@item
@samp{Available} means a key was found for every
recipient, and the engine believes all keys are recent and
seen from the recipient first hand.  However, either you or
one of the recipients chose not to specify ‘prefer
encryption’.

@item
@samp{Yes} is the same as
@samp{Available}, with the addition that you and
all recipients have specified ‘prefer
encryption’.  This value will automatically enable
encryption, unless you have manually switched it off or
enabled regular encryption or signing via the
@samp{<pgp-menu>}.
@end itemize

As mentioned above the @samp{<autocrypt-menu>}
function, by default bound to @samp{o}, can be used
to change the @samp{Encrypt:} field value.
@samp{(e)ncrypt} will toggle encryption on.
@samp{(c)lear} will toggle encryption off.  If
either of these are chosen, the field will remain in that state
despite what the @samp{Recommendation:} field shows.
Lastly, @samp{(a)utomatic} will set the value based
on the recommendation engine's output.

Autocrypt encryption defers to normal encryption or signing.
@emph{Anything} that enables normal encryption or
signing will cause autocrypt encryption to turn off.  The only
exception is when replying to an autocrypt-encrypted email
(i.e. an email decrypted from the $autocrypt_dir (@pxref{autocrypt_dir}) keyring).  Then,
if $autocrypt_reply (@pxref{autocrypt_reply}) is
@emph{set}, autocrypt mode will be forced on,
overriding the settings
$crypt_autosign (@pxref{crypt_autosign}),
$crypt_autoencrypt (@pxref{crypt_autoencrypt}),
$crypt_replyencrypt (@pxref{crypt_replyencrypt}),
$crypt_replysign (@pxref{crypt_replysign}),
$crypt_replysignencrypted (@pxref{crypt_replysignencrypted}), and
$crypt_opportunistic_encrypt (@pxref{crypt_opportunistic_encrypt}).

When postponing a message, autocrypt will respect $postpone_encrypt (@pxref{postpone_encrypt}), but will
use the autocrypt account key to encrypt the message.  Be sure
to set $postpone_encrypt (@pxref{postpone_encrypt})
to ensure postponed messages marked for autocrypt encryption are
encrypted.

@node Account Management, Alternative Key and Keyring Strategies, Compose Menu <1>, Autocrypt
@subsection Account Management

The Autocrypt Account Menu is available from the index via
@samp{<autocrypt-acct-menu>}, by default bound
to @samp{A}.  See Autocrypt Account Menu (@pxref{Autocrypt Account Menu}) for the
list of functions and their default keybindings.

In this menu, you can create new accounts, delete accounts,
toggle an account active/inactive, and toggle the ‘prefer
encryption’ flag for an account.

Deleting an account only removes the account from the database.
The GPG key is kept, to ensure you still have the ability to
read past encrypted emails.

The Autocrypt 1.1 ‘Setup Message’ feature is not
available yet, but will be added in the future.

@node Alternative Key and Keyring Strategies, , Account Management, Autocrypt
@subsection Alternative Key and Keyring Strategies

Mutt by default partitions Autocrypt from normal keyring
encryption/signing.  It does this by using a separate GPG
keyring (in $autocrypt_dir (@pxref{autocrypt_dir}))
and creating a new ECC key in that keyring for accounts.  There
are good reasons for doing this by default.  It keeps random
keys found inside email headers out of your normal keyring.  ECC
keys are compact and better suited for email headers.  Autocrypt
key selection is completely different from ‘web of
trust’ key selection, based on last-seen rules as opposed
to trust and validity.  It also allows Mutt to distinguish
Autocrypt encrypted emails from regular encrypted emails, and
set the mode appropriately when replying to each type of email.

Still, some users may want to use an existing key from their
normal keyring for Autocrypt too.  There are two ways this can
be accomplished.  The @emph{recommended} way is to
set $autocrypt_dir (@pxref{autocrypt_dir}) to your
normal keyring directory (e.g. @samp{~/.gnupg}).
During account creation, choosing ‘(s)elect existing GPG
key’ will then list and allow selecting your existing key
for the new account.

An alternative is to copy your key over to the Autocrypt keyring,
but there is a severe downside.  Mutt @emph{first}
tries to decrypt messages using the Autocrypt keyring, and if
that fails tries the normal keyring second.  This means all
encrypted emails to that key will be decrypted, and have
signatures verified from, the Autocrypt keyring.  Keys signatures
and web of trust from your normal keyring will no longer show up
in signatures when decrypting.

For that reason, if you want to use an existing key from your
normal keyring, it is recommended to just set $autocrypt_dir (@pxref{autocrypt_dir}) to
@samp{~/.gnupg}.  This allows ‘web of
trust’ to show an appropriate signature message for
verified messages.  Autocrypt header keys will be imported into
your keyring, but if you don't want them mixed you should
strongly consider using a separate autocrypt key and keyring
instead.

Both methods have a couple additional caveats:

@itemize 

@item
Replying to an Autocrypt decrypted message by default forces
Autocrypt mode on.  By sharing the same key, all replies
will then start in Autocrypt mode, even if a message wasn't
sent by one of your Autocrypt peers.  $autocrypt_reply (@pxref{autocrypt_reply}) can be
@emph{unset} to allow manual control of the
mode when replying.

@item
When Mutt creates an account from a GPG key, it exports the
public key, base64 encodes it, and stores that value in the
sqlite3 database.  The value is then used in the Autocrypt
header added to outgoing emails.  The ECC keys Mutt creates
don't change, but if you use external keys that expire, when
you resign to extend the expiration you will need to
recreate the Autocrypt account using the account menu (@pxref{Account Management}).
Otherwise the Autocrypt header will contain the old expired
exported keydata.
@end itemize

@node Security Considerations, Performance Tuning, Optional Features, Top
@chapter Security Considerations

First of all, Mutt contains no security holes included by intention but
may contain unknown security holes. As a consequence, please run Mutt
only with as few permissions as possible. Especially, do not run Mutt as
the super user.

When configuring Mutt, there're some points to note about secure setups
so please read this chapter carefully.

@menu
* Passwords::
* Temporary Files::
* Information Leaks::
* External Applications::
@end menu

@node Passwords, Temporary Files, , Security Considerations
@section Passwords

Although Mutt can be told the various passwords for accounts, please
never store passwords in configuration files. Besides the fact that the
system's operator can always read them, you could forget to mask it out
when reporting a bug or asking for help via a mailing list. Even worse,
your mail including your password could be archived by internet search
engines, mail-to-news gateways etc. It may already be too late before
you notice your mistake.

@node Temporary Files, Information Leaks, Passwords, Security Considerations
@section Temporary Files

Mutt uses many temporary files for viewing messages, verifying digital
signatures, etc. As long as being used, these files are visible by other
users and maybe even readable in case of misconfiguration.  Also, a
different location for these files may be desired which can be changed
via the $tmpdir (@pxref{tmpdir}) variable.

@node Information Leaks, External Applications, Temporary Files, Security Considerations
@section Information Leaks

@menu
* mailto;-style Links::
@end menu

@node mailto;-style Links, , , Information Leaks
@subsection mailto:-style Links

As Mutt be can be set up to be the mail client to handle
@samp{mailto:} style links in websites, there're security
considerations, too. Arbitrary header fields can be embedded in these
links which could override existing header fields or attach arbitrary
files using the Attach:
pseudoheader (@pxref{Attach; Pseudo Header}). This may be problematic if the $edit-headers (@pxref{edit_headers}) variable is
@emph{unset}, i.e. the user doesn't want to see header
fields while editing the message and doesn't pay enough attention to the
compose menu's listing of attachments.

For example, following a link like

@example

mailto:joe@@host?Attach=~/.gnupg/secring.gpg
@end example

will send out the user's private gnupg keyring to
@samp{joe@@host} if the user doesn't follow the information
on screen carefully enough.

To prevent these issues, Mutt by default only accepts the
@samp{Subject} and @samp{Body} headers.
Allowed headers can be adjusted with the
@code{mailto_allow} (@pxref{Control allowed header fields in a mailto; URL}) and
@code{unmailto_allow} (@pxref{Control allowed header fields in a mailto; URL}) commands.

@node External Applications, , Information Leaks, Security Considerations
@section External Applications

Mutt in many places has to rely on external applications or for
convenience supports mechanisms involving external applications.

One of these is the @samp{mailcap} mechanism as defined by
RfC1524. Details about a secure use of the mailcap mechanisms is given
in @ref{Secure Use of Mailcap}.

Besides the mailcap mechanism, Mutt uses a number of other external
utilities for operation, for example to provide crypto support, in
backtick expansion in configuration files or format string filters.  The
same security considerations apply for these as for tools involved via
mailcap.

@node Performance Tuning, Reference, Security Considerations, Top
@chapter Performance Tuning

@menu
* Reading and Writing Mailboxes::
* Reading Messages from Remote Folders::
* Searching and Limiting::
@end menu

@node Reading and Writing Mailboxes, Reading Messages from Remote Folders, , Performance Tuning
@section Reading and Writing Mailboxes

Mutt's performance when reading mailboxes can be improved in two ways:

@enumerate 

@item
For remote folders (IMAP and POP) as well as folders using one-file-per
message storage (Maildir and MH), Mutt's performance can be greatly
improved using header caching (@pxref{Header Caching}).
using a single database per folder.

@item
Mutt provides the $read_inc (@pxref{read_inc}) and $write_inc (@pxref{write_inc}) variables to specify at which rate
to update progress counters. If these values are too low, Mutt may spend
more time on updating the progress counter than it spends on actually
reading/writing folders.

For example, when opening a maildir folder with a few thousand messages,
the default value for $read_inc (@pxref{read_inc}) may be
too low. It can be tuned on a folder-basis using @code{folder-hook}s (@pxref{Setting Variables Based Upon Mailbox}):

@example

# use very high $read_inc to speed up reading hcache'd maildirs
folder-hook . 'set read_inc=1000'
# use lower value for reading slower remote IMAP folders
folder-hook ^imap 'set read_inc=100'
# use even lower value for reading even slower remote POP folders
folder-hook ^pop 'set read_inc=1'
@end example
@end enumerate

These settings work on a per-message basis. However, as messages may
greatly differ in size and certain operations are much faster than
others, even per-folder settings of the increment variables may not be
desirable as they produce either too few or too much progress updates.
Thus, Mutt allows to limit the number of progress updates per second
it'll actually send to the terminal using the $time_inc (@pxref{time_inc}) variable.

@node Reading Messages from Remote Folders, Searching and Limiting, Reading and Writing Mailboxes, Performance Tuning
@section Reading Messages from Remote Folders

Reading messages from remote folders such as IMAP an POP can be slow
especially for large mailboxes since Mutt only caches a very limited
number of recently viewed messages (usually 10) per session (so that it
will be gone for the next session.)

To improve performance and permanently cache whole messages and
headers, please refer to body
caching (@pxref{Body Caching}) and header
caching (@pxref{Header Caching}) for details.

Additionally, it may be worth trying some of Mutt's experimental
features.  $imap_qresync (@pxref{imap_qresync}) (which
requires header caching) can provide a huge speed boost opening
mailboxes if your IMAP server supports it.  $imap_deflate (@pxref{imap_deflate}) enables compression, which
can also noticeably reduce download time for large mailboxes and
messages.

@node Searching and Limiting, , Reading Messages from Remote Folders, Performance Tuning
@section Searching and Limiting

When searching mailboxes either via a search or a limit action, for some
patterns Mutt distinguishes between regular expression and string
searches. For regular expressions, patterns are prefixed with
‘~’ and with ‘=’ for string searches.

Even though a regular expression search is fast, it's several times
slower than a pure string search which is noticeable especially on large
folders. As a consequence, a string search should be used instead of a
regular expression search if the user already knows enough about the
search pattern.

For example, when limiting a large folder to all messages sent to or by
an author, it's much faster to search for the initial part of an e-mail
address via @samp{=Luser@@} instead of
@samp{~Luser@@}. This is especially true for searching
message bodies since a larger amount of input has to be searched.

As for regular expressions, a lower case string search pattern makes
Mutt perform a case-insensitive search except for IMAP (because for IMAP
Mutt performs server-side searches which don't support
case-insensitivity).

@node Reference, Miscellany <1>, Performance Tuning, Top
@chapter Reference

@menu
* Command-Line Options::
* Configuration Commands::
* Configuration Variables::
* Functions: Functions <1>.
@end menu

@node Command-Line Options, Configuration Commands, , Reference
@section Command-Line Options

Running @samp{mutt} with no arguments will make Mutt attempt
to read your spool mailbox.  However, it is possible to read other
mailboxes and to send messages from the command line as well.

@noindent
@anchor{Command line options}

@strong{Command line options}

@multitable @columnfractions 0.5 0.5
@item
Option@tab Description
@item
-A@tab expand an alias
@item
-a@tab attach a file to a message
@item
-b@tab specify a blind carbon-copy (BCC) address
@item
-c@tab specify a carbon-copy (Cc) address
@item
-d@tab log debugging output to ~/.muttdebug0 if mutt was compiled with +DEBUG; it can range from 1-5 and affects verbosity (a value of 2 is recommended)
@item
-D@tab print the value of all Mutt variables to stdout
@item
-E@tab edit the draft (-H) or include (-i) file
@item
-e@tab specify a config command to be run after initialization files are read
@item
-f@tab specify a mailbox to load
@item
-F@tab specify an alternate file to read initialization commands
@item
-h@tab print help on command line options
@item
-H@tab specify a draft file from which to read a header and body
@item
-i@tab specify a file to include in a message composition
@item
-m@tab specify a default mailbox type
@item
-n@tab do not read the system Muttrc
@item
-p@tab recall a postponed message
@item
-Q@tab query a configuration variable
@item
-R@tab open mailbox in read-only mode
@item
-s@tab specify a subject (enclose in quotes if it contains spaces)
@item
-v@tab show version number and compile-time definitions
@item
-x@tab simulate the mailx(1) compose mode
@item
-y@tab show a menu containing the files specified by the @code{mailboxes} command
@item
-z@tab exit immediately if there are no messages in the mailbox
@item
-Z@tab open the first folder with new message, exit immediately if none
@end multitable

To read messages in a mailbox

@quotation

@t{mutt [-nz] [-F
muttrc
] [-m
type
] [-f
mailbox
]}
@end quotation

To compose a new message

@quotation

@t{mutt [-En] [-F
muttrc
] [-c
address
] [-Hi
filename
] [-s
subject
] [
-a
file
[]…
--
]  
address
| 
mailto_url
…}
@end quotation

Mutt also supports a ‘batch’ mode to send prepared
messages.  Simply redirect input from the file you wish to send.  For
example,

@example

mutt -s "data set for run #2" professor@@bigschool.edu < ~/run2.dat
@end example

will send a message to
@samp{<professor@@bigschool.edu>} with a subject of
‘data set for run #2’.  In the body of the message will be
the contents of the file ‘~/run2.dat’.

An include file passed with @samp{-i} will be used as the
body of the message.  When combined with @samp{-E}, the
include file will be directly edited during message composition.  The
file will be modified regardless of whether the message is sent or
aborted.

A draft file passed with @samp{-H} will be used as the
initial header and body for the message.  Multipart messages can be
used as a draft file.  When combined with @samp{-E}, the
draft file will be updated to the final state of the message after
composition, regardless of whether the message is sent, aborted, or
even postponed.  Note that if the message is sent encrypted or signed,
the draft file will be saved that way too.

All files passed with @samp{-a} @emph{file}
will be attached as a MIME part to the message. To attach a single or
several files, use ‘--’ to separate files and recipient
addresses:

@example

mutt -a image.png -- some@@one.org
@end example

or

@example

mutt -a *.png -- some@@one.org
@end example

@quotation

@strong{Note}

The @samp{-a} option must be last in the option list.
@end quotation

In addition to accepting a list of email addresses, Mutt also accepts a URL with
the @samp{mailto:} schema as specified in RFC2368.  This is useful
when configuring a web browser to launch Mutt when clicking on mailto links.

@example

mutt mailto:some@@one.org?subject=test&cc=other@@one.org
@end example

@node Configuration Commands, Configuration Variables, Command-Line Options, Reference
@section Configuration Commands

The following are the commands understood by Mutt:

@itemize 

@item
@quotation

@t{account-hook  
regexp
command
}
@end quotation

@item
@quotation

@t{alias [
-group
name
]…  
key
address
[
address
]… unalias [
-group
name
]… @{
*
| 
key
…@}}
@end quotation

@item
@quotation

@t{alternates [
-group
name
]…  
regexp
[
regexp
]… unalternates [
-group
name
]… @{
*
| 
regexp
…@}}
@end quotation

@item
@quotation

@t{alternative_order  
mimetype
[
mimetype
]… unalternative_order @{
*
| 
mimetype
…@}}
@end quotation

@item
@quotation

@t{attachments  
@{ + | - @}disposition
mime-type
unattachments  
@{ + | - @}disposition
mime-type
attachments  ?  unattachments  * }
@end quotation

@item
@quotation

@t{auto_view  
mimetype
[
mimetype
]… unauto_view @{
*
| 
mimetype
…@}}
@end quotation

@item
@quotation

@t{bind  
map
key
function
}
@end quotation

@item
@quotation

@t{cd  
directory
}
@end quotation

@item
@quotation

@t{charset-hook  
alias
charset
}
@end quotation

@item
@quotation

@t{iconv-hook  
charset
local-charset
}
@end quotation

@item
@quotation

@t{color  
object
[
attribute
]…  
foreground
background
color @{
header
| 
body
@} [
attribute
]…  
foreground
background
regexp
color  
index
[
attribute
]…  
foreground
background
pattern
color  
compose
composeobject
[
attribute
]…  
foreground
background
uncolor @{
index
| 
header
| 
body
@} @{
*
| 
pattern
…@}}
@end quotation

@item
@quotation

@t{crypt-hook  
regexp
keyid
}
@end quotation

@item
@quotation

@t{echo  
message
}
@end quotation

@item
@quotation

@t{exec  
function
[
function
]…}
@end quotation

@item
@quotation

@t{fcc-hook  
[!]pattern
mailbox
}
@end quotation

@item
@quotation

@t{fcc-save-hook  
[!]pattern
mailbox
}
@end quotation

@item
@quotation

@t{folder-hook  
[!]regexp
command
}
@end quotation

@item
@quotation

@t{group [
-group
name
]… @{
-rx
expr
… | 
-addr
expr
…@} ungroup [
-group
name
]… @{
*
| 
-rx
expr
… | 
-addr
expr
…@}}
@end quotation

@item
@quotation

@t{hdr_order  
header
[
header
]… unhdr_order @{
*
| 
header
…@}}
@end quotation

@item
@quotation

@t{ignore  
pattern
[
pattern
]… unignore @{
*
| 
pattern
…@}}
@end quotation

@item
@quotation

@t{index-format-hook  
name
[!]pattern
format-string
}
@end quotation

@item
@quotation

@t{lists [
-group
name
]  
regexp
[
regexp
]… unlists [
-group
name
]… @{
*
| 
regexp
…@}}
@end quotation

@item
@quotation

@t{macro  
menu
key
sequence
[
description
]}
@end quotation

@item
@quotation

@t{mailboxes [
[
-poll
| 
-nopoll
]
[
-label
label
| 
-nolabel
]
mailbox
] []… unmailboxes @{
*
| 
mailbox
…@}}
@end quotation

@item
@quotation

@t{mailto_allow @{
*
| 
header-field
…@} unmailto_allow @{
*
| 
header-field
…@}}
@end quotation

@item
@quotation

@t{mbox-hook  
[!]regexp
mailbox
}
@end quotation

@item
@quotation

@t{message-hook  
[!]pattern
command
}
@end quotation

@item
@quotation

@t{mime_lookup  
mimetype
[
mimetype
]… unmime_lookup @{
*
| 
mimetype
…@}}
@end quotation

@item
@quotation

@t{mono  
object
attribute
mono @{
header
| 
body
@}  
attribute
regexp
mono  
index
attribute
pattern
mono  
compose
composeobject
attribute
unmono @{
index
| 
header
| 
body
@} @{
*
| 
pattern
…@}}
@end quotation

@item
@quotation

@t{my_hdr  
string
unmy_hdr @{
*
| 
field
…@}}
@end quotation

@item
@quotation

@t{push  
string
}
@end quotation

@item
@quotation

@t{reply-hook  
[!]pattern
command
}
@end quotation

@item
@quotation

@t{run  
MuttLisp
}
@end quotation

@item
@quotation

@t{save-hook  
[!]pattern
mailbox
}
@end quotation

@item
@quotation

@t{score  
pattern
value
unscore @{
*
| 
pattern
…@}}
@end quotation

@item
@quotation

@t{send-hook  
[!]pattern
command
}
@end quotation

@item
@quotation

@t{send2-hook  
[!]pattern
command
}
@end quotation

@item
@quotation

@t{set @{
[no | inv]
variable
| 
variable=value
@} []… toggle  
variable
[
variable
]… unset  
variable
[
variable
]… reset  
variable
[
variable
]…}
@end quotation

@item
@quotation

@t{setenv  
[?]variable
[
value
] unsetenv  
variable
}
@end quotation

@item
@quotation

@t{sidebar_whitelist  
mailbox
[
mailbox
]… unsidebar_whitelist @{
*
| 
mailbox
…@}}
@end quotation

@item
@quotation

@t{source  
filename
}
@end quotation

@item
@quotation

@t{spam  
pattern
format
nospam @{
*
| 
pattern
@}}
@end quotation

@item
@quotation

@t{subjectrx  
pattern
replacement
unsubjectrx @{
*
| 
pattern
@}}
@end quotation

@item
@quotation

@t{subscribe [
-group
name
]…  
regexp
[
regexp
]… unsubscribe [
-group
name
]… @{
*
| 
regexp
…@}}
@end quotation

@item
@quotation

@t{unhook @{
*
| 
hook-type
@}}
@end quotation
@end itemize

@node Configuration Variables, Functions <1>, Configuration Commands, Reference
@section Configuration Variables

@menu
* abort_noattach::
* abort_noattach_regexp::
* abort_nosubject::
* abort_unmodified::
* alias_file::
* alias_format::
* allow_8bit::
* allow_ansi::
* arrow_cursor::
* ascii_chars::
* askbcc::
* askcc::
* assumed_charset::
* attach_charset::
* attach_format::
* attach_save_dir::
* attach_sep::
* attach_split::
* attribution::
* attribution_locale::
* auto_subscribe::
* auto_tag::
* autocrypt::
* autocrypt_acct_format::
* autocrypt_dir::
* autocrypt_reply::
* autoedit::
* background_edit::
* background_confirm_quit::
* background_format::
* beep::
* beep_new::
* bounce::
* bounce_delivered::
* braille_friendly::
* browser_abbreviate_mailboxes::
* browser_sticky_cursor::
* certificate_file::
* change_folder_next::
* charset::
* check_mbox_size::
* check_new::
* collapse_unread::
* compose_format::
* config_charset::
* confirmappend::
* confirmcreate::
* connect_timeout::
* content_type::
* copy::
* copy_decode_weed::
* count_alternatives::
* cursor_overlay::
* crypt_autoencrypt::
* crypt_autopgp::
* crypt_autosign::
* crypt_autosmime::
* crypt_confirmhook::
* crypt_opportunistic_encrypt::
* crypt_opportunistic_encrypt_strong_keys::
* crypt_protected_headers_read::
* crypt_protected_headers_save::
* crypt_protected_headers_subject::
* crypt_protected_headers_write::
* crypt_replyencrypt::
* crypt_replysign::
* crypt_replysignencrypted::
* crypt_timestamp::
* crypt_use_gpgme::
* crypt_use_pka::
* crypt_verify_sig::
* date_format::
* default_hook::
* delete::
* delete_untag::
* digest_collapse::
* display_filter::
* dotlock_program::
* dsn_notify::
* dsn_return::
* duplicate_threads::
* edit_headers::
* editor::
* encode_from::
* entropy_file::
* envelope_from_address::
* error_history::
* escape::
* fast_reply::
* fcc_attach::
* fcc_before_send::
* fcc_clear::
* fcc_delimiter::
* flag_safe::
* folder::
* folder_format::
* followup_to::
* force_name::
* forward_attachments::
* forward_attribution_intro::
* forward_attribution_trailer::
* forward_decode::
* forward_decrypt::
* forward_edit::
* forward_format::
* forward_quote::
* from::
* gecos_mask::
* hdrs::
* header::
* header_cache::
* header_cache_compress::
* header_cache_pagesize::
* header_color_partial::
* help::
* hidden_host::
* hide_limited::
* hide_missing::
* hide_thread_subject::
* hide_top_limited::
* hide_top_missing::
* history::
* history_file::
* history_remove_dups::
* honor_disposition::
* honor_followup_to::
* hostname::
* idn_decode::
* idn_encode::
* ignore_linear_white_space::
* ignore_list_reply_to::
* imap_authenticators::
* imap_check_subscribed::
* imap_condstore::
* imap_deflate::
* imap_delim_chars::
* imap_fetch_chunk_size::
* imap_headers::
* imap_idle::
* imap_keepalive::
* imap_list_subscribed::
* imap_login::
* imap_oauth_refresh_command::
* imap_pass::
* imap_passive::
* imap_peek::
* imap_pipeline_depth::
* imap_poll_timeout::
* imap_qresync::
* imap_servernoise::
* imap_user::
* implicit_autoview::
* include::
* include_encrypted::
* include_onlyfirst::
* indent_string::
* index_format::
* ispell::
* keep_flagged::
* mail_check::
* mail_check_recent::
* mail_check_stats::
* mail_check_stats_interval::
* mailcap_path::
* mailcap_sanitize::
* maildir_header_cache_verify::
* maildir_trash::
* maildir_check_cur::
* mark_macro_prefix::
* mark_old::
* markers::
* mask::
* mbox::
* mbox_type::
* menu_context::
* menu_move_off::
* menu_scroll::
* message_cache_clean::
* message_cachedir::
* message_format::
* meta_key::
* metoo::
* mh_purge::
* mh_seq_flagged::
* mh_seq_replied::
* mh_seq_unseen::
* mime_forward::
* mime_forward_decode::
* mime_forward_rest::
* mime_type_query_command::
* mime_type_query_first::
* mix_entry_format::
* mixmaster::
* move::
* muttlisp_inline_eval::
* narrow_tree::
* net_inc::
* new_mail_command::
* pager::
* pager_context::
* pager_format::
* pager_index_lines::
* pager_stop::
* pattern_format::
* pgp_auto_decode::
* pgp_autoinline::
* pgp_check_exit::
* pgp_check_gpg_decrypt_status_fd::
* pgp_clearsign_command::
* pgp_decode_command::
* pgp_decrypt_command::
* pgp_decryption_okay::
* pgp_default_key::
* pgp_encrypt_only_command::
* pgp_encrypt_sign_command::
* pgp_entry_format::
* pgp_export_command::
* pgp_getkeys_command::
* pgp_good_sign::
* pgp_ignore_subkeys::
* pgp_import_command::
* pgp_list_pubring_command::
* pgp_list_secring_command::
* pgp_long_ids::
* pgp_mime_auto::
* pgp_replyinline::
* pgp_retainable_sigs::
* pgp_self_encrypt::
* pgp_show_unusable::
* pgp_sign_as::
* pgp_sign_command::
* pgp_sort_keys::
* pgp_strict_enc::
* pgp_timeout::
* pgp_use_gpg_agent::
* pgp_verify_command::
* pgp_verify_key_command::
* pipe_decode::
* pipe_decode_weed::
* pipe_sep::
* pipe_split::
* pop_auth_try_all::
* pop_authenticators::
* pop_checkinterval::
* pop_delete::
* pop_host::
* pop_last::
* pop_oauth_refresh_command::
* pop_pass::
* pop_reconnect::
* pop_user::
* post_indent_string::
* postpone::
* postponed::
* postpone_encrypt::
* postpone_encrypt_as::
* preconnect::
* print::
* print_command::
* print_decode::
* print_decode_weed::
* print_split::
* prompt_after::
* query_command::
* query_format::
* quit::
* quote_regexp::
* read_inc::
* read_only::
* realname::
* recall::
* record::
* reflow_space_quotes::
* reflow_text::
* reflow_wrap::
* reply_regexp::
* reply_self::
* reply_to::
* resolve::
* resume_draft_files::
* resume_edited_draft_files::
* reverse_alias::
* reverse_name::
* reverse_realname::
* rfc2047_parameters::
* save_address::
* save_empty::
* save_history::
* save_name::
* score::
* score_threshold_delete::
* score_threshold_flag::
* score_threshold_read::
* search_context::
* send_charset::
* send_multipart_alternative::
* send_multipart_alternative_filter::
* sendmail::
* sendmail_wait::
* shell::
* sidebar_delim_chars::
* sidebar_divider_char::
* sidebar_folder_indent::
* sidebar_format::
* sidebar_indent_string::
* sidebar_new_mail_only::
* sidebar_next_new_wrap::
* sidebar_relative_shortpath_indent::
* sidebar_short_path::
* sidebar_sort_method::
* sidebar_use_mailbox_shortcuts::
* sidebar_visible::
* sidebar_width::
* sig_dashes::
* sig_on_top::
* signature::
* simple_search::
* size_show_bytes::
* size_show_fractions::
* size_show_mb::
* size_units_on_left::
* sleep_time::
* smart_wrap::
* smileys::
* smime_ask_cert_label::
* smime_ca_location::
* smime_certificates::
* smime_decrypt_command::
* smime_decrypt_use_default_key::
* smime_default_key::
* smime_encrypt_command::
* smime_encrypt_with::
* smime_get_cert_command::
* smime_get_cert_email_command::
* smime_get_signer_cert_command::
* smime_import_cert_command::
* smime_is_default::
* smime_keys::
* smime_pk7out_command::
* smime_self_encrypt::
* smime_sign_as::
* smime_sign_command::
* smime_sign_digest_alg::
* smime_sign_opaque_command::
* smime_timeout::
* smime_verify_command::
* smime_verify_opaque_command::
* smtp_authenticators::
* smtp_oauth_refresh_command::
* smtp_pass::
* smtp_url::
* sort::
* sort_alias::
* sort_aux::
* sort_browser::
* sort_re::
* spam_separator::
* spoolfile::
* ssl_ca_certificates_file::
* ssl_client_cert::
* ssl_force_tls::
* ssl_min_dh_prime_bits::
* ssl_starttls::
* ssl_use_sslv2::
* ssl_use_sslv3::
* ssl_use_tlsv1::
* ssl_use_tlsv1_1::
* ssl_use_tlsv1_2::
* ssl_use_tlsv1_3::
* ssl_usesystemcerts::
* ssl_verify_dates::
* ssl_verify_host::
* ssl_verify_partial_chains::
* ssl_ciphers::
* status_chars::
* status_format::
* status_on_top::
* strict_threads::
* suspend::
* text_flowed::
* thorough_search::
* thread_received::
* tilde::
* time_inc::
* timeout::
* tmpdir::
* to_chars::
* trash::
* ts_icon_format::
* ts_enabled::
* ts_status_format::
* tunnel::
* tunnel_is_secure::
* uncollapse_jump::
* uncollapse_new::
* use_8bitmime::
* use_domain::
* use_envelope_from::
* use_from::
* use_ipv6::
* user_agent::
* visual::
* wait_key::
* weed::
* wrap::
* wrap_headers::
* wrap_search::
* wrapmargin::
* write_bcc::
* write_inc::
@end menu

@node abort_noattach, abort_noattach_regexp, , Configuration Variables
@subsection abort_noattach

@display
Type: quadoption
Default: no
@end display

When the body of the message matches $abort_noattach_regexp (@pxref{abort_noattach_regexp}) and
there are no attachments, this quadoption controls whether to
abort sending the message.

@node abort_noattach_regexp, abort_nosubject, abort_noattach, Configuration Variables
@subsection abort_noattach_regexp

@display
Type: regular expression
Default: ‘attach’
@end display

Specifies a regular expression to match against the body of the
message, to determine if an attachment was mentioned but
mistakenly forgotten.  If it matches, $abort_noattach (@pxref{abort_noattach}) will be
consulted to determine if message sending will be aborted.

Like other regular expressions in Mutt, the search is case
sensitive if the pattern contains at least one upper case letter,
and case insensitive otherwise.

@node abort_nosubject, abort_unmodified, abort_noattach_regexp, Configuration Variables
@subsection abort_nosubject

@display
Type: quadoption
Default: ask-yes
@end display

If set to @emph{yes}, when composing messages and no subject is given
at the subject prompt, composition will be aborted.  If set to
@emph{no}, composing messages with no subject given at the subject
prompt will never be aborted.

@node abort_unmodified, alias_file, abort_nosubject, Configuration Variables
@subsection abort_unmodified

@display
Type: quadoption
Default: yes
@end display

If set to @emph{yes}, composition will automatically abort after
editing the message body if no changes are made to the file (this
check only happens after the @emph{first} edit of the file).  When set
to @emph{no}, composition will never be aborted.

@node alias_file, alias_format, abort_unmodified, Configuration Variables
@subsection alias_file

@display
Type: path
Default: ‘~/.muttrc’
@end display

The default file in which to save aliases created by the
@samp{<create-alias> (@pxref{create-alias})} function. Entries added to this file are
encoded in the character set specified by $config_charset (@pxref{config_charset}) if it
is @emph{set} or the current character set otherwise.

@strong{Note:} Mutt will not automatically source this file; you must
explicitly use the ‘source (@pxref{Reading Initialization Commands From Another File})’ command for it to be executed in case
this option points to a dedicated alias file.

The default for this option is the currently used muttrc file, or
‘~/.muttrc’ if no user muttrc was found.

@node alias_format, allow_8bit, alias_file, Configuration Variables
@subsection alias_format

@display
Type: string
Default: ‘%4n %2f %t %-10a   %r’
@end display

Specifies the format of the data displayed for the ‘alias (@pxref{Defining/Using Aliases})’ menu.  The
following @samp{printf(3)}-style sequences are available:

@multitable @columnfractions 0.5 0.5
@item
%a @tab alias name
@item
%f @tab flags - currently, a ‘d’ for an alias marked for deletion
@item
%n @tab index number
@item
%r @tab address which alias expands to
@item
%t @tab character which indicates if the alias is tagged for inclusion
@end multitable

@node allow_8bit, allow_ansi, alias_format, Configuration Variables
@subsection allow_8bit

@display
Type: boolean
Default: yes
@end display

Controls whether 8-bit data is converted to 7-bit using either Quoted-
Printable or Base64 encoding when sending mail.

@node allow_ansi, arrow_cursor, allow_8bit, Configuration Variables
@subsection allow_ansi

@display
Type: boolean
Default: no
@end display

Controls whether ANSI color codes in messages (and color tags in
rich text messages) are to be interpreted.
Messages containing these codes are rare, but if this option is @emph{set},
their text will be colored accordingly. Note that this may override
your color choices, and even present a security problem, since a
message could include a line like

@example

[-- PGP output follows ...
@end example

and give it the same color as your attachment color (see also
$crypt_timestamp (@pxref{crypt_timestamp})).

@node arrow_cursor, ascii_chars, allow_ansi, Configuration Variables
@subsection arrow_cursor

@display
Type: boolean
Default: no
@end display

When @emph{set}, an arrow (‘->’) will be used to indicate the current entry
in menus instead of highlighting the whole line.  On slow network or modem
links this will make response faster because there is less that has to
be redrawn on the screen when moving to the next or previous entries
in the menu.

@node ascii_chars, askbcc, arrow_cursor, Configuration Variables
@subsection ascii_chars

@display
Type: boolean
Default: no
@end display

If @emph{set}, Mutt will use plain ASCII characters when displaying thread
and attachment trees, instead of the default @emph{ACS} characters.

@node askbcc, askcc, ascii_chars, Configuration Variables
@subsection askbcc

@display
Type: boolean
Default: no
@end display

If @emph{set}, Mutt will prompt you for blind-carbon-copy (Bcc) recipients
before editing an outgoing message.

@node askcc, assumed_charset, askbcc, Configuration Variables
@subsection askcc

@display
Type: boolean
Default: no
@end display

If @emph{set}, Mutt will prompt you for carbon-copy (Cc) recipients before
editing the body of an outgoing message.

@node assumed_charset, attach_charset, askcc, Configuration Variables
@subsection assumed_charset

@display
Type: string
Default: (empty)
@end display

This variable is a colon-separated list of character encoding
schemes for messages without character encoding indication.
Header field values and message body content without character encoding
indication would be assumed that they are written in one of this list.
By default, all the header fields and message body without any charset
indication are assumed to be in ‘us-ascii’.

For example, Japanese users might prefer this:

@example

set assumed_charset="iso-2022-jp:euc-jp:shift_jis:utf-8"
@end example

However, only the first content is valid for the message body.

@node attach_charset, attach_format, assumed_charset, Configuration Variables
@subsection attach_charset

@display
Type: string
Default: (empty)
@end display

This variable is a colon-separated list of character encoding
schemes for text file attachments. Mutt uses this setting to guess
which encoding files being attached are encoded in to convert them to
a proper character set given in $send_charset (@pxref{send_charset}).

If @emph{unset}, the value of $charset (@pxref{charset}) will be used instead.
For example, the following configuration would work for Japanese
text handling:

@example

set attach_charset="iso-2022-jp:euc-jp:shift_jis:utf-8"
@end example

Note: for Japanese users, ‘iso-2022-*’ must be put at the head
of the value as shown above if included.

@node attach_format, attach_save_dir, attach_charset, Configuration Variables
@subsection attach_format

@display
Type: string
Default: ‘%u%D%I %t%4n %T%.40d%> [%.7m/%.10M, %.6e%?C?, %C?, %s] ’
@end display

This variable describes the format of the ‘attachment’ menu.  The
following @samp{printf(3)}-style sequences are understood:

@multitable @columnfractions 0.5 0.5
@item
%C  @tab charset
@item
%c  @tab requires charset conversion (‘n’ or ‘c’)
@item
%D  @tab deleted flag
@item
%d  @tab description (if none, falls back to %F)
@item
%e  @tab MIME content-transfer-encoding
@item
%F  @tab filename in content-disposition header (if none, falls back to %f)
@item
%f  @tab filename
@item
%I  @tab disposition (‘I’ for inline, ‘A’ for attachment)
@item
%m  @tab major MIME type
@item
%M  @tab MIME subtype
@item
%n  @tab attachment number
@item
%Q  @tab ‘Q’, if MIME part qualifies for attachment counting
@item
%s  @tab size (see formatstrings-size (@pxref{Bytes size display}))
@item
%t  @tab tagged flag
@item
%T  @tab graphic tree characters
@item
%u  @tab unlink (=to delete) flag
@item
%X  @tab number of qualifying MIME parts in this part and its children
(please see the ‘attachments (@pxref{Attachment Searching and Counting})’ section for possible speed effects)
@item
%>X @tab right justify the rest of the string and pad with character ‘X’
@item
%|X @tab pad to the end of the line with character ‘X’
@item
%*X @tab soft-fill with character ‘X’ as pad
@end multitable

For an explanation of ‘soft-fill’, see the $index_format (@pxref{index_format}) documentation.

@node attach_save_dir, attach_sep, attach_format, Configuration Variables
@subsection attach_save_dir

@display
Type: path
Default: (empty)
@end display

The default directory to save attachments from the ‘attachment’ menu.
If it doesn't exist, Mutt will prompt to create the directory before
saving.

If the path is invalid (e.g. not a directory, or cannot be
chdir'ed to), Mutt will fall back to using the current directory.

@node attach_sep, attach_split, attach_save_dir, Configuration Variables
@subsection attach_sep

@display
Type: string
Default: ‘\n’
@end display

The separator to add between attachments when operating (saving,
printing, piping, etc) on a list of tagged attachments.

@node attach_split, attribution, attach_sep, Configuration Variables
@subsection attach_split

@display
Type: boolean
Default: yes
@end display

If this variable is @emph{unset}, when operating (saving, printing, piping,
etc) on a list of tagged attachments, Mutt will concatenate the
attachments and will operate on them as a single attachment. The
$attach_sep (@pxref{attach_sep}) separator is added after each attachment. When @emph{set},
Mutt will operate on the attachments one by one.

@node attribution, attribution_locale, attach_split, Configuration Variables
@subsection attribution

@display
Type: string (localized)
Default: ‘On %d, %n wrote:’
@end display

This is the string that will precede a message which has been included
in a reply.  For a full listing of defined @samp{printf(3)}-like sequences see
the section on $index_format (@pxref{index_format}).

@node attribution_locale, auto_subscribe, attribution, Configuration Variables
@subsection attribution_locale

@display
Type: string
Default: (empty)
@end display

The locale used by @samp{strftime(3)} to format dates in the
attribution (@pxref{attribution}) string.  Legal values are the strings your system
accepts for the locale environment variable @samp{$LC_TIME}.

This variable is to allow the attribution date format to be
customized by recipient or folder using hooks.  By default, Mutt
will use your locale environment, so there is no need to set
this except to override that default.

@node auto_subscribe, auto_tag, attribution_locale, Configuration Variables
@subsection auto_subscribe

@display
Type: boolean
Default: no
@end display

When @emph{set}, Mutt assumes the presence of a List-Post header
means the recipient is subscribed to the list.  Unless the mailing list
is in the ‘unsubscribe’ or ‘unlist’ lists, it will be added
to the ‘subscribe (@pxref{subscribe})’ list.  Parsing and checking these things slows
header reading down, so this option is disabled by default.

@node auto_tag, autocrypt, auto_subscribe, Configuration Variables
@subsection auto_tag

@display
Type: boolean
Default: no
@end display

When @emph{set}, functions in the @emph{index} menu which affect a message
will be applied to all tagged messages (if there are any).  When
unset, you must first use the @samp{<tag-prefix>} function (bound to ‘;’
by default) to make the next function apply to all tagged messages.

@node autocrypt, autocrypt_acct_format, auto_tag, Configuration Variables
@subsection autocrypt

@display
Type: boolean
Default: no
@end display

When @emph{set}, enables autocrypt, which provides
passive encryption protection with keys exchanged via headers.
See ‘autocryptdoc (@pxref{Autocrypt})’ for more details.
(Autocrypt only)

@node autocrypt_acct_format, autocrypt_dir, autocrypt, Configuration Variables
@subsection autocrypt_acct_format

@display
Type: string
Default: ‘%4n %-30a %20p %10s’
@end display

This variable describes the format of the ‘autocrypt account’ menu.
The following @samp{printf(3)}-style sequences are understood

@multitable @columnfractions 0.5 0.5
@item
%a  @tab email address
@item
%k  @tab gpg keyid
@item
%n  @tab current entry number
@item
%p  @tab prefer-encrypt flag
@item
%s  @tab status flag (active/inactive)
@end multitable

(Autocrypt only)

@node autocrypt_dir, autocrypt_reply, autocrypt_acct_format, Configuration Variables
@subsection autocrypt_dir

@display
Type: path
Default: ‘~/.mutt/autocrypt’
@end display

This variable sets where autocrypt files are stored, including the GPG
keyring and sqlite database.  See ‘autocryptdoc (@pxref{Autocrypt})’ for more details.
(Autocrypt only)

@node autocrypt_reply, autoedit, autocrypt_dir, Configuration Variables
@subsection autocrypt_reply

@display
Type: boolean
Default: yes
@end display

When @emph{set}, replying to an autocrypt email automatically
enables autocrypt in the reply.  You may want to unset this if you're using
the same key for autocrypt as normal web-of-trust, so that autocrypt
isn't forced on for all encrypted replies.
(Autocrypt only)

@node autoedit, background_edit, autocrypt_reply, Configuration Variables
@subsection autoedit

@display
Type: boolean
Default: no
@end display

When @emph{set} along with $edit_headers (@pxref{edit_headers}), Mutt will skip the initial
send-menu (prompting for subject and recipients) and allow you to
immediately begin editing the body of your
message.  The send-menu may still be accessed once you have finished
editing the body of your message.

@strong{Note:} when this option is @emph{set}, you cannot use send-hooks that depend
on the recipients when composing a new (non-reply) message, as the initial
list of recipients is empty.

Also see $fast_reply (@pxref{fast_reply}).

@node background_edit, background_confirm_quit, autoedit, Configuration Variables
@subsection background_edit

@display
Type: boolean
Default: no
@end display

When @emph{set}, Mutt will run $editor (@pxref{editor}) in the background during
message composition.  A landing page will display, waiting for
the $editor (@pxref{editor}) to exit.  The landing page may be exited, allowing
perusal of the mailbox, or even for other messages to be
composed.  Backgrounded sessions may be returned to via the
@samp{<background-compose-menu>} function.

For background editing to work properly, $editor (@pxref{editor}) must be set to
an editor that does not try to use the Mutt terminal: for example
a graphical editor, or a script launching (and waiting for) the
editor in another Gnu Screen window.

For more details, see ‘bgedit (@pxref{Background Editing})’ ("Background Editing" in the manual).

@node background_confirm_quit, background_format, background_edit, Configuration Variables
@subsection background_confirm_quit

@display
Type: boolean
Default: yes
@end display

When @emph{set}, if there are any background edit sessions, you
will be prompted to confirm exiting Mutt, in addition to the
$quit (@pxref{quit}) prompt.

@node background_format, beep, background_confirm_quit, Configuration Variables
@subsection background_format

@display
Type: string
Default: ‘%10S %7p %s’
@end display

This variable describes the format of the ‘background compose’
menu.  The following @samp{printf(3)}-style sequences are
understood:

@multitable @columnfractions 0.5 0.5
@item
%i @tab parent message id (for replies and forwarded messages)
@item
%n @tab the running number on the menu
@item
%p @tab pid of the $editor (@pxref{editor}) process
@item
%r @tab comma separated list of ‘To:’ recipients
@item
%R @tab comma separated list of ‘Cc:’ recipients
@item
%s @tab subject of the message
@item
%S @tab status of the $editor (@pxref{editor}) process: running/finished
@end multitable

@node beep, beep_new, background_format, Configuration Variables
@subsection beep

@display
Type: boolean
Default: yes
@end display

When this variable is @emph{set}, mutt will beep when an error occurs.

@node beep_new, bounce, beep, Configuration Variables
@subsection beep_new

@display
Type: boolean
Default: no
@end display

When this variable is @emph{set}, mutt will beep whenever it prints a message
notifying you of new mail.  This is independent of the setting of the
$beep (@pxref{beep}) variable.

@node bounce, bounce_delivered, beep_new, Configuration Variables
@subsection bounce

@display
Type: quadoption
Default: ask-yes
@end display

Controls whether you will be asked to confirm bouncing messages.
If set to @emph{yes} you don't get asked if you want to bounce a
message. Setting this variable to @emph{no} is not generally useful,
and thus not recommended, because you are unable to bounce messages.

@node bounce_delivered, braille_friendly, bounce, Configuration Variables
@subsection bounce_delivered

@display
Type: boolean
Default: yes
@end display

When this variable is @emph{set}, mutt will include Delivered-To headers when
bouncing messages.  Postfix users may wish to @emph{unset} this variable.

@node braille_friendly, browser_abbreviate_mailboxes, bounce_delivered, Configuration Variables
@subsection braille_friendly

@display
Type: boolean
Default: no
@end display

When this variable is @emph{set}, mutt will place the cursor at the beginning
of the current line in menus, even when the $arrow_cursor (@pxref{arrow_cursor}) variable
is @emph{unset}, making it easier for blind persons using Braille displays to
follow these menus.  The option is @emph{unset} by default because many
visual terminals don't permit making the cursor invisible.

@node browser_abbreviate_mailboxes, browser_sticky_cursor, braille_friendly, Configuration Variables
@subsection browser_abbreviate_mailboxes

@display
Type: boolean
Default: yes
@end display

When this variable is @emph{set}, mutt will abbreviate mailbox
names in the browser mailbox list, using '~' and '='
shortcuts.

The default @samp{"alpha"} setting of $sort_browser (@pxref{sort_browser}) uses
locale-based sorting (using @samp{strcoll(3)}), which ignores some
punctuation.  This can lead to some situations where the order
doesn't make intuitive sense.  In those cases, it may be
desirable to @emph{unset} this variable.

@node browser_sticky_cursor, certificate_file, browser_abbreviate_mailboxes, Configuration Variables
@subsection browser_sticky_cursor

@display
Type: boolean
Default: yes
@end display

When this variable is @emph{set}, the browser will attempt to keep
the cursor on the same mailbox when performing various functions.
These include moving up a directory, toggling between mailboxes
and directory listing, creating/renaming a mailbox, toggling
subscribed mailboxes, and entering a new mask.

@node certificate_file, change_folder_next, browser_sticky_cursor, Configuration Variables
@subsection certificate_file

@display
Type: path
Default: ‘~/.mutt_certificates’
@end display

This variable specifies the file where the certificates you trust
are saved. When an unknown certificate is encountered, you are asked
if you accept it or not. If you accept it, the certificate can also
be saved in this file and further connections are automatically
accepted.

You can also manually add CA certificates in this file. Any server
certificate that is signed with one of these CA certificates is
also automatically accepted.

Example:

@example

set certificate_file=~/.mutt/certificates
@end example

@node change_folder_next, charset, certificate_file, Configuration Variables
@subsection change_folder_next

@display
Type: boolean
Default: no
@end display

When this variable is @emph{set}, the @samp{<change-folder>} function
mailbox suggestion will start at the next folder in your ‘mailboxes (@pxref{Monitoring Incoming Mail})’
list, instead of starting at the first folder in the list.

@node charset, check_mbox_size, change_folder_next, Configuration Variables
@subsection charset

@display
Type: string
Default: (empty)
@end display

Character set your terminal uses to display and enter textual data.
It is also the fallback for $send_charset (@pxref{send_charset}).

Upon startup Mutt tries to derive this value from environment variables
such as @samp{$LC_CTYPE} or @samp{$LANG}.

@strong{Note:} It should only be set in case Mutt isn't able to determine the
character set used correctly.

@node check_mbox_size, check_new, charset, Configuration Variables
@subsection check_mbox_size

@display
Type: boolean
Default: no
@end display

When this variable is @emph{set}, mutt will use file size attribute instead of
access time when checking for new mail in mbox and mmdf folders.

This variable is @emph{unset} by default and should only be enabled when
new mail detection for these folder types is unreliable or doesn't work.

Note that enabling this variable should happen before any ‘mailboxes (@pxref{Monitoring Incoming Mail})’
directives occur in configuration files regarding mbox or mmdf folders
because mutt needs to determine the initial new mail status of such a
mailbox by performing a fast mailbox scan when it is defined.
Afterwards the new mail status is tracked by file size changes.

@node check_new, collapse_unread, check_mbox_size, Configuration Variables
@subsection check_new

@display
Type: boolean
Default: yes
@end display

@strong{Note:} this option only affects @emph{maildir} and @emph{MH} style
mailboxes.

When @emph{set}, Mutt will check for new mail delivered while the
mailbox is open.  Especially with MH mailboxes, this operation can
take quite some time since it involves scanning the directory and
checking each file to see if it has already been looked at.  If
this variable is @emph{unset}, no check for new mail is performed
while the mailbox is open.

@node collapse_unread, compose_format, check_new, Configuration Variables
@subsection collapse_unread

@display
Type: boolean
Default: yes
@end display

When @emph{unset}, Mutt will not collapse a thread if it contains any
unread messages.

@node compose_format, config_charset, collapse_unread, Configuration Variables
@subsection compose_format

@display
Type: string (localized)
Default: ‘-- Mutt: Compose  [Approx. msg size: %l   Atts: %a]%>-’
@end display

Controls the format of the status line displayed in the ‘compose’
menu.  This string is similar to $status_format (@pxref{status_format}), but has its own
set of @samp{printf(3)}-like sequences:

@multitable @columnfractions 0.5 0.5
@item
%a @tab total number of attachments
@item
%h @tab local hostname
@item
%l @tab approximate size (in bytes) of the current message (see formatstrings-size (@pxref{Bytes size display}))
@item
%v @tab Mutt version string
@end multitable

See the text describing the $status_format (@pxref{status_format}) option for more
information on how to set $compose_format (@pxref{compose_format}).

@node config_charset, confirmappend, compose_format, Configuration Variables
@subsection config_charset

@display
Type: string
Default: (empty)
@end display

When defined, Mutt will recode commands in rc files from this
encoding to the current character set as specified by $charset (@pxref{charset})
and aliases written to $alias_file (@pxref{alias_file}) from the current character set.

Please note that if setting $charset (@pxref{charset}) it must be done before
setting $config_charset (@pxref{config_charset}).

Recoding should be avoided as it may render unconvertable
characters as question marks which can lead to undesired
side effects (for example in regular expressions).

@node confirmappend, confirmcreate, config_charset, Configuration Variables
@subsection confirmappend

@display
Type: boolean
Default: yes
@end display

When @emph{set}, Mutt will prompt for confirmation when appending messages to
an existing mailbox.

@node confirmcreate, connect_timeout, confirmappend, Configuration Variables
@subsection confirmcreate

@display
Type: boolean
Default: yes
@end display

When @emph{set}, Mutt will prompt for confirmation when saving messages to a
mailbox which does not yet exist before creating it.

@node connect_timeout, content_type, confirmcreate, Configuration Variables
@subsection connect_timeout

@display
Type: number
Default: 30
@end display

Causes Mutt to timeout a network connection (for IMAP, POP or SMTP) after this
many seconds if the connection is not able to be established.  A negative
value causes Mutt to wait indefinitely for the connection attempt to succeed.

@node content_type, copy, connect_timeout, Configuration Variables
@subsection content_type

@display
Type: string
Default: ‘text/plain’
@end display

Sets the default Content-Type for the body of newly composed messages.

@node copy, copy_decode_weed, content_type, Configuration Variables
@subsection copy

@display
Type: quadoption
Default: yes
@end display

This variable controls whether or not copies of your outgoing messages
will be saved for later references.  Also see $record (@pxref{record}),
$save_name (@pxref{save_name}), $force_name (@pxref{force_name}) and ‘fcc-hook (@pxref{Specify Default Fcc; Mailbox When Composing})’.

@node copy_decode_weed, count_alternatives, copy, Configuration Variables
@subsection copy_decode_weed

@display
Type: boolean
Default: no
@end display

Controls whether Mutt will weed headers when invoking the
@samp{<decode-copy>} or @samp{<decode-save>} functions.

@node count_alternatives, cursor_overlay, copy_decode_weed, Configuration Variables
@subsection count_alternatives

@display
Type: boolean
Default: no
@end display

When @emph{set}, Mutt will recurse inside multipart/alternatives while
performing attachment searching and counting (see attachments (@pxref{Attachment Searching and Counting})).

Traditionally, multipart/alternative parts have simply represented
different encodings of the main content of the email.  Unfortunately,
some mail clients have started to place email attachments inside
one of alternatives.  Setting this will allow Mutt to find
and count matching attachments hidden there, and include them
in the index via %X or through ~X pattern matching.

@node cursor_overlay, crypt_autoencrypt, count_alternatives, Configuration Variables
@subsection cursor_overlay

@display
Type: boolean
Default: no
@end display

When @emph{set}, Mutt will overlay the indicator, tree,
sidebar_highlight, and sidebar_indicator colors onto the currently
selected line.  This will allow @samp{default} colors in those
to be overridden, and for attributes to be merged between
the layers.

@node crypt_autoencrypt, crypt_autopgp, cursor_overlay, Configuration Variables
@subsection crypt_autoencrypt

@display
Type: boolean
Default: no
@end display

Setting this variable will cause Mutt to always attempt to PGP
encrypt outgoing messages.  This is probably only useful in
connection to the ‘send-hook (@pxref{Change Settings Based Upon Message Recipients})’ command.  It can be overridden
by use of the pgp menu, when encryption is not required or
signing is requested as well.  If $smime_is_default (@pxref{smime_is_default}) is @emph{set},
then OpenSSL is used instead to create S/MIME messages and
settings can be overridden by use of the smime menu instead.
(Crypto only)

@node crypt_autopgp, crypt_autosign, crypt_autoencrypt, Configuration Variables
@subsection crypt_autopgp

@display
Type: boolean
Default: yes
@end display

This variable controls whether or not mutt may automatically enable
PGP encryption/signing for messages.  See also $crypt_autoencrypt (@pxref{crypt_autoencrypt}),
$crypt_replyencrypt (@pxref{crypt_replyencrypt}),
$crypt_autosign (@pxref{crypt_autosign}), $crypt_replysign (@pxref{crypt_replysign}) and $smime_is_default (@pxref{smime_is_default}).

@node crypt_autosign, crypt_autosmime, crypt_autopgp, Configuration Variables
@subsection crypt_autosign

@display
Type: boolean
Default: no
@end display

Setting this variable will cause Mutt to always attempt to
cryptographically sign outgoing messages.  This can be overridden
by use of the pgp menu, when signing is not required or
encryption is requested as well. If $smime_is_default (@pxref{smime_is_default}) is @emph{set},
then OpenSSL is used instead to create S/MIME messages and settings can
be overridden by use of the smime menu instead of the pgp menu.
(Crypto only)

@node crypt_autosmime, crypt_confirmhook, crypt_autosign, Configuration Variables
@subsection crypt_autosmime

@display
Type: boolean
Default: yes
@end display

This variable controls whether or not mutt may automatically enable
S/MIME encryption/signing for messages. See also $crypt_autoencrypt (@pxref{crypt_autoencrypt}),
$crypt_replyencrypt (@pxref{crypt_replyencrypt}),
$crypt_autosign (@pxref{crypt_autosign}), $crypt_replysign (@pxref{crypt_replysign}) and $smime_is_default (@pxref{smime_is_default}).

@node crypt_confirmhook, crypt_opportunistic_encrypt, crypt_autosmime, Configuration Variables
@subsection crypt_confirmhook

@display
Type: boolean
Default: yes
@end display

If set, then you will be prompted for confirmation of keys when using
the @emph{crypt-hook} command.  If unset, no such confirmation prompt will
be presented.  This is generally considered unsafe, especially where
typos are concerned.

@node crypt_opportunistic_encrypt, crypt_opportunistic_encrypt_strong_keys, crypt_confirmhook, Configuration Variables
@subsection crypt_opportunistic_encrypt

@display
Type: boolean
Default: no
@end display

Setting this variable will cause Mutt to automatically enable and
disable encryption, based on whether all message recipient keys
can be located by Mutt.

When this option is enabled, Mutt will enable/disable encryption
each time the TO, CC, and BCC lists are edited.  If
$edit_headers (@pxref{edit_headers}) is set, Mutt will also do so each time the message
is edited.

While this is set, encryption can't be manually enabled/disabled.
The pgp or smime menus provide a selection to temporarily disable
this option for the current message.

If $crypt_autoencrypt (@pxref{crypt_autoencrypt}) or $crypt_replyencrypt (@pxref{crypt_replyencrypt}) enable encryption for
a message, this option will be disabled for that message.  It can
be manually re-enabled in the pgp or smime menus.
(Crypto only)

@node crypt_opportunistic_encrypt_strong_keys, crypt_protected_headers_read, crypt_opportunistic_encrypt, Configuration Variables
@subsection crypt_opportunistic_encrypt_strong_keys

@display
Type: boolean
Default: no
@end display

When set, this modifies the behavior of $crypt_opportunistic_encrypt (@pxref{crypt_opportunistic_encrypt})
to only search for "strong keys", that is, keys with full validity
according to the web-of-trust algorithm.  A key with marginal or no
validity will not enable opportunistic encryption.

For S/MIME, the behavior depends on the backend.  Classic S/MIME will
filter for certificates with the 't' (trusted) flag in the .index file.
The GPGME backend will use the same filters as with OpenPGP, and depends
on GPGME's logic for assigning the GPGME_VALIDITY_FULL and
GPGME_VALIDITY_ULTIMATE validity flag.

@node crypt_protected_headers_read, crypt_protected_headers_save, crypt_opportunistic_encrypt_strong_keys, Configuration Variables
@subsection crypt_protected_headers_read

@display
Type: boolean
Default: yes
@end display

When set, Mutt will display protected headers in the pager,
and will update the index and header cache with revised headers.
Protected headers are stored inside the encrypted or signed part of an
an email, to prevent disclosure or tampering.
For more information see https://github.com/autocrypt/protected-headers.
Currently Mutt only supports the Subject header.

Encrypted messages using protected headers often substitute the exposed
Subject header with a dummy value (see $crypt_protected_headers_subject (@pxref{crypt_protected_headers_subject})).
Mutt will update its concept of the correct subject @strong{after} the
message is opened, i.e. via the @samp{<display-message>} function.
If you reply to a message before opening it, Mutt will end up using
the dummy Subject header, so be sure to open such a message first.
(Crypto only)

@node crypt_protected_headers_save, crypt_protected_headers_subject, crypt_protected_headers_read, Configuration Variables
@subsection crypt_protected_headers_save

@display
Type: boolean
Default: no
@end display

When $crypt_protected_headers_read (@pxref{crypt_protected_headers_read}) is set, and a message with a
protected Subject is opened, Mutt will save the updated Subject
into the header cache by default.  This allows searching/limiting
based on the protected Subject header if the mailbox is
re-opened, without having to re-open the message each time.
However, for mbox/mh mailbox types, or if header caching is not
set up, you would need to re-open the message each time the
mailbox was reopened before you could see or search/limit on the
protected subject again.

When this variable is set, Mutt additionally saves the protected
Subject back @strong{in the clear-text message headers}.  This
provides better usability, but with the tradeoff of reduced
security.  The protected Subject header, which may have
previously been encrypted, is now stored in clear-text in the
message headers.  Copying the message elsewhere, via Mutt or
external tools, could expose this previously encrypted data.
Please make sure you understand the consequences of this before
you enable this variable.
(Crypto only)

@node crypt_protected_headers_subject, crypt_protected_headers_write, crypt_protected_headers_save, Configuration Variables
@subsection crypt_protected_headers_subject

@display
Type: string
Default: ‘...’
@end display

When $crypt_protected_headers_write (@pxref{crypt_protected_headers_write}) is set, and the message is marked
for encryption, this will be substituted into the Subject field in the
message headers.
To prevent a subject from being substituted, unset this variable, or set it
to the empty string.
(Crypto only)

@node crypt_protected_headers_write, crypt_replyencrypt, crypt_protected_headers_subject, Configuration Variables
@subsection crypt_protected_headers_write

@display
Type: boolean
Default: no
@end display

When set, Mutt will generate protected headers for signed and
encrypted emails.
Protected headers are stored inside the encrypted or signed part of an
an email, to prevent disclosure or tampering.
For more information see https://github.com/autocrypt/protected-headers.
Currently Mutt only supports the Subject header.
(Crypto only)

@node crypt_replyencrypt, crypt_replysign, crypt_protected_headers_write, Configuration Variables
@subsection crypt_replyencrypt

@display
Type: boolean
Default: yes
@end display

If @emph{set}, automatically PGP or OpenSSL encrypt replies to messages which are
encrypted.
(Crypto only)

@node crypt_replysign, crypt_replysignencrypted, crypt_replyencrypt, Configuration Variables
@subsection crypt_replysign

@display
Type: boolean
Default: no
@end display

If @emph{set}, automatically PGP or OpenSSL sign replies to messages which are
signed.

@strong{Note:} this does not work on messages that are encrypted
@emph{and} signed!
(Crypto only)

@node crypt_replysignencrypted, crypt_timestamp, crypt_replysign, Configuration Variables
@subsection crypt_replysignencrypted

@display
Type: boolean
Default: no
@end display

If @emph{set}, automatically PGP or OpenSSL sign replies to messages
which are encrypted. This makes sense in combination with
$crypt_replyencrypt (@pxref{crypt_replyencrypt}), because it allows you to sign all
messages which are automatically encrypted.  This works around
the problem noted in $crypt_replysign (@pxref{crypt_replysign}), that mutt is not able
to find out whether an encrypted message is also signed.
(Crypto only)

@node crypt_timestamp, crypt_use_gpgme, crypt_replysignencrypted, Configuration Variables
@subsection crypt_timestamp

@display
Type: boolean
Default: yes
@end display

If @emph{set}, mutt will include a time stamp in the lines surrounding
PGP or S/MIME output, so spoofing such lines is more difficult.
If you are using colors to mark these lines, and rely on these,
you may @emph{unset} this setting.
(Crypto only)

@node crypt_use_gpgme, crypt_use_pka, crypt_timestamp, Configuration Variables
@subsection crypt_use_gpgme

@display
Type: boolean
Default: no
@end display

This variable controls the use of the GPGME-enabled crypto backends.
If it is @emph{set} and Mutt was built with gpgme support, the gpgme code for
S/MIME and PGP will be used instead of the classic code.  Note that
you need to set this option in .muttrc; it won't have any effect when
used interactively.

Note that the GPGME backend does not support creating old-style inline
(traditional) PGP encrypted or signed messages (see $pgp_autoinline (@pxref{pgp_autoinline})).

@node crypt_use_pka, crypt_verify_sig, crypt_use_gpgme, Configuration Variables
@subsection crypt_use_pka

@display
Type: boolean
Default: no
@end display

Controls whether mutt uses PKA
(see http://www.g10code.de/docs/pka-intro.de.pdf) during signature
verification (only supported by the GPGME backend).

@node crypt_verify_sig, date_format, crypt_use_pka, Configuration Variables
@subsection crypt_verify_sig

@display
Type: quadoption
Default: yes
@end display

If @emph{‘yes’}, always attempt to verify PGP or S/MIME signatures.
If @emph{‘ask-*’}, ask whether or not to verify the signature.
If @emph{‘no’}, never attempt to verify cryptographic signatures.
(Crypto only)

@node date_format, default_hook, crypt_verify_sig, Configuration Variables
@subsection date_format

@display
Type: string
Default: ‘!%a, %b %d, %Y at %I:%M:%S%p %Z’
@end display

This variable controls the format of the date printed by the ‘%d’
sequence in $index_format (@pxref{index_format}).  This is passed to the @samp{strftime(3)}
function to process the date, see the man page for the proper syntax.

Unless the first character in the string is a bang (‘!’), the month
and week day names are expanded according to the locale.
If the first character in the string is a
bang, the bang is discarded, and the month and week day names in the
rest of the string are expanded in the @emph{C} locale (that is in US
English).

@node default_hook, delete, date_format, Configuration Variables
@subsection default_hook

@display
Type: string
Default: ‘~f %s !~P | (~P ~C %s)’
@end display

This variable controls how ‘message-hook (@pxref{Change Settings Before Formatting a Message})’, ‘reply-hook (@pxref{reply-hook})’, ‘send-hook (@pxref{Change Settings Based Upon Message Recipients})’,
‘send2-hook (@pxref{send2-hook})’, ‘save-hook (@pxref{Specify Default Save Mailbox})’, and ‘fcc-hook (@pxref{Specify Default Fcc; Mailbox When Composing})’ will
be interpreted if they are specified with only a simple regexp,
instead of a matching pattern.  The hooks are expanded when they are
declared, so a hook will be interpreted according to the value of this
variable at the time the hook is declared.

The default value matches
if the message is either from a user matching the regular expression
given, or if it is from you (if the from address matches
‘alternates (@pxref{Alternative Addresses})’) and is to or cc'ed to a user matching the given
regular expression.

@node delete, delete_untag, default_hook, Configuration Variables
@subsection delete

@display
Type: quadoption
Default: ask-yes
@end display

Controls whether or not messages are really deleted when closing or
synchronizing a mailbox.  If set to @emph{yes}, messages marked for
deleting will automatically be purged without prompting.  If set to
@emph{no}, messages marked for deletion will be kept in the mailbox.

@node delete_untag, digest_collapse, delete, Configuration Variables
@subsection delete_untag

@display
Type: boolean
Default: yes
@end display

If this option is @emph{set}, mutt will untag messages when marking them
for deletion.  This applies when you either explicitly delete a message,
or when you save it to another folder.

@node digest_collapse, display_filter, delete_untag, Configuration Variables
@subsection digest_collapse

@display
Type: boolean
Default: yes
@end display

If this option is @emph{set}, mutt's received-attachments menu will not show the subparts of
individual messages in a multipart/digest.  To see these subparts, press ‘v’ on that menu.

@node display_filter, dotlock_program, digest_collapse, Configuration Variables
@subsection display_filter

@display
Type: path
Default: (empty)
@end display

When set, specifies a command used to filter messages.  When a message
is viewed it is passed as standard input to $display_filter (@pxref{display_filter}), and the
filtered message is read from the standard output.

@node dotlock_program, dsn_notify, display_filter, Configuration Variables
@subsection dotlock_program

@display
Type: path
Default: ‘/usr/local/bin/mutt_dotlock’
@end display

Contains the path of the @samp{mutt_dotlock(1)} binary to be used by
mutt.

@node dsn_notify, dsn_return, dotlock_program, Configuration Variables
@subsection dsn_notify

@display
Type: string
Default: (empty)
@end display

This variable sets the request for when notification is returned.  The
string consists of a comma separated list (no spaces!) of one or more
of the following: @emph{never}, to never request notification,
@emph{failure}, to request notification on transmission failure,
@emph{delay}, to be notified of message delays, @emph{success}, to be
notified of successful transmission.

Example:

@example

set dsn_notify="failure,delay"
@end example

@strong{Note:} when using $sendmail (@pxref{sendmail}) for delivery, you should not enable
this unless you are either using Sendmail 8.8.x or greater or a MTA
providing a @samp{sendmail(1)}-compatible interface supporting the @samp{-N} option
for DSN. For SMTP delivery, DSN support is auto-detected so that it
depends on the server whether DSN will be used or not.

@node dsn_return, duplicate_threads, dsn_notify, Configuration Variables
@subsection dsn_return

@display
Type: string
Default: (empty)
@end display

This variable controls how much of your message is returned in DSN
messages.  It may be set to either @emph{hdrs} to return just the
message header, or @emph{full} to return the full message.

Example:

@example

set dsn_return=hdrs
@end example

@strong{Note:} when using $sendmail (@pxref{sendmail}) for delivery, you should not enable
this unless you are either using Sendmail 8.8.x or greater or a MTA
providing a @samp{sendmail(1)}-compatible interface supporting the @samp{-R} option
for DSN. For SMTP delivery, DSN support is auto-detected so that it
depends on the server whether DSN will be used or not.

@node duplicate_threads, edit_headers, dsn_return, Configuration Variables
@subsection duplicate_threads

@display
Type: boolean
Default: yes
@end display

This variable controls whether mutt, when $sort (@pxref{sort}) is set to @emph{threads}, threads
messages with the same Message-Id together.  If it is @emph{set}, it will indicate
that it thinks they are duplicates of each other with an equals sign
in the thread tree.

@node edit_headers, editor, duplicate_threads, Configuration Variables
@subsection edit_headers

@display
Type: boolean
Default: no
@end display

This option allows you to edit the header of your outgoing messages
along with the body of your message.

Although the compose menu may have localized header labels, the
labels passed to your editor will be standard RFC 2822 headers,
(e.g. To:, Cc:, Subject:).  Headers added in your editor must
also be RFC 2822 headers, or one of the pseudo headers listed in
‘edit-header (@pxref{Editing the Message Header})’.  Mutt will not understand localized header
labels, just as it would not when parsing an actual email.

@strong{Note} that changes made to the References: and Date: headers are
ignored for interoperability reasons.

@node editor, encode_from, edit_headers, Configuration Variables
@subsection editor

@display
Type: path
Default: (empty)
@end display

This variable specifies which editor is used by mutt.
It defaults to the value of the @samp{$VISUAL}, or @samp{$EDITOR}, environment
variable, or to the string ‘vi’ if neither of those are set.

The @samp{$editor (@pxref{editor})} string may contain a @emph{%s} escape, which will be replaced by the name
of the file to be edited.  If the @emph{%s} escape does not appear in @samp{$editor (@pxref{editor})}, a
space and the name to be edited are appended.

The resulting string is then executed by running

@example

sh -c 'string'
@end example

where @emph{string} is the expansion of @samp{$editor (@pxref{editor})} described above.

@node encode_from, entropy_file, editor, Configuration Variables
@subsection encode_from

@display
Type: boolean
Default: no
@end display

When @emph{set}, mutt will quoted-printable encode messages when
they contain the string ‘From ’ (note the trailing space) in the beginning of a line.
This is useful to avoid the tampering certain mail delivery and transport
agents tend to do with messages (in order to prevent tools from
misinterpreting the line as a mbox message separator).

@node entropy_file, envelope_from_address, encode_from, Configuration Variables
@subsection entropy_file

@display
Type: path
Default: (empty)
@end display

The file which includes random data that is used to initialize SSL
library functions.

@node envelope_from_address, error_history, entropy_file, Configuration Variables
@subsection envelope_from_address

@display
Type: e-mail address
Default: (empty)
@end display

Manually sets the @emph{envelope} sender for outgoing messages.
This value is ignored if $use_envelope_from (@pxref{use_envelope_from}) is @emph{unset}.

@node error_history, escape, envelope_from_address, Configuration Variables
@subsection error_history

@display
Type: number
Default: 30
@end display

This variable controls the size (in number of strings remembered)
of the error messages displayed by mutt.  These can be shown with
the @samp{<error-history>} function.  The history is cleared each
time this variable is set.

@node escape, fast_reply, error_history, Configuration Variables
@subsection escape

@display
Type: string
Default: ‘~’
@end display

Escape character to use for functions in the built-in editor.

@node fast_reply, fcc_attach, escape, Configuration Variables
@subsection fast_reply

@display
Type: boolean
Default: no
@end display

When @emph{set}, the initial prompt for recipients and subject are skipped
when replying to messages, and the initial prompt for subject is
skipped when forwarding messages.

@strong{Note:} this variable has no effect when the $autoedit (@pxref{autoedit})
variable is @emph{set}.

@node fcc_attach, fcc_before_send, fast_reply, Configuration Variables
@subsection fcc_attach

@display
Type: quadoption
Default: yes
@end display

This variable controls whether or not attachments on outgoing messages
are saved along with the main body of your message.

@node fcc_before_send, fcc_clear, fcc_attach, Configuration Variables
@subsection fcc_before_send

@display
Type: boolean
Default: no
@end display

When this variable is @emph{set}, FCCs will occur before sending
the message.  Before sending, the message cannot be manipulated,
so it will be stored the exact same as sent:
$fcc_attach (@pxref{fcc_attach}) and $fcc_clear (@pxref{fcc_clear}) will be ignored (using their default
values).

When @emph{unset}, the default, FCCs will occur after sending.
Variables $fcc_attach (@pxref{fcc_attach}) and $fcc_clear (@pxref{fcc_clear}) will be respected, allowing
it to be stored without attachments or encryption/signing if
desired.

@node fcc_clear, fcc_delimiter, fcc_before_send, Configuration Variables
@subsection fcc_clear

@display
Type: boolean
Default: no
@end display

When this variable is @emph{set}, FCCs will be stored unencrypted and
unsigned, even when the actual message is encrypted and/or
signed.
(PGP only)

@node fcc_delimiter, flag_safe, fcc_clear, Configuration Variables
@subsection fcc_delimiter

@display
Type: string
Default: (empty)
@end display

When specified, this allows the ability to Fcc to more than one
mailbox.  The fcc value will be split by this delimiter and Mutt
will evaluate each part as a mailbox separately.

See $record (@pxref{record}), ‘fcc-hook (@pxref{Specify Default Fcc; Mailbox When Composing})’, and ‘fcc-save-hook (@pxref{Specify Default Save Filename and Default Fcc; Mailbox at Once})’.

@node flag_safe, folder, fcc_delimiter, Configuration Variables
@subsection flag_safe

@display
Type: boolean
Default: no
@end display

If set, flagged messages cannot be deleted.

@node folder, folder_format, flag_safe, Configuration Variables
@subsection folder

@display
Type: path
Default: ‘~/Mail’
@end display

Specifies the default location of your mailboxes.  A ‘+’ or ‘=’ at the
beginning of a pathname will be expanded to the value of this
variable.  Note that if you change this variable (from the default)
value you need to make sure that the assignment occurs @emph{before}
you use ‘+’ or ‘=’ for any other variables since expansion takes place
when handling the ‘mailboxes (@pxref{Monitoring Incoming Mail})’ command.

@node folder_format, followup_to, folder, Configuration Variables
@subsection folder_format

@display
Type: string
Default: ‘%2C %t %N %F %2l %-8.8u %-8.8g %8s %d %f’
@end display

This variable allows you to customize the file browser display to your
personal taste.  This string is similar to $index_format (@pxref{index_format}), but has
its own set of @samp{printf(3)}-like sequences:

@multitable @columnfractions 0.5 0.5
@item
%C  @tab current file number
@item
%d  @tab date/time folder was last modified
@item
%D  @tab date/time folder was last modified using $date_format (@pxref{date_format}).
@item
%f  @tab filename (‘/’ is appended to directory names,
‘@@’ to symbolic links and ‘*’ to executable
files)
@item
%F  @tab file permissions
@item
%g  @tab group name (or numeric gid, if missing)
@item
%l  @tab number of hard links
@item
%m  @tab number of messages in the mailbox *
@item
%n  @tab number of unread messages in the mailbox *
@item
%N  @tab N if mailbox has new mail, blank otherwise
@item
%s  @tab size in bytes (see formatstrings-size (@pxref{Bytes size display}))
@item
%t  @tab ‘*’ if the file is tagged, blank otherwise
@item
%u  @tab owner name (or numeric uid, if missing)
@item
%>X @tab right justify the rest of the string and pad with character ‘X’
@item
%|X @tab pad to the end of the line with character ‘X’
@item
%*X @tab soft-fill with character ‘X’ as pad
@end multitable

For an explanation of ‘soft-fill’, see the $index_format (@pxref{index_format}) documentation.

* = can be optionally printed if nonzero

%m, %n, and %N only work for monitored mailboxes.
%m requires $mail_check_stats (@pxref{mail_check_stats}) to be set.
%n requires $mail_check_stats (@pxref{mail_check_stats}) to be set (except for IMAP mailboxes).

@node followup_to, force_name, folder_format, Configuration Variables
@subsection followup_to

@display
Type: boolean
Default: yes
@end display

Controls whether or not the ‘Mail-Followup-To:’ header field is
generated when sending mail.  When @emph{set}, Mutt will generate this
field when you are replying to a known mailing list, specified with
the ‘subscribe (@pxref{subscribe})’ or ‘lists (@pxref{Mailing Lists <1>})’ commands.

This field has two purposes.  First, preventing you from
receiving duplicate copies of replies to messages which you send
to mailing lists, and second, ensuring that you do get a reply
separately for any messages sent to known lists to which you are
not subscribed.

The header will contain only the list's address
for subscribed lists, and both the list address and your own
email address for unsubscribed lists.  Without this header, a
group reply to your message sent to a subscribed list will be
sent to both the list and your address, resulting in two copies
of the same email for you.

@node force_name, forward_attachments, followup_to, Configuration Variables
@subsection force_name

@display
Type: boolean
Default: no
@end display

This variable is similar to $save_name (@pxref{save_name}), except that Mutt will
store a copy of your outgoing message by the username of the address
you are sending to even if that mailbox does not exist.

Also see the $record (@pxref{record}) variable.

@node forward_attachments, forward_attribution_intro, force_name, Configuration Variables
@subsection forward_attachments

@display
Type: quadoption
Default: ask-yes
@end display

When forwarding inline (i.e. $mime_forward (@pxref{mime_forward}) @emph{unset} or
answered with ‘no’ and $forward_decode (@pxref{forward_decode}) @emph{set}), attachments
which cannot be decoded in a reasonable manner will be attached
to the newly composed message if this quadoption is @emph{set} or
answered with ‘yes’.

@node forward_attribution_intro, forward_attribution_trailer, forward_attachments, Configuration Variables
@subsection forward_attribution_intro

@display
Type: string (localized)
Default: ‘----- Forwarded message from %f -----’
@end display

This is the string that will precede a message which has been forwarded
in the main body of a message (when $mime_forward (@pxref{mime_forward}) is unset).
For a full listing of defined @samp{printf(3)}-like sequences see
the section on $index_format (@pxref{index_format}).  See also $attribution_locale (@pxref{attribution_locale}).

@node forward_attribution_trailer, forward_decode, forward_attribution_intro, Configuration Variables
@subsection forward_attribution_trailer

@display
Type: string (localized)
Default: ‘----- End forwarded message -----’
@end display

This is the string that will follow a message which has been forwarded
in the main body of a message (when $mime_forward (@pxref{mime_forward}) is unset).
For a full listing of defined @samp{printf(3)}-like sequences see
the section on $index_format (@pxref{index_format}).  See also $attribution_locale (@pxref{attribution_locale}).

@node forward_decode, forward_decrypt, forward_attribution_trailer, Configuration Variables
@subsection forward_decode

@display
Type: boolean
Default: yes
@end display

Controls the decoding of complex MIME messages into @samp{text/plain} when
forwarding a message.  The message header is also RFC2047 decoded.
This variable is only used, if $mime_forward (@pxref{mime_forward}) is @emph{unset},
otherwise $mime_forward_decode (@pxref{mime_forward_decode}) is used instead.

@node forward_decrypt, forward_edit, forward_decode, Configuration Variables
@subsection forward_decrypt

@display
Type: boolean
Default: yes
@end display

Controls the handling of encrypted messages when forwarding a message.
When @emph{set}, the outer layer of encryption is stripped off.  This
variable is only used if $mime_forward (@pxref{mime_forward}) is @emph{set} and
$mime_forward_decode (@pxref{mime_forward_decode}) is @emph{unset}.
(PGP only)

@node forward_edit, forward_format, forward_decrypt, Configuration Variables
@subsection forward_edit

@display
Type: quadoption
Default: yes
@end display

This quadoption controls whether or not the user is automatically
placed in the editor when forwarding messages.  For those who always want
to forward with no modification, use a setting of ‘no’.

@node forward_format, forward_quote, forward_edit, Configuration Variables
@subsection forward_format

@display
Type: string
Default: ‘[%a: %s]’
@end display

This variable controls the default subject when forwarding a message.
It uses the same format sequences as the $index_format (@pxref{index_format}) variable.

@node forward_quote, from, forward_format, Configuration Variables
@subsection forward_quote

@display
Type: boolean
Default: no
@end display

When @emph{set}, forwarded messages included in the main body of the
message (when $mime_forward (@pxref{mime_forward}) is @emph{unset}) will be quoted using
$indent_string (@pxref{indent_string}).

@node from, gecos_mask, forward_quote, Configuration Variables
@subsection from

@display
Type: e-mail address
Default: (empty)
@end display

When @emph{set}, this variable contains a default from address.  It
can be overridden using ‘my_hdr (@pxref{User-Defined Headers})’ (including from a ‘send-hook (@pxref{Change Settings Based Upon Message Recipients})’) and
$reverse_name (@pxref{reverse_name}).  This variable is ignored if $use_from (@pxref{use_from}) is @emph{unset}.

This setting defaults to the contents of the environment variable @samp{$EMAIL}.

@node gecos_mask, hdrs, from, Configuration Variables
@subsection gecos_mask

@display
Type: regular expression
Default: ‘^[^,]*’
@end display

A regular expression used by mutt to parse the GECOS field of a password
entry when expanding the alias.  The default value
will return the string up to the first ‘,’ encountered.
If the GECOS field contains a string like ‘lastname, firstname’ then you
should set it to ‘@samp{.*}’.

This can be useful if you see the following behavior: you address an e-mail
to user ID ‘stevef’ whose full name is ‘Steve Franklin’.  If mutt expands
‘stevef’ to ‘"Franklin" stevef@@foo.bar’ then you should set the $gecos_mask (@pxref{gecos_mask}) to
a regular expression that will match the whole name so mutt will expand
‘Franklin’ to ‘Franklin, Steve’.

@node hdrs, header, gecos_mask, Configuration Variables
@subsection hdrs

@display
Type: boolean
Default: yes
@end display

When @emph{unset}, the header fields normally added by the ‘my_hdr (@pxref{User-Defined Headers})’
command are not created.  This variable @emph{must} be unset before
composing a new message or replying in order to take effect.  If @emph{set},
the user defined header fields are added to every new message.

@node header, header_cache, hdrs, Configuration Variables
@subsection header

@display
Type: boolean
Default: no
@end display

When @emph{set}, this variable causes Mutt to include the header
of the message you are replying to into the edit buffer.
The $weed (@pxref{weed}) setting applies.

@node header_cache, header_cache_compress, header, Configuration Variables
@subsection header_cache

@display
Type: path
Default: (empty)
@end display

This variable points to the header cache database.
If pointing to a directory Mutt will contain a header cache
database file per folder, if pointing to a file that file will
be a single global header cache. By default it is @emph{unset} so no header
caching will be used.

Header caching can greatly improve speed when opening POP, IMAP
MH or Maildir folders, see ‘caching (@pxref{Local Caching})’ for details.

@node header_cache_compress, header_cache_pagesize, header_cache, Configuration Variables
@subsection header_cache_compress

@display
Type: boolean
Default: yes
@end display

When mutt is compiled with qdbm, tokyocabinet, or kyotocabinet as header
cache backend, this option determines whether the database will be compressed.
Compression results in database files roughly being one fifth
of the usual diskspace, but the decompression can result in a
slower opening of cached folder(s) which in general is still
much faster than opening non header cached folders.

@node header_cache_pagesize, header_color_partial, header_cache_compress, Configuration Variables
@subsection header_cache_pagesize

@display
Type: number (long)
Default: 16384
@end display

When mutt is compiled with either gdbm or bdb4 as the header cache backend,
this option changes the database page size.  Too large or too small
values can waste space, memory, or CPU time. The default should be more
or less optimal for most use cases.

@node header_color_partial, help, header_cache_pagesize, Configuration Variables
@subsection header_color_partial

@display
Type: boolean
Default: no
@end display

When @emph{set}, color header regexps behave like color body regexps:
color is applied to the exact text matched by the regexp.  When
@emph{unset}, color is applied to the entire header.

One use of this option might be to apply color to just the header labels.

See ‘color (@pxref{Using Color and Mono Video Attributes})’ for more details.

@node help, hidden_host, header_color_partial, Configuration Variables
@subsection help

@display
Type: boolean
Default: yes
@end display

When @emph{set}, help lines describing the bindings for the major functions
provided by each menu are displayed on the first line of the screen.

@strong{Note:} The binding will not be displayed correctly if the
function is bound to a sequence rather than a single keystroke.  Also,
the help line may not be updated if a binding is changed while Mutt is
running.  Since this variable is primarily aimed at new users, neither
of these should present a major problem.

@node hidden_host, hide_limited, help, Configuration Variables
@subsection hidden_host

@display
Type: boolean
Default: no
@end display

When @emph{set}, mutt will skip the host name part of $hostname (@pxref{hostname}) variable
when adding the domain part to addresses.  This variable does not
affect the generation of Message-IDs, and it will not lead to the
cut-off of first-level domains.

@node hide_limited, hide_missing, hidden_host, Configuration Variables
@subsection hide_limited

@display
Type: boolean
Default: no
@end display

When @emph{set}, mutt will not show the presence of messages that are hidden
by limiting, in the thread tree.

@node hide_missing, hide_thread_subject, hide_limited, Configuration Variables
@subsection hide_missing

@display
Type: boolean
Default: yes
@end display

When @emph{set}, mutt will not show the presence of missing messages in the
thread tree.

@node hide_thread_subject, hide_top_limited, hide_missing, Configuration Variables
@subsection hide_thread_subject

@display
Type: boolean
Default: yes
@end display

When @emph{set}, mutt will not show the subject of messages in the thread
tree that have the same subject as their parent or closest previously
displayed sibling.

@node hide_top_limited, hide_top_missing, hide_thread_subject, Configuration Variables
@subsection hide_top_limited

@display
Type: boolean
Default: no
@end display

When @emph{set}, mutt will not show the presence of messages that are hidden
by limiting, at the top of threads in the thread tree.  Note that when
$hide_limited (@pxref{hide_limited}) is @emph{set}, this option will have no effect.

@node hide_top_missing, history, hide_top_limited, Configuration Variables
@subsection hide_top_missing

@display
Type: boolean
Default: yes
@end display

When @emph{set}, mutt will not show the presence of missing messages at the
top of threads in the thread tree.  Note that when $hide_missing (@pxref{hide_missing}) is
@emph{set}, this option will have no effect.

@node history, history_file, hide_top_missing, Configuration Variables
@subsection history

@display
Type: number
Default: 10
@end display

This variable controls the size (in number of strings remembered) of
the string history buffer per category. The buffer is cleared each time the
variable is set.

@node history_file, history_remove_dups, history, Configuration Variables
@subsection history_file

@display
Type: path
Default: ‘~/.mutthistory’
@end display

The file in which Mutt will save its history.

Also see $save_history (@pxref{save_history}).

@node history_remove_dups, honor_disposition, history_file, Configuration Variables
@subsection history_remove_dups

@display
Type: boolean
Default: no
@end display

When @emph{set}, all of the string history will be scanned for duplicates
when a new entry is added.  Duplicate entries in the $history_file (@pxref{history_file}) will
also be removed when it is periodically compacted.

@node honor_disposition, honor_followup_to, history_remove_dups, Configuration Variables
@subsection honor_disposition

@display
Type: boolean
Default: no
@end display

When @emph{set}, Mutt will not display attachments with a
disposition of ‘attachment’ inline even if it could
render the part to plain text. These MIME parts can only
be viewed from the attachment menu.

If @emph{unset}, Mutt will render all MIME parts it can
properly transform to plain text.

@node honor_followup_to, hostname, honor_disposition, Configuration Variables
@subsection honor_followup_to

@display
Type: quadoption
Default: yes
@end display

This variable controls whether or not a Mail-Followup-To header is
honored when group-replying to a message.

@node hostname, idn_decode, honor_followup_to, Configuration Variables
@subsection hostname

@display
Type: string
Default: (empty)
@end display

Specifies the fully-qualified hostname of the system mutt is running on
containing the host's name and the DNS domain it belongs to. It is used
as the domain part (after ‘@@’) for local email addresses as well as
Message-Id headers.

Its value is determined at startup as follows: the node's
hostname is first determined by the @samp{uname(3)} function.  The
domain is then looked up using the @samp{gethostname(2)} and
@samp{getaddrinfo(3)} functions.  If those calls are unable to
determine the domain, the full value returned by uname is used.
Optionally, Mutt can be compiled with a fixed domain name in
which case a detected one is not used.

Starting in Mutt 2.0, the operations described in the previous
paragraph are performed after the muttrc is processed, instead of
beforehand.  This way, if the DNS operations are creating delays
at startup, you can avoid those by manually setting the value in
your muttrc.

Also see $use_domain (@pxref{use_domain}) and $hidden_host (@pxref{hidden_host}).

@node idn_decode, idn_encode, hostname, Configuration Variables
@subsection idn_decode

@display
Type: boolean
Default: yes
@end display

When @emph{set}, Mutt will show you international domain names decoded.
Note: You can use IDNs for addresses even if this is @emph{unset}.
This variable only affects decoding. (IDN only)

@node idn_encode, ignore_linear_white_space, idn_decode, Configuration Variables
@subsection idn_encode

@display
Type: boolean
Default: yes
@end display

When @emph{set}, Mutt will encode international domain names using
IDN.  Unset this if your SMTP server can handle newer (RFC 6531)
UTF-8 encoded domains. (IDN only)

@node ignore_linear_white_space, ignore_list_reply_to, idn_encode, Configuration Variables
@subsection ignore_linear_white_space

@display
Type: boolean
Default: no
@end display

This option replaces linear-white-space between encoded-word
and text to a single space to prevent the display of MIME-encoded
‘Subject:’ field from being divided into multiple lines.

@node ignore_list_reply_to, imap_authenticators, ignore_linear_white_space, Configuration Variables
@subsection ignore_list_reply_to

@display
Type: boolean
Default: no
@end display

Affects the behavior of the @samp{<reply>} function when replying to
messages from mailing lists (as defined by the ‘subscribe (@pxref{subscribe})’ or
‘lists (@pxref{Mailing Lists <1>})’ commands).  When @emph{set}, if the ‘Reply-To:’ field is
set to the same value as the ‘To:’ field, Mutt assumes that the
‘Reply-To:’ field was set by the mailing list to automate responses
to the list, and will ignore this field.  To direct a response to the
mailing list when this option is @emph{set}, use the @samp{<list-reply> (@pxref{list-reply})}
function; @samp{<group-reply>} will reply to both the sender and the
list.

@node imap_authenticators, imap_check_subscribed, ignore_list_reply_to, Configuration Variables
@subsection imap_authenticators

@display
Type: string
Default: (empty)
@end display

This is a colon-delimited list of authentication methods mutt may
attempt to use to log in to an IMAP server, in the order mutt should
try them.  Authentication methods are either ‘login’ or the right
side of an IMAP ‘AUTH=xxx’ capability string, e.g. ‘digest-md5’, ‘gssapi’
or ‘cram-md5’. This option is case-insensitive. If it's
@emph{unset} (the default) mutt will try all available methods,
in order from most-secure to least-secure.

Example:

@example

set imap_authenticators="gssapi:cram-md5:login"
@end example

@strong{Note:} Mutt will only fall back to other authentication methods if
the previous methods are unavailable. If a method is available but
authentication fails, mutt will not connect to the IMAP server.

@node imap_check_subscribed, imap_condstore, imap_authenticators, Configuration Variables
@subsection imap_check_subscribed

@display
Type: boolean
Default: no
@end display

When @emph{set}, mutt will fetch the set of subscribed folders from
your server on connection, and add them to the set of mailboxes
it polls for new mail just as if you had issued individual ‘mailboxes (@pxref{Monitoring Incoming Mail})’
commands.

@node imap_condstore, imap_deflate, imap_check_subscribed, Configuration Variables
@subsection imap_condstore

@display
Type: boolean
Default: no
@end display

When @emph{set}, mutt will use the CONDSTORE extension (RFC 7162)
if advertised by the server.  Mutt's current implementation is basic,
used only for initial message fetching and flag updates.

For some IMAP servers, enabling this will slightly speed up
downloading initial messages.  Unfortunately, Gmail is not one
those, and displays worse performance when enabled.  Your
mileage may vary.

@node imap_deflate, imap_delim_chars, imap_condstore, Configuration Variables
@subsection imap_deflate

@display
Type: boolean
Default: no
@end display

When @emph{set}, mutt will use the COMPRESS=DEFLATE extension (RFC
4978) if advertised by the server.

In general a good compression efficiency can be achieved, which
speeds up reading large mailboxes also on fairly good connections.

@node imap_delim_chars, imap_fetch_chunk_size, imap_deflate, Configuration Variables
@subsection imap_delim_chars

@display
Type: string
Default: ‘/.’
@end display

This contains the list of characters which you would like to treat
as folder separators for displaying IMAP paths. In particular it
helps in using the ‘=’ shortcut for your @emph{folder} variable.

@node imap_fetch_chunk_size, imap_headers, imap_delim_chars, Configuration Variables
@subsection imap_fetch_chunk_size

@display
Type: number (long)
Default: 0
@end display

When set to a value greater than 0, new headers will be
downloaded in groups of this many headers per request.  If you
have a very large mailbox, this might prevent a timeout and
disconnect when opening the mailbox, by sending a FETCH per set
of this many headers, instead of a single FETCH for all new
headers.

@node imap_headers, imap_idle, imap_fetch_chunk_size, Configuration Variables
@subsection imap_headers

@display
Type: string
Default: (empty)
@end display

Mutt requests these header fields in addition to the default headers
(‘Date:’, ‘From:’, ‘Sender:’, ‘Subject:’, ‘To:’, ‘Cc:’, ‘Message-Id:’,
‘References:’, ‘Content-Type:’, ‘Content-Description:’, ‘In-Reply-To:’,
‘Reply-To:’, ‘Lines:’, ‘List-Post:’, ‘X-Label:’) from IMAP
servers before displaying the index menu. You may want to add more
headers for spam detection.

@strong{Note:} This is a space separated list, items should be uppercase
and not contain the colon, e.g. ‘X-BOGOSITY X-SPAM-STATUS’ for the
‘X-Bogosity:’ and ‘X-Spam-Status:’ header fields.

@node imap_idle, imap_keepalive, imap_headers, Configuration Variables
@subsection imap_idle

@display
Type: boolean
Default: no
@end display

When @emph{set}, mutt will attempt to use the IMAP IDLE extension
to check for new mail in the current mailbox. Some servers
(dovecot was the inspiration for this option) react badly
to mutt's implementation. If your connection seems to freeze
up periodically, try unsetting this.

@node imap_keepalive, imap_list_subscribed, imap_idle, Configuration Variables
@subsection imap_keepalive

@display
Type: number
Default: 300
@end display

This variable specifies the maximum amount of time in seconds that mutt
will wait before polling open IMAP connections, to prevent the server
from closing them before mutt has finished with them. The default is
well within the RFC-specified minimum amount of time (30 minutes) before
a server is allowed to do this, but in practice the RFC does get
violated every now and then. Reduce this number if you find yourself
getting disconnected from your IMAP server due to inactivity.

@node imap_list_subscribed, imap_login, imap_keepalive, Configuration Variables
@subsection imap_list_subscribed

@display
Type: boolean
Default: no
@end display

This variable configures whether IMAP folder browsing will look for
only subscribed folders or all folders.  This can be toggled in the
IMAP browser with the @samp{<toggle-subscribed>} function.

@node imap_login, imap_oauth_refresh_command, imap_list_subscribed, Configuration Variables
@subsection imap_login

@display
Type: string
Default: (empty)
@end display

Your login name on the IMAP server.

This variable defaults to the value of $imap_user (@pxref{imap_user}).

@node imap_oauth_refresh_command, imap_pass, imap_login, Configuration Variables
@subsection imap_oauth_refresh_command

@display
Type: string
Default: (empty)
@end display

The command to run to generate an OAUTH refresh token for
authorizing your connection to your IMAP server.  This command will be
run on every connection attempt that uses the OAUTHBEARER authentication
mechanism.  See ‘oauth (@pxref{OAUTHBEARER Support})’ for details.

@node imap_pass, imap_passive, imap_oauth_refresh_command, Configuration Variables
@subsection imap_pass

@display
Type: string
Default: (empty)
@end display

Specifies the password for your IMAP account.  If @emph{unset}, Mutt will
prompt you for your password when you invoke the @samp{<imap-fetch-mail>} function
or try to open an IMAP folder.

@strong{Warning}: you should only use this option when you are on a
fairly secure machine, because the superuser can read your muttrc even
if you are the only one who can read the file.

@node imap_passive, imap_peek, imap_pass, Configuration Variables
@subsection imap_passive

@display
Type: boolean
Default: yes
@end display

When @emph{set}, mutt will not open new IMAP connections to check for new
mail.  Mutt will only check for new mail over existing IMAP
connections.  This is useful if you don't want to be prompted for
user/password pairs on mutt invocation, or if opening the connection
is slow.

@node imap_peek, imap_pipeline_depth, imap_passive, Configuration Variables
@subsection imap_peek

@display
Type: boolean
Default: yes
@end display

When @emph{set}, mutt will avoid implicitly marking your mail as read whenever
you fetch a message from the server. This is generally a good thing,
but can make closing an IMAP folder somewhat slower. This option
exists to appease speed freaks.

@node imap_pipeline_depth, imap_poll_timeout, imap_peek, Configuration Variables
@subsection imap_pipeline_depth

@display
Type: number
Default: 15
@end display

Controls the number of IMAP commands that may be queued up before they
are sent to the server. A deeper pipeline reduces the amount of time
mutt must wait for the server, and can make IMAP servers feel much
more responsive. But not all servers correctly handle pipelined commands,
so if you have problems you might want to try setting this variable to 0.

@strong{Note:} Changes to this variable have no effect on open connections.

@node imap_poll_timeout, imap_qresync, imap_pipeline_depth, Configuration Variables
@subsection imap_poll_timeout

@display
Type: number
Default: 15
@end display

This variable specifies the maximum amount of time in seconds
that mutt will wait for a response when polling IMAP connections
for new mail, before timing out and closing the connection.  Set
to 0 to disable timing out.

@node imap_qresync, imap_servernoise, imap_poll_timeout, Configuration Variables
@subsection imap_qresync

@display
Type: boolean
Default: no
@end display

When @emph{set}, mutt will use the QRESYNC extension (RFC 7162)
if advertised by the server.  Mutt's current implementation is basic,
used only for initial message fetching and flag updates.

Note: this feature is currently experimental.  If you experience
strange behavior, such as duplicate or missing messages please
file a bug report to let us know.

@node imap_servernoise, imap_user, imap_qresync, Configuration Variables
@subsection imap_servernoise

@display
Type: boolean
Default: yes
@end display

When @emph{set}, mutt will display warning messages from the IMAP
server as error messages. Since these messages are often
harmless, or generated due to configuration problems on the
server which are out of the users' hands, you may wish to suppress
them at some point.

@node imap_user, implicit_autoview, imap_servernoise, Configuration Variables
@subsection imap_user

@display
Type: string
Default: (empty)
@end display

The name of the user whose mail you intend to access on the IMAP
server.

This variable defaults to your user name on the local machine.

@node implicit_autoview, include, imap_user, Configuration Variables
@subsection implicit_autoview

@display
Type: boolean
Default: no
@end display

If set to ‘yes’, mutt will look for a mailcap entry with the
‘@samp{copiousoutput}’ flag set for @emph{every} MIME attachment it doesn't have
an internal viewer defined for.  If such an entry is found, mutt will
use the viewer defined in that entry to convert the body part to text
form.

@node include, include_encrypted, implicit_autoview, Configuration Variables
@subsection include

@display
Type: quadoption
Default: ask-yes
@end display

Controls whether or not a copy of the message(s) you are replying to
is included in your reply.

@node include_encrypted, include_onlyfirst, include, Configuration Variables
@subsection include_encrypted

@display
Type: boolean
Default: no
@end display

Controls whether or not Mutt includes separately encrypted attachment
contents when replying.

This variable was added to prevent accidental exposure of encrypted
contents when replying to an attacker.  If a previously encrypted message
were attached by the attacker, they could trick an unwary recipient into
decrypting and including the message in their reply.

@node include_onlyfirst, indent_string, include_encrypted, Configuration Variables
@subsection include_onlyfirst

@display
Type: boolean
Default: no
@end display

Controls whether or not Mutt includes only the first attachment
of the message you are replying.

@node indent_string, index_format, include_onlyfirst, Configuration Variables
@subsection indent_string

@display
Type: string
Default: ‘> ’
@end display

Specifies the string to prepend to each line of text quoted in a
message to which you are replying.  You are strongly encouraged not to
change this value, as it tends to agitate the more fanatical netizens.

The value of this option is ignored if $text_flowed (@pxref{text_flowed}) is set, because
the quoting mechanism is strictly defined for format=flowed.

This option is a format string, please see the description of
$index_format (@pxref{index_format}) for supported @samp{printf(3)}-style sequences.

@node index_format, ispell, indent_string, Configuration Variables
@subsection index_format

@display
Type: string
Default: ‘%4C %Z %@{%b %d@} %-15.15L (%?l?%4l&%4c?) %s’
@end display

This variable allows you to customize the message index display to
your personal taste.

‘Format strings’ are similar to the strings used in the C
function @samp{printf(3)} to format output (see the man page for more details).
For an explanation of the %? construct, see the $status_format (@pxref{status_format}) description.
The following sequences are defined in Mutt:

@multitable @columnfractions 0.5 0.5
@item
%a @tab address of the author
@item
%A @tab reply-to address (if present; otherwise: address of author)
@item
%b @tab filename of the original message folder (think mailbox)
@item
%B @tab the list to which the letter was sent, or else the folder name (%b).
@item
%c @tab number of characters (bytes) in the message (see formatstrings-size (@pxref{Bytes size display}))
@item
%C @tab current message number
@item
%d @tab date and time of the message in the format specified by
$date_format (@pxref{date_format}) converted to sender's time zone
@item
%D @tab date and time of the message in the format specified by
$date_format (@pxref{date_format}) converted to the local time zone
@item
%e @tab current message number in thread
@item
%E @tab number of messages in current thread
@item
%f @tab sender (address + real name), either From: or Return-Path:
@item
%F @tab author name, or recipient name if the message is from you
@item
%H @tab spam attribute(s) of this message
@item
%i @tab message-id of the current message
@item
%l @tab number of lines in the unprocessed message (may not work with
maildir, mh, and IMAP folders)
@item
%L @tab If an address in the ‘To:’ or ‘Cc:’ header field matches an address
defined by the users ‘subscribe (@pxref{subscribe})’ command, this displays
"To <list-name>", otherwise the same as %F.
@item
%m @tab total number of message in the mailbox
@item
%M @tab number of hidden messages if the thread is collapsed.
@item
%N @tab message score
@item
%n @tab author's real name (or address if missing)
@item
%O @tab original save folder where mutt would formerly have
stashed the message: list name or recipient name
if not sent to a list
@item
%P @tab progress indicator for the built-in pager (how much of the file has been displayed)
@item
%r @tab comma separated list of ‘To:’ recipients
@item
%R @tab comma separated list of ‘Cc:’ recipients
@item
%s @tab subject of the message
@item
%S @tab single character status of the message (‘N’/‘O’/‘D’/‘d’/‘!’/‘r’/‘*’)
@item
%t @tab ‘To:’ field (recipients)
@item
%T @tab the appropriate character from the $to_chars (@pxref{to_chars}) string
@item
%u @tab user (login) name of the author
@item
%v @tab first name of the author, or the recipient if the message is from you
@item
%X @tab number of attachments
(please see the ‘attachments (@pxref{Attachment Searching and Counting})’ section for possible speed effects)
@item
%y @tab ‘X-Label:’ field, if present
@item
%Y @tab ‘X-Label:’ field, if present, and @emph{(1)} not at part of a thread tree,
@emph{(2)} at the top of a thread, or @emph{(3)}‘X-Label:’ is different from
preceding message's ‘X-Label:’.
@item
%Z @tab a three character set of message status flags.
the first character is new/read/replied flags (‘n’/‘o’/‘r’/‘O’/‘N’).
the second is deleted or encryption flags (‘D’/‘d’/‘S’/‘P’/‘s’/‘K’).
the third is either tagged/flagged (‘*’/‘!’), or one of the characters
listed in $to_chars (@pxref{to_chars}).
@item
%@@name@@ @tab insert and evaluate format-string from the matching
‘index-format-hook (@pxref{Dynamically Changing $index_format using Patterns})’ command
@item
%@{fmt@} @tab the date and time of the message is converted to sender's
time zone, and ‘fmt’ is expanded by the library function
@samp{strftime(3)}; a leading bang disables locales
@item
%[fmt] @tab the date and time of the message is converted to the local
time zone, and ‘fmt’ is expanded by the library function
@samp{strftime(3)}; a leading bang disables locales
@item
%(fmt) @tab the local date and time when the message was received.
‘fmt’ is expanded by the library function @samp{strftime(3)};
a leading bang disables locales
@item
%<fmt> @tab the current local time. ‘fmt’ is expanded by the library
function @samp{strftime(3)}; a leading bang disables locales.
@item
%>X    @tab right justify the rest of the string and pad with character ‘X’
@item
%|X    @tab pad to the end of the line with character ‘X’
@item
%*X    @tab soft-fill with character ‘X’ as pad
@end multitable

Note that for mbox/mmdf, ‘%l’ applies to the unprocessed message, and
for maildir/mh, the value comes from the ‘Lines:’ header field when
present (the meaning is normally the same). Thus the value depends on
the encodings used in the different parts of the message and has little
meaning in practice.

‘Soft-fill’ deserves some explanation: Normal right-justification
will print everything to the left of the ‘%>’, displaying padding and
whatever lies to the right only if there's room. By contrast,
soft-fill gives priority to the right-hand side, guaranteeing space
to display it and showing padding only if there's still room. If
necessary, soft-fill will eat text leftwards to make room for
rightward text.

Note that these expandos are supported in
‘save-hook (@pxref{Specify Default Save Mailbox})’, ‘fcc-hook (@pxref{Specify Default Fcc; Mailbox When Composing})’, ‘fcc-save-hook (@pxref{Specify Default Save Filename and Default Fcc; Mailbox at Once})’, and
‘index-format-hook (@pxref{Dynamically Changing $index_format using Patterns})’.

They are also supported in the configuration variables $attribution (@pxref{attribution}),
$forward_attribution_intro (@pxref{forward_attribution_intro}), $forward_attribution_trailer (@pxref{forward_attribution_trailer}),
$forward_format (@pxref{forward_format}), $indent_string (@pxref{indent_string}), $message_format (@pxref{message_format}), $pager_format (@pxref{pager_format}),
and $post_indent_string (@pxref{post_indent_string}).

@node ispell, keep_flagged, index_format, Configuration Variables
@subsection ispell

@display
Type: path
Default: ‘/usr/bin/ispell’
@end display

How to invoke ispell (GNU's spell-checking software).

@node keep_flagged, mail_check, ispell, Configuration Variables
@subsection keep_flagged

@display
Type: boolean
Default: no
@end display

If @emph{set}, read messages marked as flagged will not be moved
from your spool mailbox to your $mbox (@pxref{mbox}) mailbox, or as a result of
a ‘mbox-hook (@pxref{Using Multiple Spool Mailboxes})’ command.

@node mail_check, mail_check_recent, keep_flagged, Configuration Variables
@subsection mail_check

@display
Type: number
Default: 5
@end display

This variable configures how often (in seconds) mutt should look for
new mail. Also see the $timeout (@pxref{timeout}) variable.

@node mail_check_recent, mail_check_stats, mail_check, Configuration Variables
@subsection mail_check_recent

@display
Type: boolean
Default: yes
@end display

When @emph{set}, Mutt will only notify you about new mail that has been received
since the last time you opened the mailbox.  When @emph{unset}, Mutt will notify you
if any new mail exists in the mailbox, regardless of whether you have visited it
recently.

When @emph{$mark_old (@pxref{mark_old})} is set, Mutt does not consider the mailbox to contain new
mail if only old messages exist.

@node mail_check_stats, mail_check_stats_interval, mail_check_recent, Configuration Variables
@subsection mail_check_stats

@display
Type: boolean
Default: no
@end display

When @emph{set}, mutt will periodically calculate message
statistics of a mailbox while polling for new mail.  It will
check for unread, flagged, and total message counts.  Because
this operation is more performance intensive, it defaults to
@emph{unset}, and has a separate option, $mail_check_stats_interval (@pxref{mail_check_stats_interval}), to
control how often to update these counts.

Message statistics can also be explicitly calculated by invoking the
@samp{<check-stats>}
function.

@node mail_check_stats_interval, mailcap_path, mail_check_stats, Configuration Variables
@subsection mail_check_stats_interval

@display
Type: number
Default: 60
@end display

When $mail_check_stats (@pxref{mail_check_stats}) is @emph{set}, this variable configures
how often (in seconds) mutt will update message counts.

@node mailcap_path, mailcap_sanitize, mail_check_stats_interval, Configuration Variables
@subsection mailcap_path

@display
Type: string
Default: (empty)
@end display

This variable specifies which files to consult when attempting to
display MIME bodies not directly supported by Mutt.  The default value
is generated during startup: see the ‘mailcap (@pxref{MIME Viewer Configuration with Mailcap})’ section of the manual.

@node mailcap_sanitize, maildir_header_cache_verify, mailcap_path, Configuration Variables
@subsection mailcap_sanitize

@display
Type: boolean
Default: yes
@end display

If @emph{set}, mutt will restrict possible characters in mailcap % expandos
to a well-defined set of safe characters.  This is the safe setting,
but we are not sure it doesn't break some more advanced MIME stuff.

@strong{DON'T CHANGE THIS SETTING UNLESS YOU ARE REALLY SURE WHAT YOU ARE
DOING!}

@node maildir_header_cache_verify, maildir_trash, mailcap_sanitize, Configuration Variables
@subsection maildir_header_cache_verify

@display
Type: boolean
Default: yes
@end display

Check for Maildir unaware programs other than mutt having modified maildir
files when the header cache is in use.  This incurs one @samp{stat(2)} per
message every time the folder is opened (which can be very slow for NFS
folders).

@node maildir_trash, maildir_check_cur, maildir_header_cache_verify, Configuration Variables
@subsection maildir_trash

@display
Type: boolean
Default: no
@end display

If @emph{set}, messages marked as deleted will be saved with the maildir
trashed flag instead of unlinked.  @strong{Note:} this only applies
to maildir-style mailboxes.  Setting it will have no effect on other
mailbox types.

@node maildir_check_cur, mark_macro_prefix, maildir_trash, Configuration Variables
@subsection maildir_check_cur

@display
Type: boolean
Default: no
@end display

If @emph{set}, mutt will poll both the new and cur directories of
a maildir folder for new messages.  This might be useful if other
programs interacting with the folder (e.g. dovecot) are moving new
messages to the cur directory.  Note that setting this option may
slow down polling for new messages in large folders, since mutt has
to scan all cur messages.

@node mark_macro_prefix, mark_old, maildir_check_cur, Configuration Variables
@subsection mark_macro_prefix

@display
Type: string
Default: ‘'’
@end display

Prefix for macros created using mark-message.  A new macro
automatically generated with @emph{<mark-message>a} will be composed
from this prefix and the letter @emph{a}.

@node mark_old, markers, mark_macro_prefix, Configuration Variables
@subsection mark_old

@display
Type: boolean
Default: yes
@end display

Controls whether or not mutt marks @emph{new} @strong{unread}
messages as @emph{old} if you exit a mailbox without reading them.
With this option @emph{set}, the next time you start mutt, the messages
will show up with an ‘O’ next to them in the index menu,
indicating that they are old.

@node markers, mask, mark_old, Configuration Variables
@subsection markers

@display
Type: boolean
Default: yes
@end display

Controls the display of wrapped lines in the internal pager. If set, a
‘+’ marker is displayed at the beginning of wrapped lines.

Also see the $smart_wrap (@pxref{smart_wrap}) variable.

@node mask, mbox, markers, Configuration Variables
@subsection mask

@display
Type: regular expression
Default: ‘!^\.[^.]’
@end display

A regular expression used in the file browser, optionally preceded by
the @emph{not} operator ‘!’.  Only files whose names match this mask
will be shown. The match is always case-sensitive.

@node mbox, mbox_type, mask, Configuration Variables
@subsection mbox

@display
Type: path
Default: ‘~/mbox’
@end display

This specifies the folder into which read mail in your $spoolfile (@pxref{spoolfile})
folder will be appended.

Also see the $move (@pxref{move}) variable.

@node mbox_type, menu_context, mbox, Configuration Variables
@subsection mbox_type

@display
Type: folder magic
Default: mbox
@end display

The default mailbox type used when creating new folders. May be any of
‘mbox’, ‘MMDF’, ‘MH’ and ‘Maildir’. This is overridden by the
@samp{-m} command-line option.

@node menu_context, menu_move_off, mbox_type, Configuration Variables
@subsection menu_context

@display
Type: number
Default: 0
@end display

This variable controls the number of lines of context that are given
when scrolling through menus. (Similar to $pager_context (@pxref{pager_context}).)

@node menu_move_off, menu_scroll, menu_context, Configuration Variables
@subsection menu_move_off

@display
Type: boolean
Default: yes
@end display

When @emph{unset}, the bottom entry of menus will never scroll up past
the bottom of the screen, unless there are less entries than lines.
When @emph{set}, the bottom entry may move off the bottom.

@node menu_scroll, message_cache_clean, menu_move_off, Configuration Variables
@subsection menu_scroll

@display
Type: boolean
Default: no
@end display

When @emph{set}, menus will be scrolled up or down one line when you
attempt to move across a screen boundary.  If @emph{unset}, the screen
is cleared and the next or previous page of the menu is displayed
(useful for slow links to avoid many redraws).

@node message_cache_clean, message_cachedir, menu_scroll, Configuration Variables
@subsection message_cache_clean

@display
Type: boolean
Default: no
@end display

If @emph{set}, mutt will clean out obsolete entries from the message cache when
the mailbox is synchronized. You probably only want to set it
every once in a while, since it can be a little slow
(especially for large folders).

@node message_cachedir, message_format, message_cache_clean, Configuration Variables
@subsection message_cachedir

@display
Type: path
Default: (empty)
@end display

Set this to a directory and mutt will cache copies of messages from
your IMAP and POP servers here. You are free to remove entries at any
time.

When setting this variable to a directory, mutt needs to fetch every
remote message only once and can perform regular expression searches
as fast as for local folders.

Also see the $message_cache_clean (@pxref{message_cache_clean}) variable.

@node message_format, meta_key, message_cachedir, Configuration Variables
@subsection message_format

@display
Type: string
Default: ‘%s’
@end display

This is the string displayed in the ‘attachment’ menu for
attachments of type @samp{message/rfc822}.  For a full listing of defined
@samp{printf(3)}-like sequences see the section on $index_format (@pxref{index_format}).

@node meta_key, metoo, message_format, Configuration Variables
@subsection meta_key

@display
Type: boolean
Default: no
@end display

If @emph{set}, forces Mutt to interpret keystrokes with the high bit (bit 8)
set as if the user had pressed the Esc key and whatever key remains
after having the high bit removed.  For example, if the key pressed
has an ASCII value of @samp{0xf8}, then this is treated as if the user had
pressed Esc then ‘x’.  This is because the result of removing the
high bit from @samp{0xf8} is @samp{0x78}, which is the ASCII character
‘x’.

@node metoo, mh_purge, meta_key, Configuration Variables
@subsection metoo

@display
Type: boolean
Default: no
@end display

If @emph{unset}, Mutt will remove your address (see the ‘alternates (@pxref{Alternative Addresses})’
command) from the list of recipients when replying to a message.

@node mh_purge, mh_seq_flagged, metoo, Configuration Variables
@subsection mh_purge

@display
Type: boolean
Default: no
@end display

When @emph{unset}, mutt will mimic mh's behavior and rename deleted messages
to @emph{,<old file name>} in mh folders instead of really deleting
them. This leaves the message on disk but makes programs reading the folder
ignore it. If the variable is @emph{set}, the message files will simply be
deleted.

This option is similar to $maildir_trash (@pxref{maildir_trash}) for Maildir folders.

@node mh_seq_flagged, mh_seq_replied, mh_purge, Configuration Variables
@subsection mh_seq_flagged

@display
Type: string
Default: ‘flagged’
@end display

The name of the MH sequence used for flagged messages.

@node mh_seq_replied, mh_seq_unseen, mh_seq_flagged, Configuration Variables
@subsection mh_seq_replied

@display
Type: string
Default: ‘replied’
@end display

The name of the MH sequence used to tag replied messages.

@node mh_seq_unseen, mime_forward, mh_seq_replied, Configuration Variables
@subsection mh_seq_unseen

@display
Type: string
Default: ‘unseen’
@end display

The name of the MH sequence used for unseen messages.

@node mime_forward, mime_forward_decode, mh_seq_unseen, Configuration Variables
@subsection mime_forward

@display
Type: quadoption
Default: no
@end display

When @emph{set}, the message you are forwarding will be attached as a
separate @samp{message/rfc822} MIME part instead of included in the main body of the
message.  This is useful for forwarding MIME messages so the receiver
can properly view the message as it was delivered to you. If you like
to switch between MIME and not MIME from mail to mail, set this
variable to ‘ask-no’ or ‘ask-yes’.

Also see $forward_decode (@pxref{forward_decode}) and $mime_forward_decode (@pxref{mime_forward_decode}).

@node mime_forward_decode, mime_forward_rest, mime_forward, Configuration Variables
@subsection mime_forward_decode

@display
Type: boolean
Default: no
@end display

Controls the decoding of complex MIME messages into @samp{text/plain} when
forwarding a message while $mime_forward (@pxref{mime_forward}) is @emph{set}. Otherwise
$forward_decode (@pxref{forward_decode}) is used instead.

@node mime_forward_rest, mime_type_query_command, mime_forward_decode, Configuration Variables
@subsection mime_forward_rest

@display
Type: quadoption
Default: yes
@end display

When forwarding multiple attachments of a MIME message from the attachment
menu, attachments which cannot be decoded in a reasonable manner will
be attached to the newly composed message if this option is @emph{set}.

@node mime_type_query_command, mime_type_query_first, mime_forward_rest, Configuration Variables
@subsection mime_type_query_command

@display
Type: string
Default: (empty)
@end display

This specifies a command to run, to determine the mime type of a
new attachment when composing a message.  Unless
$mime_type_query_first (@pxref{mime_type_query_first}) is set, this will only be run if the
attachment's extension is not found in the mime.types file.

The string may contain a ‘%s’, which will be substituted with the
attachment filename.  Mutt will add quotes around the string substituted
for ‘%s’ automatically according to shell quoting rules, so you should
avoid adding your own.  If no ‘%s’ is found in the string, Mutt will
append the attachment filename to the end of the string.

The command should output a single line containing the
attachment's mime type.

Suggested values are ‘xdg-mime query filetype’ or
‘file -bi’.

@node mime_type_query_first, mix_entry_format, mime_type_query_command, Configuration Variables
@subsection mime_type_query_first

@display
Type: boolean
Default: no
@end display

When @emph{set}, the $mime_type_query_command (@pxref{mime_type_query_command}) will be run before the
mime.types lookup.

@node mix_entry_format, mixmaster, mime_type_query_first, Configuration Variables
@subsection mix_entry_format

@display
Type: string
Default: ‘%4n %c %-16s %a’
@end display

This variable describes the format of a remailer line on the mixmaster
chain selection screen.  The following @samp{printf(3)}-like sequences are
supported:

@multitable @columnfractions 0.5 0.5
@item
%n @tab The running number on the menu.
@item
%c @tab Remailer capabilities.
@item
%s @tab The remailer's short name.
@item
%a @tab The remailer's e-mail address.
@end multitable

@node mixmaster, move, mix_entry_format, Configuration Variables
@subsection mixmaster

@display
Type: path
Default: ‘mixmaster’
@end display

This variable contains the path to the Mixmaster binary on your
system.  It is used with various sets of parameters to gather the
list of known remailers, and to finally send a message through the
mixmaster chain.

@node move, muttlisp_inline_eval, mixmaster, Configuration Variables
@subsection move

@display
Type: quadoption
Default: no
@end display

Controls whether or not Mutt will move read messages
from your spool mailbox to your $mbox (@pxref{mbox}) mailbox, or as a result of
a ‘mbox-hook (@pxref{Using Multiple Spool Mailboxes})’ command.

@node muttlisp_inline_eval, narrow_tree, move, Configuration Variables
@subsection muttlisp_inline_eval

@display
Type: boolean
Default: no
@end display

If @emph{set}, Mutt will evaluate bare parenthesis arguments to commands
as MuttLisp expressions.

@node narrow_tree, net_inc, muttlisp_inline_eval, Configuration Variables
@subsection narrow_tree

@display
Type: boolean
Default: no
@end display

This variable, when @emph{set}, makes the thread tree narrower, allowing
deeper threads to fit on the screen.

@node net_inc, new_mail_command, narrow_tree, Configuration Variables
@subsection net_inc

@display
Type: number
Default: 10
@end display

Operations that expect to transfer a large amount of data over the
network will update their progress every $net_inc (@pxref{net_inc}) kilobytes.
If set to 0, no progress messages will be displayed.

See also $read_inc (@pxref{read_inc}), $write_inc (@pxref{write_inc}) and $net_inc (@pxref{net_inc}).

@node new_mail_command, pager, net_inc, Configuration Variables
@subsection new_mail_command

@display
Type: path
Default: (empty)
@end display

If @emph{set}, Mutt will call this command after a new message is received.
See the $status_format (@pxref{status_format}) documentation for the values that can be formatted
into this command.

@node pager, pager_context, new_mail_command, Configuration Variables
@subsection pager

@display
Type: path
Default: ‘builtin’
@end display

This variable specifies which pager you would like to use to view
messages. The value ‘builtin’ means to use the built-in pager, otherwise this
variable should specify the pathname of the external pager you would
like to use.

Using an external pager may have some disadvantages: Additional
keystrokes are necessary because you can't call mutt functions
directly from the pager, and screen resizes cause lines longer than
the screen width to be badly formatted in the help menu.

When using an external pager, also see $prompt_after (@pxref{prompt_after}) which defaults
@emph{set}.

@node pager_context, pager_format, pager, Configuration Variables
@subsection pager_context

@display
Type: number
Default: 0
@end display

This variable controls the number of lines of context that are given
when displaying the next or previous page in the internal pager.  By
default, Mutt will display the line after the last one on the screen
at the top of the next page (0 lines of context).

This variable also specifies the amount of context given for search
results. If positive, this many lines will be given before a match,
if 0, the match will be top-aligned.

@node pager_format, pager_index_lines, pager_context, Configuration Variables
@subsection pager_format

@display
Type: string
Default: ‘-%Z- %C/%m: %-20.20n   %s%*  -- (%P)’
@end display

This variable controls the format of the one-line message ‘status’
displayed before each message in either the internal or an external
pager.  The valid sequences are listed in the $index_format (@pxref{index_format})
section.

@node pager_index_lines, pager_stop, pager_format, Configuration Variables
@subsection pager_index_lines

@display
Type: number
Default: 0
@end display

Determines the number of lines of a mini-index which is shown when in
the pager.  The current message, unless near the top or bottom of the
folder, will be roughly one third of the way down this mini-index,
giving the reader the context of a few messages before and after the
message.  This is useful, for example, to determine how many messages
remain to be read in the current thread.  One of the lines is reserved
for the status bar from the index, so a setting of 6
will only show 5 lines of the actual index.  A value of 0 results in
no index being shown.  If the number of messages in the current folder
is less than $pager_index_lines (@pxref{pager_index_lines}), then the index will only use as
many lines as it needs.

@node pager_stop, pattern_format, pager_index_lines, Configuration Variables
@subsection pager_stop

@display
Type: boolean
Default: no
@end display

When @emph{set}, the internal-pager will @strong{not} move to the next message
when you are at the end of a message and invoke the @samp{<next-page>}
function.

@node pattern_format, pgp_auto_decode, pager_stop, Configuration Variables
@subsection pattern_format

@display
Type: string
Default: ‘%2n %-15e  %d’
@end display

This variable describes the format of the ‘pattern completion’ menu. The
following @samp{printf(3)}-style sequences are understood:

@multitable @columnfractions 0.5 0.5
@item
%d  @tab pattern description
@item
%e  @tab pattern expression
@item
%n  @tab index number
@end multitable


@node pgp_auto_decode, pgp_autoinline, pattern_format, Configuration Variables
@subsection pgp_auto_decode

@display
Type: boolean
Default: no
@end display

If @emph{set}, mutt will automatically attempt to decrypt traditional PGP
messages whenever the user performs an operation which ordinarily would
result in the contents of the message being operated on.  For example,
if the user displays a pgp-traditional message which has not been manually
checked with the @samp{<check-traditional-pgp> (@pxref{check-traditional-pgp})} function, mutt will automatically
check the message for traditional pgp.

@node pgp_autoinline, pgp_check_exit, pgp_auto_decode, Configuration Variables
@subsection pgp_autoinline

@display
Type: boolean
Default: no
@end display

This option controls whether Mutt generates old-style inline
(traditional) PGP encrypted or signed messages under certain
circumstances.  This can be overridden by use of the pgp menu,
when inline is not required.  The GPGME backend does not support
this option.

Note that Mutt might automatically use PGP/MIME for messages
which consist of more than a single MIME part.  Mutt can be
configured to ask before sending PGP/MIME messages when inline
(traditional) would not work.

Also see the $pgp_mime_auto (@pxref{pgp_mime_auto}) variable.

Also note that using the old-style PGP message format is @strong{strongly}
@strong{deprecated}.
(PGP only)

@node pgp_check_exit, pgp_check_gpg_decrypt_status_fd, pgp_autoinline, Configuration Variables
@subsection pgp_check_exit

@display
Type: boolean
Default: yes
@end display

If @emph{set}, mutt will check the exit code of the PGP subprocess when
signing or encrypting.  A non-zero exit code means that the
subprocess failed.
(PGP only)

@node pgp_check_gpg_decrypt_status_fd, pgp_clearsign_command, pgp_check_exit, Configuration Variables
@subsection pgp_check_gpg_decrypt_status_fd

@display
Type: boolean
Default: yes
@end display

If @emph{set}, mutt will check the status file descriptor output
of $pgp_decrypt_command (@pxref{pgp_decrypt_command}) and $pgp_decode_command (@pxref{pgp_decode_command}) for GnuPG status codes
indicating successful decryption.  This will check for the presence of
DECRYPTION_OKAY, absence of DECRYPTION_FAILED, and that all
PLAINTEXT occurs between the BEGIN_DECRYPTION and END_DECRYPTION
status codes.

If @emph{unset}, mutt will instead match the status fd output
against $pgp_decryption_okay (@pxref{pgp_decryption_okay}).
(PGP only)

@node pgp_clearsign_command, pgp_decode_command, pgp_check_gpg_decrypt_status_fd, Configuration Variables
@subsection pgp_clearsign_command

@display
Type: string
Default: (empty)
@end display

This format is used to create an old-style ‘clearsigned’ PGP
message.  Note that the use of this format is @strong{strongly}
@strong{deprecated}.

This is a format string, see the $pgp_decode_command (@pxref{pgp_decode_command}) command for
possible @samp{printf(3)}-like sequences.
(PGP only)

@node pgp_decode_command, pgp_decrypt_command, pgp_clearsign_command, Configuration Variables
@subsection pgp_decode_command

@display
Type: string
Default: (empty)
@end display

This format strings specifies a command which is used to decode
application/pgp attachments.

The PGP command formats have their own set of @samp{printf(3)}-like sequences:

@multitable @columnfractions 0.5 0.5
@item
%p @tab Expands to PGPPASSFD=0 when a pass phrase is needed, to an empty
string otherwise. Note: This may be used with a %? construct.
@item
%f @tab Expands to the name of a file containing a message.
@item
%s @tab Expands to the name of a file containing the signature part
of a @samp{multipart/signed} attachment when verifying it.
@item
%a @tab The value of $pgp_sign_as (@pxref{pgp_sign_as}) if set, otherwise the value
of $pgp_default_key (@pxref{pgp_default_key}).
@item
%r @tab One or more key IDs (or fingerprints if available).
@end multitable

For examples on how to configure these formats for the various versions
of PGP which are floating around, see the pgp and gpg sample configuration files in
the @samp{samples/} subdirectory which has been installed on your system
alongside the documentation.
(PGP only)

@node pgp_decrypt_command, pgp_decryption_okay, pgp_decode_command, Configuration Variables
@subsection pgp_decrypt_command

@display
Type: string
Default: (empty)
@end display

This command is used to decrypt a PGP encrypted message.

This is a format string, see the $pgp_decode_command (@pxref{pgp_decode_command}) command for
possible @samp{printf(3)}-like sequences.
(PGP only)

@node pgp_decryption_okay, pgp_default_key, pgp_decrypt_command, Configuration Variables
@subsection pgp_decryption_okay

@display
Type: regular expression
Default: (empty)
@end display

If you assign text to this variable, then an encrypted PGP
message is only considered successfully decrypted if the output
from $pgp_decrypt_command (@pxref{pgp_decrypt_command}) contains the text.  This is used to
protect against a spoofed encrypted message, with multipart/encrypted
headers but containing a block that is not actually encrypted.
(e.g. simply signed and ascii armored text).

Note that if $pgp_check_gpg_decrypt_status_fd (@pxref{pgp_check_gpg_decrypt_status_fd}) is set, this variable
is ignored.
(PGP only)

@node pgp_default_key, pgp_encrypt_only_command, pgp_decryption_okay, Configuration Variables
@subsection pgp_default_key

@display
Type: string
Default: (empty)
@end display

This is the default key-pair to use for PGP operations.  It will be
used for encryption (see $postpone_encrypt (@pxref{postpone_encrypt}) and $pgp_self_encrypt (@pxref{pgp_self_encrypt})).

It will also be used for signing unless $pgp_sign_as (@pxref{pgp_sign_as}) is set.

The (now deprecated) @emph{pgp_self_encrypt_as} is an alias for this
variable, and should no longer be used.
(PGP only)

@node pgp_encrypt_only_command, pgp_encrypt_sign_command, pgp_default_key, Configuration Variables
@subsection pgp_encrypt_only_command

@display
Type: string
Default: (empty)
@end display

This command is used to encrypt a body part without signing it.

This is a format string, see the $pgp_decode_command (@pxref{pgp_decode_command}) command for
possible @samp{printf(3)}-like sequences.
(PGP only)

@node pgp_encrypt_sign_command, pgp_entry_format, pgp_encrypt_only_command, Configuration Variables
@subsection pgp_encrypt_sign_command

@display
Type: string
Default: (empty)
@end display

This command is used to both sign and encrypt a body part.

This is a format string, see the $pgp_decode_command (@pxref{pgp_decode_command}) command for
possible @samp{printf(3)}-like sequences.
(PGP only)

@node pgp_entry_format, pgp_export_command, pgp_encrypt_sign_command, Configuration Variables
@subsection pgp_entry_format

@display
Type: string
Default: ‘%4n %t%f %4l/0x%k %-4a %2c %u’
@end display

This variable allows you to customize the PGP key selection menu to
your personal taste. This string is similar to $index_format (@pxref{index_format}), but
has its own set of @samp{printf(3)}-like sequences:

@multitable @columnfractions 0.5 0.5
@item
%n     @tab number
@item
%k     @tab key id
@item
%u     @tab user id
@item
%a     @tab algorithm
@item
%l     @tab key length
@item
%f     @tab flags
@item
%c     @tab capabilities
@item
%t     @tab trust/validity of the key-uid association
@item
%[<s>] @tab date of the key where <s> is an @samp{strftime(3)} expression
@end multitable

(PGP only)

@node pgp_export_command, pgp_getkeys_command, pgp_entry_format, Configuration Variables
@subsection pgp_export_command

@display
Type: string
Default: (empty)
@end display

This command is used to export a public key from the user's
key ring.

This is a format string, see the $pgp_decode_command (@pxref{pgp_decode_command}) command for
possible @samp{printf(3)}-like sequences.
(PGP only)

@node pgp_getkeys_command, pgp_good_sign, pgp_export_command, Configuration Variables
@subsection pgp_getkeys_command

@display
Type: string
Default: (empty)
@end display

This command is invoked whenever Mutt needs to fetch the public key associated with
an email address.  Of the sequences supported by $pgp_decode_command (@pxref{pgp_decode_command}), %r is
the only @samp{printf(3)}-like sequence used with this format.  Note that
in this case, %r expands to the email address, not the public key ID (the key ID is
unknown, which is why Mutt is invoking this command).
(PGP only)

@node pgp_good_sign, pgp_ignore_subkeys, pgp_getkeys_command, Configuration Variables
@subsection pgp_good_sign

@display
Type: regular expression
Default: (empty)
@end display

If you assign a text to this variable, then a PGP signature is only
considered verified if the output from $pgp_verify_command (@pxref{pgp_verify_command}) contains
the text. Use this variable if the exit code from the command is 0
even for bad signatures.
(PGP only)

@node pgp_ignore_subkeys, pgp_import_command, pgp_good_sign, Configuration Variables
@subsection pgp_ignore_subkeys

@display
Type: boolean
Default: yes
@end display

Setting this variable will cause Mutt to ignore OpenPGP subkeys. Instead,
the principal key will inherit the subkeys' capabilities.  @emph{Unset} this
if you want to play interesting key selection games.
(PGP only)

@node pgp_import_command, pgp_list_pubring_command, pgp_ignore_subkeys, Configuration Variables
@subsection pgp_import_command

@display
Type: string
Default: (empty)
@end display

This command is used to import a key from a message into
the user's public key ring.

This is a format string, see the $pgp_decode_command (@pxref{pgp_decode_command}) command for
possible @samp{printf(3)}-like sequences.
(PGP only)

@node pgp_list_pubring_command, pgp_list_secring_command, pgp_import_command, Configuration Variables
@subsection pgp_list_pubring_command

@display
Type: string
Default: (empty)
@end display

This command is used to list the public key ring's contents.  The
output format must be analogous to the one used by

@example

gpg --list-keys --with-colons --with-fingerprint
@end example

This format is also generated by the @samp{mutt_pgpring} utility which comes
with mutt.

Note: gpg's @samp{fixed-list-mode} option should not be used.  It
produces a different date format which may result in mutt showing
incorrect key generation dates.

This is a format string, see the $pgp_decode_command (@pxref{pgp_decode_command}) command for
possible @samp{printf(3)}-like sequences.
Note that in this case, %r expands to the search string, which is a list of
one or more quoted values such as email address, name, or keyid.
(PGP only)

@node pgp_list_secring_command, pgp_long_ids, pgp_list_pubring_command, Configuration Variables
@subsection pgp_list_secring_command

@display
Type: string
Default: (empty)
@end display

This command is used to list the secret key ring's contents.  The
output format must be analogous to the one used by:

@example

gpg --list-keys --with-colons --with-fingerprint
@end example

This format is also generated by the @samp{mutt_pgpring} utility which comes
with mutt.

Note: gpg's @samp{fixed-list-mode} option should not be used.  It
produces a different date format which may result in mutt showing
incorrect key generation dates.

This is a format string, see the $pgp_decode_command (@pxref{pgp_decode_command}) command for
possible @samp{printf(3)}-like sequences.
Note that in this case, %r expands to the search string, which is a list of
one or more quoted values such as email address, name, or keyid.
(PGP only)

@node pgp_long_ids, pgp_mime_auto, pgp_list_secring_command, Configuration Variables
@subsection pgp_long_ids

@display
Type: boolean
Default: yes
@end display

If @emph{set}, use 64 bit PGP key IDs, if @emph{unset} use the normal 32 bit key IDs.
NOTE: Internally, Mutt has transitioned to using fingerprints (or long key IDs
as a fallback).  This option now only controls the display of key IDs
in the key selection menu and a few other places.
(PGP only)

@node pgp_mime_auto, pgp_replyinline, pgp_long_ids, Configuration Variables
@subsection pgp_mime_auto

@display
Type: quadoption
Default: ask-yes
@end display

This option controls whether Mutt will prompt you for
automatically sending a (signed/encrypted) message using
PGP/MIME when inline (traditional) fails (for any reason).

Also note that using the old-style PGP message format is @strong{strongly}
@strong{deprecated}.
(PGP only)

@node pgp_replyinline, pgp_retainable_sigs, pgp_mime_auto, Configuration Variables
@subsection pgp_replyinline

@display
Type: boolean
Default: no
@end display

Setting this variable will cause Mutt to always attempt to
create an inline (traditional) message when replying to a
message which is PGP encrypted/signed inline.  This can be
overridden by use of the pgp menu, when inline is not
required.  This option does not automatically detect if the
(replied-to) message is inline; instead it relies on Mutt
internals for previously checked/flagged messages.

Note that Mutt might automatically use PGP/MIME for messages
which consist of more than a single MIME part.  Mutt can be
configured to ask before sending PGP/MIME messages when inline
(traditional) would not work.

Also see the $pgp_mime_auto (@pxref{pgp_mime_auto}) variable.

Also note that using the old-style PGP message format is @strong{strongly}
@strong{deprecated}.
(PGP only)

@node pgp_retainable_sigs, pgp_self_encrypt, pgp_replyinline, Configuration Variables
@subsection pgp_retainable_sigs

@display
Type: boolean
Default: no
@end display

If @emph{set}, signed and encrypted messages will consist of nested
@samp{multipart/signed} and @samp{multipart/encrypted} body parts.

This is useful for applications like encrypted and signed mailing
lists, where the outer layer (@samp{multipart/encrypted}) can be easily
removed, while the inner @samp{multipart/signed} part is retained.
(PGP only)

@node pgp_self_encrypt, pgp_show_unusable, pgp_retainable_sigs, Configuration Variables
@subsection pgp_self_encrypt

@display
Type: boolean
Default: yes
@end display

When @emph{set}, PGP encrypted messages will also be encrypted
using the key in $pgp_default_key (@pxref{pgp_default_key}).
(PGP only)

@node pgp_show_unusable, pgp_sign_as, pgp_self_encrypt, Configuration Variables
@subsection pgp_show_unusable

@display
Type: boolean
Default: yes
@end display

If @emph{set}, mutt will display non-usable keys on the PGP key selection
menu.  This includes keys which have been revoked, have expired, or
have been marked as ‘disabled’ by the user.
(PGP only)

@node pgp_sign_as, pgp_sign_command, pgp_show_unusable, Configuration Variables
@subsection pgp_sign_as

@display
Type: string
Default: (empty)
@end display

If you have a different key pair to use for signing, you should
set this to the signing key.  Most people will only need to set
$pgp_default_key (@pxref{pgp_default_key}).  It is recommended that you use the keyid form
to specify your key (e.g. @samp{0x00112233}).
(PGP only)

@node pgp_sign_command, pgp_sort_keys, pgp_sign_as, Configuration Variables
@subsection pgp_sign_command

@display
Type: string
Default: (empty)
@end display

This command is used to create the detached PGP signature for a
@samp{multipart/signed} PGP/MIME body part.

This is a format string, see the $pgp_decode_command (@pxref{pgp_decode_command}) command for
possible @samp{printf(3)}-like sequences.
(PGP only)

@node pgp_sort_keys, pgp_strict_enc, pgp_sign_command, Configuration Variables
@subsection pgp_sort_keys

@display
Type: sort order
Default: address
@end display

Specifies how the entries in the pgp menu are sorted. The
following are legal values:

@multitable @columnfractions 0.5 0.5
@item
address @tab sort alphabetically by user id
@item
keyid   @tab sort alphabetically by key id
@item
date    @tab sort by key creation date
@item
trust   @tab sort by the trust of the key
@end multitable

If you prefer reverse order of the above values, prefix it with
‘reverse-’.
(PGP only)

@node pgp_strict_enc, pgp_timeout, pgp_sort_keys, Configuration Variables
@subsection pgp_strict_enc

@display
Type: boolean
Default: yes
@end display

If @emph{set}, Mutt will automatically encode PGP/MIME signed messages as
quoted-printable.  Please note that unsetting this variable may
lead to problems with non-verifyable PGP signatures, so only change
this if you know what you are doing.
(PGP only)

@node pgp_timeout, pgp_use_gpg_agent, pgp_strict_enc, Configuration Variables
@subsection pgp_timeout

@display
Type: number (long)
Default: 300
@end display

The number of seconds after which a cached passphrase will expire if
not used.
(PGP only)

@node pgp_use_gpg_agent, pgp_verify_command, pgp_timeout, Configuration Variables
@subsection pgp_use_gpg_agent

@display
Type: boolean
Default: yes
@end display

If @emph{set}, mutt expects a @samp{gpg-agent(1)} process will handle
private key passphrase prompts.  If @emph{unset}, mutt will prompt
for the passphrase and pass it via stdin to the pgp command.

Note that as of version 2.1, GnuPG automatically spawns an agent
and requires the agent be used for passphrase management.  Since
that version is increasingly prevalent, this variable now
defaults @emph{set}.

Mutt works with a GUI or curses pinentry program.  A TTY pinentry
should not be used.

If you are using an older version of GnuPG without an agent running,
or another encryption program without an agent, you will need to
@emph{unset} this variable.
(PGP only)

@node pgp_verify_command, pgp_verify_key_command, pgp_use_gpg_agent, Configuration Variables
@subsection pgp_verify_command

@display
Type: string
Default: (empty)
@end display

This command is used to verify PGP signatures.

This is a format string, see the $pgp_decode_command (@pxref{pgp_decode_command}) command for
possible @samp{printf(3)}-like sequences.
(PGP only)

@node pgp_verify_key_command, pipe_decode, pgp_verify_command, Configuration Variables
@subsection pgp_verify_key_command

@display
Type: string
Default: (empty)
@end display

This command is used to verify key information from the key selection
menu.

This is a format string, see the $pgp_decode_command (@pxref{pgp_decode_command}) command for
possible @samp{printf(3)}-like sequences.
(PGP only)

@node pipe_decode, pipe_decode_weed, pgp_verify_key_command, Configuration Variables
@subsection pipe_decode

@display
Type: boolean
Default: no
@end display

Used in connection with the @samp{<pipe-message>} function.  When @emph{unset},
Mutt will pipe the messages without any preprocessing. When @emph{set}, Mutt
will attempt to decode the messages first.

Also see $pipe_decode_weed (@pxref{pipe_decode_weed}), which controls whether headers will
be weeded when this is @emph{set}.

@node pipe_decode_weed, pipe_sep, pipe_decode, Configuration Variables
@subsection pipe_decode_weed

@display
Type: boolean
Default: yes
@end display

For @samp{<pipe-message>}, when $pipe_decode (@pxref{pipe_decode}) is set, this further
controls whether Mutt will weed headers.

@node pipe_sep, pipe_split, pipe_decode_weed, Configuration Variables
@subsection pipe_sep

@display
Type: string
Default: ‘\n’
@end display

The separator to add between messages when piping a list of tagged
messages to an external Unix command.

@node pipe_split, pop_auth_try_all, pipe_sep, Configuration Variables
@subsection pipe_split

@display
Type: boolean
Default: no
@end display

Used in connection with the @samp{<pipe-message>} function following
@samp{<tag-prefix>}.  If this variable is @emph{unset}, when piping a list of
tagged messages Mutt will concatenate the messages and will pipe them
all concatenated.  When @emph{set}, Mutt will pipe the messages one by one.
In both cases the messages are piped in the current sorted order,
and the $pipe_sep (@pxref{pipe_sep}) separator is added after each message.

@node pop_auth_try_all, pop_authenticators, pipe_split, Configuration Variables
@subsection pop_auth_try_all

@display
Type: boolean
Default: yes
@end display

If @emph{set}, Mutt will try all available authentication methods.
When @emph{unset}, Mutt will only fall back to other authentication
methods if the previous methods are unavailable. If a method is
available but authentication fails, Mutt will not connect to the POP server.

@node pop_authenticators, pop_checkinterval, pop_auth_try_all, Configuration Variables
@subsection pop_authenticators

@display
Type: string
Default: (empty)
@end display

This is a colon-delimited list of authentication methods mutt may
attempt to use to log in to an POP server, in the order mutt should
try them.  Authentication methods are either ‘user’, ‘apop’ or any
SASL mechanism, e.g. ‘digest-md5’, ‘gssapi’ or ‘cram-md5’.
This option is case-insensitive. If this option is @emph{unset}
(the default) mutt will try all available methods, in order from
most-secure to least-secure.

Example:

@example

set pop_authenticators="digest-md5:apop:user"
@end example

@node pop_checkinterval, pop_delete, pop_authenticators, Configuration Variables
@subsection pop_checkinterval

@display
Type: number
Default: 60
@end display

This variable configures how often (in seconds) mutt should look for
new mail in the currently selected mailbox if it is a POP mailbox.

@node pop_delete, pop_host, pop_checkinterval, Configuration Variables
@subsection pop_delete

@display
Type: quadoption
Default: ask-no
@end display

If @emph{set}, Mutt will delete successfully downloaded messages from the POP
server when using the @samp{<fetch-mail> (@pxref{fetch-mail})} function.  When @emph{unset}, Mutt will
download messages but also leave them on the POP server.

@node pop_host, pop_last, pop_delete, Configuration Variables
@subsection pop_host

@display
Type: string
Default: (empty)
@end display

The name of your POP server for the @samp{<fetch-mail> (@pxref{fetch-mail})} function.  You
can also specify an alternative port, username and password, i.e.:

@example

[pop[s]://][username[:password]@@]popserver[:port]
@end example

where ‘[...]’ denotes an optional part.

@node pop_last, pop_oauth_refresh_command, pop_host, Configuration Variables
@subsection pop_last

@display
Type: boolean
Default: no
@end display

If this variable is @emph{set}, mutt will try to use the ‘@samp{LAST}’ POP command
for retrieving only unread messages from the POP server when using
the @samp{<fetch-mail> (@pxref{fetch-mail})} function.

@node pop_oauth_refresh_command, pop_pass, pop_last, Configuration Variables
@subsection pop_oauth_refresh_command

@display
Type: string
Default: (empty)
@end display

The command to run to generate an OAUTH refresh token for
authorizing your connection to your POP server.  This command will be
run on every connection attempt that uses the OAUTHBEARER authentication
mechanism.  See ‘oauth (@pxref{OAUTHBEARER Support})’ for details.

@node pop_pass, pop_reconnect, pop_oauth_refresh_command, Configuration Variables
@subsection pop_pass

@display
Type: string
Default: (empty)
@end display

Specifies the password for your POP account.  If @emph{unset}, Mutt will
prompt you for your password when you open a POP mailbox.

@strong{Warning}: you should only use this option when you are on a
fairly secure machine, because the superuser can read your muttrc
even if you are the only one who can read the file.

@node pop_reconnect, pop_user, pop_pass, Configuration Variables
@subsection pop_reconnect

@display
Type: quadoption
Default: ask-yes
@end display

Controls whether or not Mutt will try to reconnect to the POP server if
the connection is lost.

@node pop_user, post_indent_string, pop_reconnect, Configuration Variables
@subsection pop_user

@display
Type: string
Default: (empty)
@end display

Your login name on the POP server.

This variable defaults to your user name on the local machine.

@node post_indent_string, postpone, pop_user, Configuration Variables
@subsection post_indent_string

@display
Type: string
Default: (empty)
@end display

Similar to the $attribution (@pxref{attribution}) variable, Mutt will append this
string after the inclusion of a message which is being replied to.
For a full listing of defined @samp{printf(3)}-like sequences see
the section on $index_format (@pxref{index_format}).

@node postpone, postponed, post_indent_string, Configuration Variables
@subsection postpone

@display
Type: quadoption
Default: ask-yes
@end display

Controls whether or not messages are saved in the $postponed (@pxref{postponed})
mailbox when you elect not to send immediately.

Also see the $recall (@pxref{recall}) variable.

@node postponed, postpone_encrypt, postpone, Configuration Variables
@subsection postponed

@display
Type: path
Default: ‘~/postponed’
@end display

Mutt allows you to indefinitely ‘postpone (@pxref{postpone}) sending a message’ which
you are editing.  When you choose to postpone a message, Mutt saves it
in the mailbox specified by this variable.

Also see the $postpone (@pxref{postpone}) variable.

@node postpone_encrypt, postpone_encrypt_as, postponed, Configuration Variables
@subsection postpone_encrypt

@display
Type: boolean
Default: no
@end display

When @emph{set}, postponed messages that are marked for encryption will be
self-encrypted.  Mutt will first try to encrypt using the value specified
in $pgp_default_key (@pxref{pgp_default_key}) or $smime_default_key (@pxref{smime_default_key}).  If those are not
set, it will try the deprecated $postpone_encrypt_as (@pxref{postpone_encrypt_as}).
(Crypto only)

@node postpone_encrypt_as, preconnect, postpone_encrypt, Configuration Variables
@subsection postpone_encrypt_as

@display
Type: string
Default: (empty)
@end display

This is a deprecated fall-back variable for $postpone_encrypt (@pxref{postpone_encrypt}).
Please use $pgp_default_key (@pxref{pgp_default_key}) or $smime_default_key (@pxref{smime_default_key}).
(Crypto only)

@node preconnect, print, postpone_encrypt_as, Configuration Variables
@subsection preconnect

@display
Type: string
Default: (empty)
@end display

If @emph{set}, a shell command to be executed if mutt fails to establish
a connection to the server. This is useful for setting up secure
connections, e.g. with @samp{ssh(1)}. If the command returns a  nonzero
status, mutt gives up opening the server. Example:

@example

set preconnect="ssh -f -q -L 1234:mailhost.net:143 mailhost.net \
sleep 20 < /dev/null > /dev/null"
@end example

Mailbox ‘foo’ on ‘mailhost.net’ can now be reached
as ‘@{localhost:1234@}foo’.

Note: For this example to work, you must be able to log in to the
remote machine without having to enter a password.

@node print, print_command, preconnect, Configuration Variables
@subsection print

@display
Type: quadoption
Default: ask-no
@end display

Controls whether or not Mutt really prints messages.
This is set to ‘ask-no’ by default, because some people
accidentally hit ‘p’ often.

@node print_command, print_decode, print, Configuration Variables
@subsection print_command

@display
Type: path
Default: ‘lpr’
@end display

This specifies the command pipe that should be used to print messages.

@node print_decode, print_decode_weed, print_command, Configuration Variables
@subsection print_decode

@display
Type: boolean
Default: yes
@end display

Used in connection with the @samp{<print-message>} function.  If this
option is @emph{set}, the message is decoded before it is passed to the
external command specified by $print_command (@pxref{print_command}).  If this option
is @emph{unset}, no processing will be applied to the message when
printing it.  The latter setting may be useful if you are using
some advanced printer filter which is able to properly format
e-mail messages for printing.

Also see $print_decode_weed (@pxref{print_decode_weed}), which controls whether headers will
be weeded when this is @emph{set}.

@node print_decode_weed, print_split, print_decode, Configuration Variables
@subsection print_decode_weed

@display
Type: boolean
Default: yes
@end display

For @samp{<print-message>}, when $print_decode (@pxref{print_decode}) is set, this
further controls whether Mutt will weed headers.

@node print_split, prompt_after, print_decode_weed, Configuration Variables
@subsection print_split

@display
Type: boolean
Default: no
@end display

Used in connection with the @samp{<print-message>} function.  If this option
is @emph{set}, the command specified by $print_command (@pxref{print_command}) is executed once for
each message which is to be printed.  If this option is @emph{unset},
the command specified by $print_command (@pxref{print_command}) is executed only once, and
all the messages are concatenated, with a form feed as the message
separator.

Those who use the @samp{enscript}(1) program's mail-printing mode will
most likely want to @emph{set} this option.

@node prompt_after, query_command, print_split, Configuration Variables
@subsection prompt_after

@display
Type: boolean
Default: yes
@end display

If you use an @emph{external} $pager (@pxref{pager}), setting this variable will
cause Mutt to prompt you for a command when the pager exits rather
than returning to the index menu.  If @emph{unset}, Mutt will return to the
index menu when the external pager exits.

@node query_command, query_format, prompt_after, Configuration Variables
@subsection query_command

@display
Type: path
Default: (empty)
@end display

This specifies the command Mutt will use to make external address
queries.  The string may contain a ‘%s’, which will be substituted
with the query string the user types.  Mutt will add quotes around the
string substituted for ‘%s’ automatically according to shell quoting
rules, so you should avoid adding your own.  If no ‘%s’ is found in
the string, Mutt will append the user's query to the end of the string.
See ‘query (@pxref{External Address Queries})’ for more information.

@node query_format, quit, query_command, Configuration Variables
@subsection query_format

@display
Type: string
Default: ‘%4c %t %-25.25a %-25.25n %?e?(%e)?’
@end display

This variable describes the format of the ‘query’ menu. The
following @samp{printf(3)}-style sequences are understood:

@multitable @columnfractions 0.5 0.5
@item
%a  @tab destination address
@item
%c  @tab current entry number
@item
%e  @tab extra information *
@item
%n  @tab destination name
@item
%t  @tab ‘*’ if current entry is tagged, a space otherwise
@item
%>X @tab right justify the rest of the string and pad with ‘X’
@item
%|X @tab pad to the end of the line with ‘X’
@item
%*X @tab soft-fill with character ‘X’ as pad
@end multitable

For an explanation of ‘soft-fill’, see the $index_format (@pxref{index_format}) documentation.

* = can be optionally printed if nonzero, see the $status_format (@pxref{status_format}) documentation.

@node quit, quote_regexp, query_format, Configuration Variables
@subsection quit

@display
Type: quadoption
Default: yes
@end display

This variable controls whether ‘quit’ and ‘exit’ actually quit
from mutt.  If this option is @emph{set}, they do quit, if it is @emph{unset}, they
have no effect, and if it is set to @emph{ask-yes} or @emph{ask-no}, you are
prompted for confirmation when you try to quit.

@node quote_regexp, read_inc, quit, Configuration Variables
@subsection quote_regexp

@display
Type: regular expression
Default: ‘^([ \t]*[|>:@}#])+’
@end display

A regular expression used in the internal pager to determine quoted
sections of text in the body of a message. Quoted text may be filtered
out using the @samp{<toggle-quoted>} command, or colored according to the
‘color quoted’ family of directives.

Higher levels of quoting may be colored differently (‘color quoted1’,
‘color quoted2’, etc.). The quoting level is determined by removing
the last character from the matched text and recursively reapplying
the regular expression until it fails to produce a match.

Match detection may be overridden by the $smileys (@pxref{smileys}) regular expression.

@node read_inc, read_only, quote_regexp, Configuration Variables
@subsection read_inc

@display
Type: number
Default: 10
@end display

If set to a value greater than 0, Mutt will display which message it
is currently on when reading a mailbox or when performing search actions
such as search and limit. The message is printed after
this many messages have been read or searched (e.g., if set to 25, Mutt will
print a message when it is at message 25, and then again when it gets
to message 50).  This variable is meant to indicate progress when
reading or searching large mailboxes which may take some time.
When set to 0, only a single message will appear before the reading
the mailbox.

Also see the $write_inc (@pxref{write_inc}), $net_inc (@pxref{net_inc}) and $time_inc (@pxref{time_inc}) variables and the
‘tuning (@pxref{Performance Tuning})’ section of the manual for performance considerations.

@node read_only, realname, read_inc, Configuration Variables
@subsection read_only

@display
Type: boolean
Default: no
@end display

If @emph{set}, all folders are opened in read-only mode.

@node realname, recall, read_only, Configuration Variables
@subsection realname

@display
Type: string
Default: (empty)
@end display

This variable specifies what ‘real’ or ‘personal’ name should be used
when sending messages.

By default, this is the GECOS field from @samp{/etc/passwd}.  Note that this
variable will @emph{not} be used when the user has set a real name
in the $from (@pxref{from}) variable.

@node recall, record, realname, Configuration Variables
@subsection recall

@display
Type: quadoption
Default: ask-yes
@end display

Controls whether or not Mutt recalls postponed messages
when composing a new message.

Setting this variable to @emph{yes} is not generally useful, and thus not
recommended.  Note that the @samp{<recall-message>} function can be used
to manually recall postponed messages.

Also see $postponed (@pxref{postponed}) variable.

@node record, reflow_space_quotes, recall, Configuration Variables
@subsection record

@display
Type: path
Default: ‘~/sent’
@end display

This specifies the file into which your outgoing messages should be
appended.  (This is meant as the primary method for saving a copy of
your messages, but another way to do this is using the ‘my_hdr (@pxref{User-Defined Headers})’
command to create a ‘Bcc:’ field with your email address in it.)

The value of @emph{$record (@pxref{record})} is overridden by the $force_name (@pxref{force_name}) and
$save_name (@pxref{save_name}) variables, and the ‘fcc-hook (@pxref{Specify Default Fcc; Mailbox When Composing})’ command.  Also see $copy (@pxref{copy})
and $write_bcc (@pxref{write_bcc}).

Multiple mailboxes may be specified if $fcc_delimiter (@pxref{fcc_delimiter}) is
set to a string delimiter.

@node reflow_space_quotes, reflow_text, record, Configuration Variables
@subsection reflow_space_quotes

@display
Type: boolean
Default: yes
@end display

This option controls how quotes from format=flowed messages are displayed
in the pager and when replying (with $text_flowed (@pxref{text_flowed}) @emph{unset}).
When set, this option adds spaces after each level of quote marks, turning
">>>foo" into "> > > foo".

@strong{Note:} If $reflow_text (@pxref{reflow_text}) is @emph{unset}, this option has no effect.
Also, this option does not affect replies when $text_flowed (@pxref{text_flowed}) is @emph{set}.

@node reflow_text, reflow_wrap, reflow_space_quotes, Configuration Variables
@subsection reflow_text

@display
Type: boolean
Default: yes
@end display

When @emph{set}, Mutt will reformat paragraphs in text/plain
parts marked format=flowed.  If @emph{unset}, Mutt will display paragraphs
unaltered from how they appear in the message body.  See RFC3676 for
details on the @emph{format=flowed} format.

Also see $reflow_wrap (@pxref{reflow_wrap}), and $wrap (@pxref{wrap}).

@node reflow_wrap, reply_regexp, reflow_text, Configuration Variables
@subsection reflow_wrap

@display
Type: number
Default: 78
@end display

This variable controls the maximum paragraph width when reformatting text/plain
parts when $reflow_text (@pxref{reflow_text}) is @emph{set}.  When the value is 0, paragraphs will
be wrapped at the terminal's right margin.  A positive value sets the
paragraph width relative to the left margin.  A negative value set the
paragraph width relative to the right margin.

Also see $wrap (@pxref{wrap}).

@node reply_regexp, reply_self, reflow_wrap, Configuration Variables
@subsection reply_regexp

@display
Type: regular expression
Default: ‘^(re([\[0-9\]+])*|aw):[ \t]*’
@end display

A regular expression used to recognize reply messages when threading
and replying. The default value corresponds to the English "Re:" and
the German "Aw:".

@node reply_self, reply_to, reply_regexp, Configuration Variables
@subsection reply_self

@display
Type: boolean
Default: no
@end display

If @emph{unset} and you are replying to a message sent by you, Mutt will
assume that you want to reply to the recipients of that message rather
than to yourself.

Also see the ‘alternates (@pxref{Alternative Addresses})’ command.

@node reply_to, resolve, reply_self, Configuration Variables
@subsection reply_to

@display
Type: quadoption
Default: ask-yes
@end display

If @emph{set}, when replying to a message, Mutt will use the address listed
in the Reply-to: header as the recipient of the reply.  If @emph{unset},
it will use the address in the From: header field instead.  This
option is useful for reading a mailing list that sets the Reply-To:
header field to the list address and you want to send a private
message to the author of a message.

@node resolve, resume_draft_files, reply_to, Configuration Variables
@subsection resolve

@display
Type: boolean
Default: yes
@end display

When @emph{set}, the cursor will be automatically advanced to the next
(possibly undeleted) message whenever a command that modifies the
current message is executed.

@node resume_draft_files, resume_edited_draft_files, resolve, Configuration Variables
@subsection resume_draft_files

@display
Type: boolean
Default: no
@end display

If @emph{set}, draft files (specified by @samp{-H} on the command
line) are processed similarly to when resuming a postponed
message.  Recipients are not prompted for; send-hooks are not
evaluated; no alias expansion takes place; user-defined headers
and signatures are not added to the message.

@node resume_edited_draft_files, reverse_alias, resume_draft_files, Configuration Variables
@subsection resume_edited_draft_files

@display
Type: boolean
Default: yes
@end display

If @emph{set}, draft files previously edited (via @samp{-E -H} on
the command line) will have $resume_draft_files (@pxref{resume_draft_files}) automatically
set when they are used as a draft file again.

The first time a draft file is saved, mutt will add a header,
X-Mutt-Resume-Draft to the saved file.  The next time the draft
file is read in, if mutt sees the header, it will set
$resume_draft_files (@pxref{resume_draft_files}).

This option is designed to prevent multiple signatures,
user-defined headers, and other processing effects from being
made multiple times to the draft file.

@node reverse_alias, reverse_name, resume_edited_draft_files, Configuration Variables
@subsection reverse_alias

@display
Type: boolean
Default: no
@end display

This variable controls whether or not Mutt will display the ‘personal’
name from your aliases in the index menu if it finds an alias that
matches the message's sender.  For example, if you have the following
alias:

@example

alias juser abd30425@@somewhere.net (Joe User)
@end example

and then you receive mail which contains the following header:

@example

From: abd30425@@somewhere.net
@end example

It would be displayed in the index menu as ‘Joe User’ instead of
‘abd30425@@somewhere.net.’  This is useful when the person's e-mail
address is not human friendly.

@node reverse_name, reverse_realname, reverse_alias, Configuration Variables
@subsection reverse_name

@display
Type: boolean
Default: no
@end display

It may sometimes arrive that you receive mail to a certain machine,
move the messages to another machine, and reply to some the messages
from there.  If this variable is @emph{set}, the default @emph{From:} line of
the reply messages is built using the address where you received the
messages you are replying to @strong{if} that address matches your
‘alternates (@pxref{Alternative Addresses})’.  If the variable is @emph{unset}, or the address that would be
used doesn't match your ‘alternates (@pxref{Alternative Addresses})’, the @emph{From:} line will use
your address on the current machine.

Also see the ‘alternates (@pxref{Alternative Addresses})’ command and $reverse_realname (@pxref{reverse_realname}).

@node reverse_realname, rfc2047_parameters, reverse_name, Configuration Variables
@subsection reverse_realname

@display
Type: boolean
Default: yes
@end display

This variable fine-tunes the behavior of the $reverse_name (@pxref{reverse_name}) feature.

When it is @emph{unset}, Mutt will remove the real name part of a
matching address.  This allows the use of the email address
without having to also use what the sender put in the real name
field.

When it is @emph{set}, Mutt will use the matching address as-is.

In either case, a missing real name will be filled in afterwards
using the value of $realname (@pxref{realname}).

@node rfc2047_parameters, save_address, reverse_realname, Configuration Variables
@subsection rfc2047_parameters

@display
Type: boolean
Default: no
@end display

When this variable is @emph{set}, Mutt will decode RFC2047-encoded MIME
parameters. You want to set this variable when mutt suggests you
to save attachments to files named like:

@example

=?iso-8859-1?Q?file=5F=E4=5F991116=2Ezip?=
@end example

When this variable is @emph{set} interactively, the change won't be
active until you change folders.

Note that this use of RFC2047's encoding is explicitly
prohibited by the standard, but nevertheless encountered in the
wild.

Also note that setting this parameter will @emph{not} have the effect
that mutt @emph{generates} this kind of encoding.  Instead, mutt will
unconditionally use the encoding specified in RFC2231.

@node save_address, save_empty, rfc2047_parameters, Configuration Variables
@subsection save_address

@display
Type: boolean
Default: no
@end display

If @emph{set}, mutt will take the sender's full address when choosing a
default folder for saving a mail. If $save_name (@pxref{save_name}) or $force_name (@pxref{force_name})
is @emph{set} too, the selection of the Fcc folder will be changed as well.

@node save_empty, save_history, save_address, Configuration Variables
@subsection save_empty

@display
Type: boolean
Default: yes
@end display

When @emph{unset}, mailboxes which contain no saved messages will be removed
when closed (the exception is $spoolfile (@pxref{spoolfile}) which is never removed).
If @emph{set}, mailboxes are never removed.

@strong{Note:} This only applies to mbox and MMDF folders, Mutt does not
delete MH and Maildir directories.

@node save_history, save_name, save_empty, Configuration Variables
@subsection save_history

@display
Type: number
Default: 0
@end display

This variable controls the size of the history (per category) saved in the
$history_file (@pxref{history_file}) file.

@node save_name, score, save_history, Configuration Variables
@subsection save_name

@display
Type: boolean
Default: no
@end display

This variable controls how copies of outgoing messages are saved.
When @emph{set}, a check is made to see if a mailbox specified by the
recipient address exists (this is done by searching for a mailbox in
the $folder (@pxref{folder}) directory with the @emph{username} part of the
recipient address).  If the mailbox exists, the outgoing message will
be saved to that mailbox, otherwise the message is saved to the
$record (@pxref{record}) mailbox.

Also see the $force_name (@pxref{force_name}) variable.

@node score, score_threshold_delete, save_name, Configuration Variables
@subsection score

@display
Type: boolean
Default: yes
@end display

When this variable is @emph{unset}, scoring is turned off.  This can
be useful to selectively disable scoring for certain folders when the
$score_threshold_delete (@pxref{score_threshold_delete}) variable and related are used.

@node score_threshold_delete, score_threshold_flag, score, Configuration Variables
@subsection score_threshold_delete

@display
Type: number
Default: -1
@end display

Messages which have been assigned a score equal to or lower than the value
of this variable are automatically marked for deletion by mutt.  Since
mutt scores are always greater than or equal to zero, the default setting
of this variable will never mark a message for deletion.

@node score_threshold_flag, score_threshold_read, score_threshold_delete, Configuration Variables
@subsection score_threshold_flag

@display
Type: number
Default: 9999
@end display

Messages which have been assigned a score greater than or equal to this
variable's value are automatically marked "flagged".

@node score_threshold_read, search_context, score_threshold_flag, Configuration Variables
@subsection score_threshold_read

@display
Type: number
Default: -1
@end display

Messages which have been assigned a score equal to or lower than the value
of this variable are automatically marked as read by mutt.  Since
mutt scores are always greater than or equal to zero, the default setting
of this variable will never mark a message read.

@node search_context, send_charset, score_threshold_read, Configuration Variables
@subsection search_context

@display
Type: number
Default: 0
@end display

For the pager, this variable specifies the number of lines shown
before search results. By default, search results will be top-aligned.

@node send_charset, send_multipart_alternative, search_context, Configuration Variables
@subsection send_charset

@display
Type: string
Default: ‘us-ascii:iso-8859-1:utf-8’
@end display

A colon-delimited list of character sets for outgoing messages. Mutt will use the
first character set into which the text can be converted exactly.
If your $charset (@pxref{charset}) is not ‘iso-8859-1’ and recipients may not
understand ‘UTF-8’, it is advisable to include in the list an
appropriate widely used standard character set (such as
‘iso-8859-2’, ‘koi8-r’ or ‘iso-2022-jp’) either instead of or after
‘iso-8859-1’.

In case the text cannot be converted into one of these exactly,
mutt uses $charset (@pxref{charset}) as a fallback.

@node send_multipart_alternative, send_multipart_alternative_filter, send_charset, Configuration Variables
@subsection send_multipart_alternative

@display
Type: quadoption
Default: no
@end display

If @emph{set}, Mutt will generate a multipart/alternative
container and an alternative part using the filter script specified in
$send_multipart_alternative_filter (@pxref{send_multipart_alternative_filter}).
See the section ‘MIME Multipart/Alternative’ (alternative-order (@pxref{MIME Multipart/Alternative})).

Note that enabling multipart/alternative is not compatible with inline
PGP encryption.  Mutt will prompt to use PGP/MIME in that case.

@node send_multipart_alternative_filter, sendmail, send_multipart_alternative, Configuration Variables
@subsection send_multipart_alternative_filter

@display
Type: path
Default: (empty)
@end display

This specifies a filter script, which will convert the main
(composed) message of the email to an alternative format.  The
message will be piped to the filter's stdin.  The expected output
of the filter is the generated mime type, e.g. text/html,
followed by a blank line, and then the converted content.
See the section ‘MIME Multipart/Alternative’ (alternative-order (@pxref{MIME Multipart/Alternative})).

@node sendmail, sendmail_wait, send_multipart_alternative_filter, Configuration Variables
@subsection sendmail

@display
Type: path
Default: ‘/usr/sbin/sendmail -oem -oi’
@end display

Specifies the program and arguments used to deliver mail sent by Mutt.
Mutt expects that the specified program interprets additional
arguments as recipient addresses.  Mutt appends all recipients after
adding a @samp{--} delimiter (if not already present).  Additional
flags, such as for $use_8bitmime (@pxref{use_8bitmime}), $use_envelope_from (@pxref{use_envelope_from}),
$dsn_notify (@pxref{dsn_notify}), or $dsn_return (@pxref{dsn_return}) will be added before the delimiter.

@strong{See also:} $write_bcc (@pxref{write_bcc}).

@node sendmail_wait, shell, sendmail, Configuration Variables
@subsection sendmail_wait

@display
Type: number
Default: 0
@end display

Specifies the number of seconds to wait for the $sendmail (@pxref{sendmail}) process
to finish before giving up and putting delivery in the background.

Mutt interprets the value of this variable as follows:

@multitable @columnfractions 0.5 0.5
@item
>0 @tab number of seconds to wait for sendmail to finish before continuing
@item
0  @tab wait forever for sendmail to finish
@item
<0 @tab always put sendmail in the background without waiting
@end multitable

Note that if you specify a value other than 0, the output of the child
process will be put in a temporary file.  If there is some error, you
will be informed as to where to find the output.

@node shell, sidebar_delim_chars, sendmail_wait, Configuration Variables
@subsection shell

@display
Type: path
Default: (empty)
@end display

Command to use when spawning a subshell.  By default, the user's login
shell from @samp{/etc/passwd} is used.

@node sidebar_delim_chars, sidebar_divider_char, shell, Configuration Variables
@subsection sidebar_delim_chars

@display
Type: string
Default: ‘/.’
@end display

This contains the list of characters which you would like to treat
as folder separators for displaying paths in the sidebar.

Local mail is often arranged in directories: `dir1/dir2/mailbox'.

@example

set sidebar_delim_chars='/'
@end example

IMAP mailboxes are often named: `folder1.folder2.mailbox'.

@example

set sidebar_delim_chars='.'
@end example

@strong{See also:} $sidebar_short_path (@pxref{sidebar_short_path}), $sidebar_folder_indent (@pxref{sidebar_folder_indent}), $sidebar_indent_string (@pxref{sidebar_indent_string}).

@node sidebar_divider_char, sidebar_folder_indent, sidebar_delim_chars, Configuration Variables
@subsection sidebar_divider_char

@display
Type: string
Default: ‘|’
@end display

This specifies the characters to be drawn between the sidebar (when
visible) and the other Mutt panels. ASCII and Unicode line-drawing
characters are supported.

@node sidebar_folder_indent, sidebar_format, sidebar_divider_char, Configuration Variables
@subsection sidebar_folder_indent

@display
Type: boolean
Default: no
@end display

Set this to indent mailboxes in the sidebar.

@strong{See also:} $sidebar_short_path (@pxref{sidebar_short_path}), $sidebar_indent_string (@pxref{sidebar_indent_string}), $sidebar_delim_chars (@pxref{sidebar_delim_chars}).

@node sidebar_format, sidebar_indent_string, sidebar_folder_indent, Configuration Variables
@subsection sidebar_format

@display
Type: string
Default: ‘%B%*  %n’
@end display

This variable allows you to customize the sidebar display. This string is
similar to $index_format (@pxref{index_format}), but has its own set of @samp{printf(3)}-like
sequences:

@multitable @columnfractions 0.5 0.5
@item
%B  @tab Name of the mailbox
@item
%S  @tab * Size of mailbox (total number of messages)
@item
%N  @tab * Number of unread messages in the mailbox
@item
%n  @tab N if mailbox has new mail, blank otherwise
@item
%F  @tab * Number of Flagged messages in the mailbox
@item
%!  @tab ‘!’ : one flagged message;
‘!!’ : two flagged messages;
‘n!’ : n flagged messages (for n > 2).
Otherwise prints nothing.
@item
%d  @tab * @@ Number of deleted messages
@item
%L  @tab * @@ Number of messages after limiting
@item
%t  @tab * @@ Number of tagged messages
@item
%>X @tab right justify the rest of the string and pad with ‘X’
@item
%|X @tab pad to the end of the line with ‘X’
@item
%*X @tab soft-fill with character ‘X’ as pad
@end multitable

* = Can be optionally printed if nonzero
@@ = Only applicable to the current folder

In order to use %S, %N, %F, and %!, $mail_check_stats (@pxref{mail_check_stats}) must
be @emph{set}.  When thus set, a suggested value for this option is
"%B%?F? [%F]?%* %?N?%N/?%S".

@node sidebar_indent_string, sidebar_new_mail_only, sidebar_format, Configuration Variables
@subsection sidebar_indent_string

@display
Type: string
Default: ‘  ’
@end display

This specifies the string that is used to indent mailboxes in the sidebar.
It defaults to two spaces.

@strong{See also:} $sidebar_short_path (@pxref{sidebar_short_path}), $sidebar_folder_indent (@pxref{sidebar_folder_indent}), $sidebar_delim_chars (@pxref{sidebar_delim_chars}).

@node sidebar_new_mail_only, sidebar_next_new_wrap, sidebar_indent_string, Configuration Variables
@subsection sidebar_new_mail_only

@display
Type: boolean
Default: no
@end display

When set, the sidebar will only display mailboxes containing new, or
flagged, mail.

@strong{See also:} sidebar_whitelist (@pxref{Commands <1>}).

@node sidebar_next_new_wrap, sidebar_relative_shortpath_indent, sidebar_new_mail_only, Configuration Variables
@subsection sidebar_next_new_wrap

@display
Type: boolean
Default: no
@end display

When set, the @samp{<sidebar-next-new>} command will not stop and the end of
the list of mailboxes, but wrap around to the beginning. The
@samp{<sidebar-prev-new>} command is similarly affected, wrapping around to
the end of the list.

@node sidebar_relative_shortpath_indent, sidebar_short_path, sidebar_next_new_wrap, Configuration Variables
@subsection sidebar_relative_shortpath_indent

@display
Type: boolean
Default: no
@end display

When set, this option changes how $sidebar_short_path (@pxref{sidebar_short_path}) and
$sidebar_folder_indent (@pxref{sidebar_folder_indent}) perform shortening and indentation: both
will look at the previous sidebar entries and shorten/indent
relative to the most recent parent.

An example of this option set/unset for mailboxes listed in this
order, with $sidebar_short_path (@pxref{sidebar_short_path})=yes,
$sidebar_folder_indent (@pxref{sidebar_folder_indent})=yes, and $sidebar_indent_string (@pxref{sidebar_indent_string})="→":

@multitable @columnfractions 0.5 0.5
@item
@strong{mailbox}@tab @strong{set}@strong{unset}
@item
@samp{=a.b}@tab @samp{=a.b}@samp{→b}
@item
@samp{=a.b.c.d}@tab @samp{→c.d}@samp{→→→d}
@item
@samp{=a.b.e}@tab @samp{→e}@samp{→→e}
@end multitable

The second line illustrates most clearly.  With this option set,
@samp{=a.b.c.d} is shortened relative to @samp{=a.b}, becoming
@samp{c.d}; it is also indented one place relative to @samp{=a.b}.
With this option unset @samp{=a.b.c.d} is always shortened to the
last part of the mailbox, @samp{d} and is indented three places,
with respect to $folder (@pxref{folder}) (represented by '=').

When set, the third line will also be indented and shortened
relative to the first line.

@node sidebar_short_path, sidebar_sort_method, sidebar_relative_shortpath_indent, Configuration Variables
@subsection sidebar_short_path

@display
Type: boolean
Default: no
@end display

By default the sidebar will show the mailbox's path, relative to the
$folder (@pxref{folder}) variable. Setting @samp{sidebar_shortpath=yes} will shorten the
names relative to the previous name. Here's an example:

@multitable @columnfractions 0.5 0.5
@item
@strong{shortpath=no}@tab @strong{shortpath=yes}@strong{shortpath=yes, folderindent=yes, indentstr=".."}
@item
@samp{fruit}@tab @samp{fruit}@samp{fruit}
@item
@samp{fruit.apple}@tab @samp{apple}@samp{..apple}
@item
@samp{fruit.banana}@tab @samp{banana}@samp{..banana}
@item
@samp{fruit.cherry}@tab @samp{cherry}@samp{..cherry}
@end multitable

@strong{See also:} $sidebar_delim_chars (@pxref{sidebar_delim_chars}), $sidebar_folder_indent (@pxref{sidebar_folder_indent}), $sidebar_indent_string (@pxref{sidebar_indent_string}).

@node sidebar_sort_method, sidebar_use_mailbox_shortcuts, sidebar_short_path, Configuration Variables
@subsection sidebar_sort_method

@display
Type: sort order
Default: order
@end display

Specifies how to sort mailbox entries in the sidebar.  By default, the
entries are sorted alphabetically.  Valid values:

@itemize 

@item
alpha (alphabetically)

@item
count (all message count)

@item
flagged (flagged message count)

@item
name (alphabetically)

@item
new (unread message count)

@item
path (alphabetically)

@item
unread (unread message count)

@item
unsorted
@end itemize

You may optionally use the ‘reverse-’ prefix to specify reverse sorting
order (example: ‘@samp{set sidebar_sort_method=reverse-alpha}’).

@node sidebar_use_mailbox_shortcuts, sidebar_visible, sidebar_sort_method, Configuration Variables
@subsection sidebar_use_mailbox_shortcuts

@display
Type: boolean
Default: no
@end display

When set, sidebar mailboxes will be displayed with mailbox shortcut prefixes
"=" or "~".

When unset, the sidebar will trim off a matching $folder (@pxref{folder}) prefix
but otherwise not use mailbox shortcuts.

@node sidebar_visible, sidebar_width, sidebar_use_mailbox_shortcuts, Configuration Variables
@subsection sidebar_visible

@display
Type: boolean
Default: no
@end display

This specifies whether or not to show sidebar. The sidebar shows a list of
all your mailboxes.

@strong{See also:} $sidebar_format (@pxref{sidebar_format}), $sidebar_width (@pxref{sidebar_width})

@node sidebar_width, sig_dashes, sidebar_visible, Configuration Variables
@subsection sidebar_width

@display
Type: number
Default: 30
@end display

This controls the width of the sidebar.  It is measured in screen columns.
For example: sidebar_width=20 could display 20 ASCII characters, or 10
Chinese characters.

@node sig_dashes, sig_on_top, sidebar_width, Configuration Variables
@subsection sig_dashes

@display
Type: boolean
Default: yes
@end display

If @emph{set}, a line containing ‘-- ’ (note the trailing space) will be inserted before your
$signature (@pxref{signature}).  It is @strong{strongly} recommended that you not @emph{unset}
this variable unless your signature contains just your name.  The
reason for this is because many software packages use ‘-- \n’ to
detect your signature.  For example, Mutt has the ability to highlight
the signature in a different color in the built-in pager.

@node sig_on_top, signature, sig_dashes, Configuration Variables
@subsection sig_on_top

@display
Type: boolean
Default: no
@end display

If @emph{set}, the signature will be included before any quoted or forwarded
text.  It is @strong{strongly} recommended that you do not set this variable
unless you really know what you are doing, and are prepared to take
some heat from netiquette guardians.

@node signature, simple_search, sig_on_top, Configuration Variables
@subsection signature

@display
Type: path
Default: ‘~/.signature’
@end display

Specifies the filename of your signature, which is appended to all
outgoing messages.   If the filename ends with a pipe (‘|’), it is
assumed that filename is a shell command and input should be read from
its standard output.

@node simple_search, size_show_bytes, signature, Configuration Variables
@subsection simple_search

@display
Type: string
Default: ‘~f %s | ~s %s’
@end display

Specifies how Mutt should expand a simple search into a real search
pattern.  A simple search is one that does not contain any of the ‘~’ pattern
modifiers.  See ‘patterns (@pxref{Patterns; Searching; Limiting and Tagging})’ for more information on search patterns.

For example, if you simply type ‘joe’ at a search or limit prompt, Mutt
will automatically expand it to the value specified by this variable by
replacing ‘%s’ with the supplied string.
For the default value, ‘joe’ would be expanded to: ‘~f joe | ~s joe’.

@node size_show_bytes, size_show_fractions, simple_search, Configuration Variables
@subsection size_show_bytes

@display
Type: boolean
Default: no
@end display

If @emph{set}, message sizes will display bytes for values less than
1 kilobyte.  See formatstrings-size (@pxref{Bytes size display}).

@node size_show_fractions, size_show_mb, size_show_bytes, Configuration Variables
@subsection size_show_fractions

@display
Type: boolean
Default: yes
@end display

If @emph{set}, message sizes will be displayed with a single decimal value
for sizes from 0 to 10 kilobytes and 1 to 10 megabytes.
See formatstrings-size (@pxref{Bytes size display}).

@node size_show_mb, size_units_on_left, size_show_fractions, Configuration Variables
@subsection size_show_mb

@display
Type: boolean
Default: yes
@end display

If @emph{set}, message sizes will display megabytes for values greater than
or equal to 1 megabyte.  See formatstrings-size (@pxref{Bytes size display}).

@node size_units_on_left, sleep_time, size_show_mb, Configuration Variables
@subsection size_units_on_left

@display
Type: boolean
Default: no
@end display

If @emph{set}, message sizes units will be displayed to the left of the number.
See formatstrings-size (@pxref{Bytes size display}).

@node sleep_time, smart_wrap, size_units_on_left, Configuration Variables
@subsection sleep_time

@display
Type: number
Default: 1
@end display

Specifies time, in seconds, to pause while displaying certain informational
messages, while moving from folder to folder and after expunging
messages from the current folder.  The default is to pause one second, so
a value of zero for this option suppresses the pause.

@node smart_wrap, smileys, sleep_time, Configuration Variables
@subsection smart_wrap

@display
Type: boolean
Default: yes
@end display

Controls the display of lines longer than the screen width in the
internal pager. If @emph{set}, long lines are wrapped at a word boundary.  If
@emph{unset}, lines are simply wrapped at the screen edge. Also see the
$markers (@pxref{markers}) variable.

@node smileys, smime_ask_cert_label, smart_wrap, Configuration Variables
@subsection smileys

@display
Type: regular expression
Default: ‘(>From )|(:[-^]?[][)(><@}@{|/DP])’
@end display

The @emph{pager} uses this variable to catch some common false
positives of $quote_regexp (@pxref{quote_regexp}), most notably smileys and not consider
a line quoted text if it also matches $smileys (@pxref{smileys}). This mostly
happens at the beginning of a line.

@node smime_ask_cert_label, smime_ca_location, smileys, Configuration Variables
@subsection smime_ask_cert_label

@display
Type: boolean
Default: yes
@end display

This flag controls whether you want to be asked to enter a label
for a certificate about to be added to the database or not. It is
@emph{set} by default.
(S/MIME only)

@node smime_ca_location, smime_certificates, smime_ask_cert_label, Configuration Variables
@subsection smime_ca_location

@display
Type: path
Default: (empty)
@end display

This variable contains the name of either a directory, or a file which
contains trusted certificates for use with OpenSSL.
(S/MIME only)

@node smime_certificates, smime_decrypt_command, smime_ca_location, Configuration Variables
@subsection smime_certificates

@display
Type: path
Default: (empty)
@end display

Since for S/MIME there is no pubring/secring as with PGP, mutt has to handle
storage and retrieval of keys by itself. This is very basic right
now, and keys and certificates are stored in two different
directories, both named as the hash-value retrieved from
OpenSSL. There is an index file which contains mailbox-address
keyid pairs, and which can be manually edited. This option points to
the location of the certificates.
(S/MIME only)

@node smime_decrypt_command, smime_decrypt_use_default_key, smime_certificates, Configuration Variables
@subsection smime_decrypt_command

@display
Type: string
Default: (empty)
@end display

This format string specifies a command which is used to decrypt
@samp{application/x-pkcs7-mime} attachments.

The OpenSSL command formats have their own set of @samp{printf(3)}-like sequences
similar to PGP's:

@multitable @columnfractions 0.5 0.5
@item
%f @tab Expands to the name of a file containing a message.
@item
%s @tab Expands to the name of a file containing the signature part
of a @samp{multipart/signed} attachment when verifying it.
@item
%k @tab The key-pair specified with $smime_default_key (@pxref{smime_default_key})
@item
%c @tab One or more certificate IDs.
@item
%a @tab The algorithm used for encryption.
@item
%d @tab The message digest algorithm specified with $smime_sign_digest_alg (@pxref{smime_sign_digest_alg}).
@item
%C @tab CA location:  Depending on whether $smime_ca_location (@pxref{smime_ca_location})
points to a directory or file, this expands to
‘-CApath $smime_ca_location (@pxref{smime_ca_location})’ or ‘-CAfile $smime_ca_location (@pxref{smime_ca_location})’.
@end multitable

For examples on how to configure these formats, see the @samp{smime.rc} in
the @samp{samples/} subdirectory which has been installed on your system
alongside the documentation.
(S/MIME only)

@node smime_decrypt_use_default_key, smime_default_key, smime_decrypt_command, Configuration Variables
@subsection smime_decrypt_use_default_key

@display
Type: boolean
Default: yes
@end display

If @emph{set} (default) this tells mutt to use the default key for decryption. Otherwise,
if managing multiple certificate-key-pairs, mutt will try to use the mailbox-address
to determine the key to use. It will ask you to supply a key, if it can't find one.
(S/MIME only)

@node smime_default_key, smime_encrypt_command, smime_decrypt_use_default_key, Configuration Variables
@subsection smime_default_key

@display
Type: string
Default: (empty)
@end display

This is the default key-pair to use for S/MIME operations, and must be
set to the keyid (the hash-value that OpenSSL generates) to work properly.

It will be used for encryption (see $postpone_encrypt (@pxref{postpone_encrypt}) and
$smime_self_encrypt (@pxref{smime_self_encrypt})). If GPGME is enabled, this is the key id displayed
by gpgsm.

It will be used for decryption unless $smime_decrypt_use_default_key (@pxref{smime_decrypt_use_default_key})
is @emph{unset}.

It will also be used for signing unless $smime_sign_as (@pxref{smime_sign_as}) is set.

The (now deprecated) @emph{smime_self_encrypt_as} is an alias for this
variable, and should no longer be used.
(S/MIME only)

@node smime_encrypt_command, smime_encrypt_with, smime_default_key, Configuration Variables
@subsection smime_encrypt_command

@display
Type: string
Default: (empty)
@end display

This command is used to create encrypted S/MIME messages.

This is a format string, see the $smime_decrypt_command (@pxref{smime_decrypt_command}) command for
possible @samp{printf(3)}-like sequences.
(S/MIME only)

@node smime_encrypt_with, smime_get_cert_command, smime_encrypt_command, Configuration Variables
@subsection smime_encrypt_with

@display
Type: string
Default: ‘aes256’
@end display

This sets the algorithm that should be used for encryption.
Valid choices are ‘aes128’, ‘aes192’, ‘aes256’, ‘des’, ‘des3’, ‘rc2-40’, ‘rc2-64’, ‘rc2-128’.
(S/MIME only)

@node smime_get_cert_command, smime_get_cert_email_command, smime_encrypt_with, Configuration Variables
@subsection smime_get_cert_command

@display
Type: string
Default: (empty)
@end display

This command is used to extract X509 certificates from a PKCS7 structure.

This is a format string, see the $smime_decrypt_command (@pxref{smime_decrypt_command}) command for
possible @samp{printf(3)}-like sequences.
(S/MIME only)

@node smime_get_cert_email_command, smime_get_signer_cert_command, smime_get_cert_command, Configuration Variables
@subsection smime_get_cert_email_command

@display
Type: string
Default: (empty)
@end display

This command is used to extract the mail address(es) used for storing
X509 certificates, and for verification purposes (to check whether the
certificate was issued for the sender's mailbox).

This is a format string, see the $smime_decrypt_command (@pxref{smime_decrypt_command}) command for
possible @samp{printf(3)}-like sequences.
(S/MIME only)

@node smime_get_signer_cert_command, smime_import_cert_command, smime_get_cert_email_command, Configuration Variables
@subsection smime_get_signer_cert_command

@display
Type: string
Default: (empty)
@end display

This command is used to extract only the signers X509 certificate from a S/MIME
signature, so that the certificate's owner may get compared to the
email's ‘From:’ field.

This is a format string, see the $smime_decrypt_command (@pxref{smime_decrypt_command}) command for
possible @samp{printf(3)}-like sequences.
(S/MIME only)

@node smime_import_cert_command, smime_is_default, smime_get_signer_cert_command, Configuration Variables
@subsection smime_import_cert_command

@display
Type: string
Default: (empty)
@end display

This command is used to import a certificate via smime_keys.

This is a format string, see the $smime_decrypt_command (@pxref{smime_decrypt_command}) command for
possible @samp{printf(3)}-like sequences.
(S/MIME only)

@node smime_is_default, smime_keys, smime_import_cert_command, Configuration Variables
@subsection smime_is_default

@display
Type: boolean
Default: no
@end display

The default behavior of mutt is to use PGP on all auto-sign/encryption
operations. To override and to use OpenSSL instead this must be @emph{set}.
However, this has no effect while replying, since mutt will automatically
select the same application that was used to sign/encrypt the original
message.  (Note that this variable can be overridden by unsetting $crypt_autosmime (@pxref{crypt_autosmime}).)
(S/MIME only)

@node smime_keys, smime_pk7out_command, smime_is_default, Configuration Variables
@subsection smime_keys

@display
Type: path
Default: (empty)
@end display

Since for S/MIME there is no pubring/secring as with PGP, mutt has to handle
storage and retrieval of keys/certs by itself. This is very basic right now,
and stores keys and certificates in two different directories, both
named as the hash-value retrieved from OpenSSL. There is an index file
which contains mailbox-address keyid pair, and which can be manually
edited. This option points to the location of the private keys.
(S/MIME only)

@node smime_pk7out_command, smime_self_encrypt, smime_keys, Configuration Variables
@subsection smime_pk7out_command

@display
Type: string
Default: (empty)
@end display

This command is used to extract PKCS7 structures of S/MIME signatures,
in order to extract the public X509 certificate(s).

This is a format string, see the $smime_decrypt_command (@pxref{smime_decrypt_command}) command for
possible @samp{printf(3)}-like sequences.
(S/MIME only)

@node smime_self_encrypt, smime_sign_as, smime_pk7out_command, Configuration Variables
@subsection smime_self_encrypt

@display
Type: boolean
Default: yes
@end display

When @emph{set}, S/MIME encrypted messages will also be encrypted
using the certificate in $smime_default_key (@pxref{smime_default_key}).
(S/MIME only)

@node smime_sign_as, smime_sign_command, smime_self_encrypt, Configuration Variables
@subsection smime_sign_as

@display
Type: string
Default: (empty)
@end display

If you have a separate key to use for signing, you should set this
to the signing key. Most people will only need to set $smime_default_key (@pxref{smime_default_key}).
(S/MIME only)

@node smime_sign_command, smime_sign_digest_alg, smime_sign_as, Configuration Variables
@subsection smime_sign_command

@display
Type: string
Default: (empty)
@end display

This command is used to created S/MIME signatures of type
@samp{multipart/signed}, which can be read by all mail clients.

This is a format string, see the $smime_decrypt_command (@pxref{smime_decrypt_command}) command for
possible @samp{printf(3)}-like sequences.  NOTE: %c and %k will default
to $smime_sign_as (@pxref{smime_sign_as}) if set, otherwise $smime_default_key (@pxref{smime_default_key}).
(S/MIME only)

@node smime_sign_digest_alg, smime_sign_opaque_command, smime_sign_command, Configuration Variables
@subsection smime_sign_digest_alg

@display
Type: string
Default: ‘sha256’
@end display

This sets the algorithm that should be used for the signature message digest.
Valid choices are ‘md5’, ‘sha1’, ‘sha224’, ‘sha256’, ‘sha384’, ‘sha512’.
(S/MIME only)

@node smime_sign_opaque_command, smime_timeout, smime_sign_digest_alg, Configuration Variables
@subsection smime_sign_opaque_command

@display
Type: string
Default: (empty)
@end display

This command is used to created S/MIME signatures of type
@samp{application/x-pkcs7-signature}, which can only be handled by mail
clients supporting the S/MIME extension.

This is a format string, see the $smime_decrypt_command (@pxref{smime_decrypt_command}) command for
possible @samp{printf(3)}-like sequences.
(S/MIME only)

@node smime_timeout, smime_verify_command, smime_sign_opaque_command, Configuration Variables
@subsection smime_timeout

@display
Type: number (long)
Default: 300
@end display

The number of seconds after which a cached passphrase will expire if
not used.
(S/MIME only)

@node smime_verify_command, smime_verify_opaque_command, smime_timeout, Configuration Variables
@subsection smime_verify_command

@display
Type: string
Default: (empty)
@end display

This command is used to verify S/MIME signatures of type @samp{multipart/signed}.

This is a format string, see the $smime_decrypt_command (@pxref{smime_decrypt_command}) command for
possible @samp{printf(3)}-like sequences.
(S/MIME only)

@node smime_verify_opaque_command, smtp_authenticators, smime_verify_command, Configuration Variables
@subsection smime_verify_opaque_command

@display
Type: string
Default: (empty)
@end display

This command is used to verify S/MIME signatures of type
@samp{application/x-pkcs7-mime}.

This is a format string, see the $smime_decrypt_command (@pxref{smime_decrypt_command}) command for
possible @samp{printf(3)}-like sequences.
(S/MIME only)

@node smtp_authenticators, smtp_oauth_refresh_command, smime_verify_opaque_command, Configuration Variables
@subsection smtp_authenticators

@display
Type: string
Default: (empty)
@end display

This is a colon-delimited list of authentication methods mutt may
attempt to use to log in to an SMTP server, in the order mutt should
try them.  Authentication methods are any SASL mechanism, e.g.
‘digest-md5’, ‘gssapi’ or ‘cram-md5’.
This option is case-insensitive. If it is ‘unset’
(the default) mutt will try all available methods, in order from
most-secure to least-secure.

Example:

@example

set smtp_authenticators="digest-md5:cram-md5"
@end example

@node smtp_oauth_refresh_command, smtp_pass, smtp_authenticators, Configuration Variables
@subsection smtp_oauth_refresh_command

@display
Type: string
Default: (empty)
@end display

The command to run to generate an OAUTH refresh token for
authorizing your connection to your SMTP server.  This command will be
run on every connection attempt that uses the OAUTHBEARER authentication
mechanism.  See ‘oauth (@pxref{OAUTHBEARER Support})’ for details.

@node smtp_pass, smtp_url, smtp_oauth_refresh_command, Configuration Variables
@subsection smtp_pass

@display
Type: string
Default: (empty)
@end display

Specifies the password for your SMTP account.  If @emph{unset}, Mutt will
prompt you for your password when you first send mail via SMTP.
See $smtp_url (@pxref{smtp_url}) to configure mutt to send mail via SMTP.

@strong{Warning}: you should only use this option when you are on a
fairly secure machine, because the superuser can read your muttrc even
if you are the only one who can read the file.

@node smtp_url, sort, smtp_pass, Configuration Variables
@subsection smtp_url

@display
Type: string
Default: (empty)
@end display

Defines the SMTP smarthost where sent messages should relayed for
delivery. This should take the form of an SMTP URL, e.g.:

@example

smtp[s]://[user[:pass]@@]host[:port]
@end example

where ‘[...]’ denotes an optional part.
Setting this variable overrides the value of the $sendmail (@pxref{sendmail})
variable.

Also see $write_bcc (@pxref{write_bcc}).

@node sort, sort_alias, smtp_url, Configuration Variables
@subsection sort

@display
Type: sort order
Default: date
@end display

Specifies how to sort messages in the ‘index’ menu.  Valid values
are:

@itemize 

@item
date or date-sent

@item
date-received

@item
from

@item
mailbox-order (unsorted)

@item
score

@item
size

@item
spam

@item
subject

@item
threads

@item
to
@end itemize

You may optionally use the ‘reverse-’ prefix to specify reverse sorting
order (example: ‘@samp{set sort=reverse-date-sent}’).

@node sort_alias, sort_aux, sort, Configuration Variables
@subsection sort_alias

@display
Type: sort order
Default: alias
@end display

Specifies how the entries in the ‘alias’ menu are sorted.  The
following are legal values:

@itemize 

@item
address (sort alphabetically by email address)

@item
alias (sort alphabetically by alias name)

@item
unsorted (leave in order specified in .muttrc)
@end itemize

@node sort_aux, sort_browser, sort_alias, Configuration Variables
@subsection sort_aux

@display
Type: sort order
Default: date
@end display

This provides a secondary sort for messages in the ‘index’ menu, used
when the $sort (@pxref{sort}) value is equal for two messages.

When sorting by threads, this variable controls how threads are sorted
in relation to other threads, and how the branches of the thread trees
are sorted.  This can be set to any value that $sort (@pxref{sort}) can, except
‘threads’ (in that case, mutt will just use ‘date-sent’).  You can also
specify the ‘last-’ prefix in addition to the ‘reverse-’ prefix, but ‘last-’
must come after ‘reverse-’.  The ‘last-’ prefix causes messages to be
sorted against its siblings by which has the last descendant, using
the rest of $sort_aux (@pxref{sort_aux}) as an ordering.  For instance,

@example

set sort_aux=last-date-received
@end example

would mean that if a new message is received in a
thread, that thread becomes the last one displayed (or the first, if
you have ‘@samp{set sort=reverse-threads}’.)

Note: For reversed-threads $sort (@pxref{sort})
order, $sort_aux (@pxref{sort_aux}) is reversed again (which is not the right thing to do,
but kept to not break any existing configuration setting).

@node sort_browser, sort_re, sort_aux, Configuration Variables
@subsection sort_browser

@display
Type: sort order
Default: alpha
@end display

Specifies how to sort entries in the file browser.  By default, the
entries are sorted alphabetically.  Valid values:

@itemize 

@item
alpha (alphabetically)

@item
count

@item
date

@item
size

@item
unread

@item
unsorted
@end itemize

You may optionally use the ‘reverse-’ prefix to specify reverse sorting
order (example: ‘@samp{set sort_browser=reverse-date}’).

@node sort_re, spam_separator, sort_browser, Configuration Variables
@subsection sort_re

@display
Type: boolean
Default: yes
@end display

This variable is only useful when sorting by threads with
$strict_threads (@pxref{strict_threads}) @emph{unset}.  In that case, it changes the heuristic
mutt uses to thread messages by subject.  With $sort_re (@pxref{sort_re}) @emph{set}, mutt will
only attach a message as the child of another message by subject if
the subject of the child message starts with a substring matching the
setting of $reply_regexp (@pxref{reply_regexp}).  With $sort_re (@pxref{sort_re}) @emph{unset}, mutt will attach
the message whether or not this is the case, as long as the
non-$reply_regexp (@pxref{reply_regexp}) parts of both messages are identical.

@node spam_separator, spoolfile, sort_re, Configuration Variables
@subsection spam_separator

@display
Type: string
Default: ‘,’
@end display

This variable controls what happens when multiple spam headers
are matched: if @emph{unset}, each successive header will overwrite any
previous matches value for the spam label. If @emph{set}, each successive
match will append to the previous, using this variable's value as a
separator.

@node spoolfile, ssl_ca_certificates_file, spam_separator, Configuration Variables
@subsection spoolfile

@display
Type: path
Default: (empty)
@end display

If your spool mailbox is in a non-default place where Mutt cannot find
it, you can specify its location with this variable.  Mutt will
initially set this variable to the value of the environment
variable @samp{$MAIL} or @samp{$MAILDIR} if either is defined.

@node ssl_ca_certificates_file, ssl_client_cert, spoolfile, Configuration Variables
@subsection ssl_ca_certificates_file

@display
Type: path
Default: (empty)
@end display

This variable specifies a file containing trusted CA certificates.
Any server certificate that is signed with one of these CA
certificates is also automatically accepted. (GnuTLS only)

Example:

@example

set ssl_ca_certificates_file=/etc/ssl/certs/ca-certificates.crt
@end example

@node ssl_client_cert, ssl_force_tls, ssl_ca_certificates_file, Configuration Variables
@subsection ssl_client_cert

@display
Type: path
Default: (empty)
@end display

The file containing a client certificate and its associated private
key.

@node ssl_force_tls, ssl_min_dh_prime_bits, ssl_client_cert, Configuration Variables
@subsection ssl_force_tls

@display
Type: boolean
Default: yes
@end display

If this variable is @emph{set}, Mutt will require that all connections
to remote servers be encrypted. Furthermore it will attempt to
negotiate TLS even if the server does not advertise the capability,
since it would otherwise have to abort the connection anyway. This
option supersedes $ssl_starttls (@pxref{ssl_starttls}).

@node ssl_min_dh_prime_bits, ssl_starttls, ssl_force_tls, Configuration Variables
@subsection ssl_min_dh_prime_bits

@display
Type: number
Default: 0
@end display

This variable specifies the minimum acceptable prime size (in bits)
for use in any Diffie-Hellman key exchange. A value of 0 will use
the default from the GNUTLS library. (GnuTLS only)

@node ssl_starttls, ssl_use_sslv2, ssl_min_dh_prime_bits, Configuration Variables
@subsection ssl_starttls

@display
Type: quadoption
Default: yes
@end display

If @emph{set} (the default), mutt will attempt to use @samp{STARTTLS} on servers
advertising the capability. When @emph{unset}, mutt will not attempt to
use @samp{STARTTLS} regardless of the server's capabilities.

@strong{Note} that @samp{STARTTLS} is subject to many kinds of
attacks, including the ability of a machine-in-the-middle to
suppress the advertising of support.  Setting $ssl_force_tls (@pxref{ssl_force_tls}) is
recommended if you rely on @samp{STARTTLS}.

@node ssl_use_sslv2, ssl_use_sslv3, ssl_starttls, Configuration Variables
@subsection ssl_use_sslv2

@display
Type: boolean
Default: no
@end display

If @emph{set} , Mutt will use SSLv2 when communicating with servers that
request it. @strong{N.B. As of 2011, SSLv2 is considered insecure, and using
is inadvisable. See https://tools.ietf.org/html/rfc6176 .}
(OpenSSL only)

@node ssl_use_sslv3, ssl_use_tlsv1, ssl_use_sslv2, Configuration Variables
@subsection ssl_use_sslv3

@display
Type: boolean
Default: no
@end display

If @emph{set} , Mutt will use SSLv3 when communicating with servers that
request it. @strong{N.B. As of 2015, SSLv3 is considered insecure, and using
it is inadvisable. See https://tools.ietf.org/html/rfc7525 .}

@node ssl_use_tlsv1, ssl_use_tlsv1_1, ssl_use_sslv3, Configuration Variables
@subsection ssl_use_tlsv1

@display
Type: boolean
Default: no
@end display

If @emph{set} , Mutt will use TLSv1.0 when communicating with servers that
request it. @strong{N.B. As of 2015, TLSv1.0 is considered insecure, and using
it is inadvisable. See https://tools.ietf.org/html/rfc7525 .}

@node ssl_use_tlsv1_1, ssl_use_tlsv1_2, ssl_use_tlsv1, Configuration Variables
@subsection ssl_use_tlsv1_1

@display
Type: boolean
Default: no
@end display

If @emph{set} , Mutt will use TLSv1.1 when communicating with servers that
request it. @strong{N.B. As of 2015, TLSv1.1 is considered insecure, and using
it is inadvisable. See https://tools.ietf.org/html/rfc7525 .}

@node ssl_use_tlsv1_2, ssl_use_tlsv1_3, ssl_use_tlsv1_1, Configuration Variables
@subsection ssl_use_tlsv1_2

@display
Type: boolean
Default: yes
@end display

If @emph{set} , Mutt will use TLSv1.2 when communicating with servers that
request it.

@node ssl_use_tlsv1_3, ssl_usesystemcerts, ssl_use_tlsv1_2, Configuration Variables
@subsection ssl_use_tlsv1_3

@display
Type: boolean
Default: yes
@end display

If @emph{set} , Mutt will use TLSv1.3 when communicating with servers that
request it.

@node ssl_usesystemcerts, ssl_verify_dates, ssl_use_tlsv1_3, Configuration Variables
@subsection ssl_usesystemcerts

@display
Type: boolean
Default: yes
@end display

If set to @emph{yes}, mutt will use CA certificates in the
system-wide certificate store when checking if a server certificate
is signed by a trusted CA. (OpenSSL only)

@node ssl_verify_dates, ssl_verify_host, ssl_usesystemcerts, Configuration Variables
@subsection ssl_verify_dates

@display
Type: boolean
Default: yes
@end display

If @emph{set} (the default), mutt will not automatically accept a server
certificate that is either not yet valid or already expired. You should
only unset this for particular known hosts, using the
@samp{<account-hook> (@pxref{Managing Multiple Accounts})} function.

@node ssl_verify_host, ssl_verify_partial_chains, ssl_verify_dates, Configuration Variables
@subsection ssl_verify_host

@display
Type: boolean
Default: yes
@end display

If @emph{set} (the default), mutt will not automatically accept a server
certificate whose host name does not match the host used in your folder
URL. You should only unset this for particular known hosts, using
the @samp{<account-hook> (@pxref{Managing Multiple Accounts})} function.

@node ssl_verify_partial_chains, ssl_ciphers, ssl_verify_host, Configuration Variables
@subsection ssl_verify_partial_chains

@display
Type: boolean
Default: no
@end display

This option should not be changed from the default unless you understand
what you are doing.

Setting this variable to @emph{yes} will permit verifying partial
certification chains, i. e. a certificate chain where not the root,
but an intermediate certificate CA, or the host certificate, are
marked trusted (in $certificate_file (@pxref{certificate_file})), without marking the root
signing CA as trusted.

(OpenSSL 1.0.2b and newer only).

@node ssl_ciphers, status_chars, ssl_verify_partial_chains, Configuration Variables
@subsection ssl_ciphers

@display
Type: string
Default: (empty)
@end display

Contains a colon-separated list of ciphers to use when using SSL.
For OpenSSL, see ciphers(1) for the syntax of the string.

For GnuTLS, this option will be used in place of "NORMAL" at the
start of the priority string.  See gnutls_priority_init(3) for the
syntax and more details. (Note: GnuTLS version 2.1.7 or higher is
required.)

@node status_chars, status_format, ssl_ciphers, Configuration Variables
@subsection status_chars

@display
Type: string
Default: ‘-*%A’
@end display

Controls the characters used by the ‘%r’ indicator in
$status_format (@pxref{status_format}). The first character is used when the mailbox is
unchanged. The second is used when the mailbox has been changed, and
it needs to be resynchronized. The third is used if the mailbox is in
read-only mode, or if the mailbox will not be written when exiting
that mailbox (You can toggle whether to write changes to a mailbox
with the @samp{<toggle-write>} operation, bound by default to ‘%’). The fourth
is used to indicate that the current folder has been opened in attach-
message mode (Certain operations like composing a new mail, replying,
forwarding, etc. are not permitted in this mode).

@node status_format, status_on_top, status_chars, Configuration Variables
@subsection status_format

@display
Type: string (localized)
Default: ‘-%r-Mutt: %f [Msgs:%?M?%M/?%m%?n? New:%n?%?o? Old:%o?%?d? Del:%d?%?F? Flag:%F?%?t? Tag:%t?%?p? Post:%p?%?b? Inc:%b?%?B? Back:%B?%?l? %l?]---(%s/%S)-%>-(%P)---’
@end display

Controls the format of the status line displayed in the ‘index’
menu.  This string is similar to $index_format (@pxref{index_format}), but has its own
set of @samp{printf(3)}-like sequences:

@multitable @columnfractions 0.5 0.5
@item
%b  @tab number of mailboxes with new mail *
@item
%B  @tab number of backgrounded editing sessions *
@item
%d  @tab number of deleted messages *
@item
%f  @tab the full pathname of the current mailbox
@item
%F  @tab number of flagged messages *
@item
%h  @tab local hostname
@item
%l  @tab size (in bytes) of the current mailbox (see formatstrings-size (@pxref{Bytes size display})) *
@item
%L  @tab size (in bytes) of the messages shown
(i.e., which match the current limit) (see formatstrings-size (@pxref{Bytes size display})) *
@item
%m  @tab the number of messages in the mailbox *
@item
%M  @tab the number of messages shown (i.e., which match the current limit) *
@item
%n  @tab number of new messages in the mailbox *
@item
%o  @tab number of old unread messages *
@item
%p  @tab number of postponed messages *
@item
%P  @tab percentage of the way through the index
@item
%r  @tab modified/read-only/won't-write/attach-message indicator,
according to $status_chars (@pxref{status_chars})
@item
%R  @tab number of read messages *
@item
%s  @tab current sorting mode ($sort (@pxref{sort}))
@item
%S  @tab current aux sorting method ($sort_aux (@pxref{sort_aux}))
@item
%t  @tab number of tagged messages *
@item
%u  @tab number of unread messages *
@item
%v  @tab Mutt version string
@item
%V  @tab currently active limit pattern, if any *
@item
%>X @tab right justify the rest of the string and pad with ‘X’
@item
%|X @tab pad to the end of the line with ‘X’
@item
%*X @tab soft-fill with character ‘X’ as pad
@end multitable

For an explanation of ‘soft-fill’, see the $index_format (@pxref{index_format}) documentation.

* = can be optionally printed if nonzero

Some of the above sequences can be used to optionally print a string
if their value is nonzero.  For example, you may only want to see the
number of flagged messages if such messages exist, since zero is not
particularly meaningful.  To optionally print a string based upon one
of the above sequences, the following construct is used:

@samp{%?<sequence_char>?<optional_string>?}

where @emph{sequence_char} is a character from the table above, and
@emph{optional_string} is the string you would like printed if
@emph{sequence_char} is nonzero.  @emph{optional_string} @strong{may} contain
other sequences as well as normal text, but you may @strong{not} nest
optional strings.

Here is an example illustrating how to optionally print the number of
new messages in a mailbox:

@samp{%?n?%n new messages.?}

You can also switch between two strings using the following construct:

@samp{%?<sequence_char>?<if_string>&<else_string>?}

If the value of @emph{sequence_char} is non-zero, @emph{if_string} will
be expanded, otherwise @emph{else_string} will be expanded.

You can force the result of any @samp{printf(3)}-like sequence to be lowercase
by prefixing the sequence character with an underscore (‘_’) sign.
For example, if you want to display the local hostname in lowercase,
you would use: ‘@samp{%_h}’.

If you prefix the sequence character with a colon (‘:’) character, mutt
will replace any dots in the expansion by underscores. This might be helpful
with IMAP folders that don't like dots in folder names.

@node status_on_top, strict_threads, status_format, Configuration Variables
@subsection status_on_top

@display
Type: boolean
Default: no
@end display

Setting this variable causes the ‘status bar’ to be displayed on
the first line of the screen rather than near the bottom. If $help (@pxref{help})
is @emph{set}, too it'll be placed at the bottom.

@node strict_threads, suspend, status_on_top, Configuration Variables
@subsection strict_threads

@display
Type: boolean
Default: no
@end display

If @emph{set}, threading will only make use of the ‘In-Reply-To’ and
‘References:’ fields when you $sort (@pxref{sort}) by message threads.  By
default, messages with the same subject are grouped together in
‘pseudo threads.’. This may not always be desirable, such as in a
personal mailbox where you might have several unrelated messages with
the subjects like ‘hi’ which will get grouped together. See also
$sort_re (@pxref{sort_re}) for a less drastic way of controlling this
behavior.

@node suspend, text_flowed, strict_threads, Configuration Variables
@subsection suspend

@display
Type: boolean
Default: yes
@end display

When @emph{unset}, mutt won't stop when the user presses the terminal's
@emph{susp} key, usually ‘^Z’. This is useful if you run mutt
inside an xterm using a command like ‘@samp{xterm -e mutt}’.

@node text_flowed, thorough_search, suspend, Configuration Variables
@subsection text_flowed

@display
Type: boolean
Default: no
@end display

When @emph{set}, mutt will generate ‘format=flowed’ bodies with a content type
of ‘@samp{text/plain; format=flowed}’.
This format is easier to handle for some mailing software, and generally
just looks like ordinary text.  To actually make use of this format's
features, you'll need support in your editor.

The option only controls newly composed messages.  Postponed messages,
resent messages, and draft messages (via -H on the command line) will
use the content-type of the source message.

Note that $indent_string (@pxref{indent_string}) is ignored when this option is @emph{set}.

@node thorough_search, thread_received, text_flowed, Configuration Variables
@subsection thorough_search

@display
Type: boolean
Default: yes
@end display

Affects the @samp{~b} and @samp{~h} search operations described in
section ‘patterns (@pxref{Patterns; Searching; Limiting and Tagging})’.  If @emph{set}, the headers and body/attachments of
messages to be searched are decoded before searching. If @emph{unset},
messages are searched as they appear in the folder.

Users searching attachments or for non-ASCII characters should @emph{set}
this value because decoding also includes MIME parsing/decoding and possible
character set conversions. Otherwise mutt will attempt to match against the
raw message received (for example quoted-printable encoded or with encoded
headers) which may lead to incorrect search results.

@node thread_received, tilde, thorough_search, Configuration Variables
@subsection thread_received

@display
Type: boolean
Default: no
@end display

When @emph{set}, mutt uses the date received rather than the date sent
to thread messages by subject.

@node tilde, time_inc, thread_received, Configuration Variables
@subsection tilde

@display
Type: boolean
Default: no
@end display

When @emph{set}, the internal-pager will pad blank lines to the bottom of the
screen with a tilde (‘~’).

@node time_inc, timeout, tilde, Configuration Variables
@subsection time_inc

@display
Type: number
Default: 0
@end display

Along with $read_inc (@pxref{read_inc}), $write_inc (@pxref{write_inc}), and $net_inc (@pxref{net_inc}), this
variable controls the frequency with which progress updates are
displayed. It suppresses updates less than $time_inc (@pxref{time_inc}) milliseconds
apart. This can improve throughput on systems with slow terminals,
or when running mutt on a remote system.

Also see the ‘tuning (@pxref{Performance Tuning})’ section of the manual for performance considerations.

@node timeout, tmpdir, time_inc, Configuration Variables
@subsection timeout

@display
Type: number
Default: 600
@end display

When Mutt is waiting for user input either idling in menus or
in an interactive prompt, Mutt would block until input is
present. Depending on the context, this would prevent certain
operations from working, like checking for new mail or keeping
an IMAP connection alive.

This variable controls how many seconds Mutt will at most wait
until it aborts waiting for input, performs these operations and
continues to wait for input.

A value of zero or less will cause Mutt to never time out.

@node tmpdir, to_chars, timeout, Configuration Variables
@subsection tmpdir

@display
Type: path
Default: (empty)
@end display

This variable allows you to specify where Mutt will place its
temporary files needed for displaying and composing messages.  If
this variable is not set, the environment variable @samp{$TMPDIR} is
used.  If @samp{$TMPDIR} is not set then ‘@samp{/tmp}’ is used.

@node to_chars, trash, tmpdir, Configuration Variables
@subsection to_chars

@display
Type: string
Default: ‘ +TCFL’
@end display

Controls the character used to indicate mail addressed to you.  The
first character is the one used when the mail is @emph{not} addressed to your
address.  The second is used when you are the only
recipient of the message.  The third is when your address
appears in the ‘To:’ header field, but you are not the only recipient of
the message.  The fourth character is used when your
address is specified in the ‘Cc:’ header field, but you are not the only
recipient.  The fifth character is used to indicate mail that was sent
by @emph{you}.  The sixth character is used to indicate when a mail
was sent to a mailing-list you subscribe to.

@node trash, ts_icon_format, to_chars, Configuration Variables
@subsection trash

@display
Type: path
Default: (empty)
@end display

If set, this variable specifies the path of the trash folder where the
mails marked for deletion will be moved, instead of being irremediably
purged.

NOTE: When you delete a message in the trash folder, it is really
deleted, so that you have a way to clean the trash.

@node ts_icon_format, ts_enabled, trash, Configuration Variables
@subsection ts_icon_format

@display
Type: string (localized)
Default: ‘M%?n?AIL&ail?’
@end display

Controls the format of the icon title, as long as ‘$ts_enabled (@pxref{ts_enabled})’ is set.
This string is identical in formatting to the one used by
‘$status_format (@pxref{status_format})’.

@node ts_enabled, ts_status_format, ts_icon_format, Configuration Variables
@subsection ts_enabled

@display
Type: boolean
Default: no
@end display

Controls whether mutt tries to set the terminal status line and icon name.
Most terminal emulators emulate the status line in the window title.

@node ts_status_format, tunnel, ts_enabled, Configuration Variables
@subsection ts_status_format

@display
Type: string (localized)
Default: ‘Mutt with %?m?%m messages&no messages?%?n? [%n NEW]?’
@end display

Controls the format of the terminal status line (or window title),
provided that ‘$ts_enabled (@pxref{ts_enabled})’ has been set. This string is identical in
formatting to the one used by ‘$status_format (@pxref{status_format})’.

@node tunnel, tunnel_is_secure, ts_status_format, Configuration Variables
@subsection tunnel

@display
Type: string
Default: (empty)
@end display

Setting this variable will cause mutt to open a pipe to a command
instead of a raw socket. You may be able to use this to set up
preauthenticated connections to your IMAP/POP3/SMTP server. Example:

@example

set tunnel="ssh -q mailhost.net /usr/local/libexec/imapd"
@end example

Note: For this example to work you must be able to log in to the remote
machine without having to enter a password.

When set, Mutt uses the tunnel for all remote connections.
Please see ‘account-hook (@pxref{Managing Multiple Accounts})’ in the manual for how to use different
tunnel commands per connection.

@node tunnel_is_secure, uncollapse_jump, tunnel, Configuration Variables
@subsection tunnel_is_secure

@display
Type: boolean
Default: yes
@end display

When @emph{set}, Mutt will assume the $tunnel (@pxref{tunnel}) connection does not need
STARTTLS to be enabled.  It will also allow IMAP PREAUTH server
responses inside a tunnel (@pxref{tunnel}) to proceed.  This is appropriate if $tunnel (@pxref{tunnel})
uses ssh or directly invokes the server locally.

When @emph{unset}, Mutt will negotiate STARTTLS according to the
ssl_starttls (@pxref{ssl_starttls}) and ssl_force_tls (@pxref{ssl_force_tls}) variables.  If ssl_force_tls (@pxref{ssl_force_tls}) is
set, Mutt will abort connecting if an IMAP server responds with PREAUTH.
This setting is appropriate if $tunnel (@pxref{tunnel}) does not provide security and
could be tampered with by attackers.

@node uncollapse_jump, uncollapse_new, tunnel_is_secure, Configuration Variables
@subsection uncollapse_jump

@display
Type: boolean
Default: no
@end display

When @emph{set}, Mutt will jump to the next unread message, if any,
when the current thread is @emph{un}collapsed.

@node uncollapse_new, use_8bitmime, uncollapse_jump, Configuration Variables
@subsection uncollapse_new

@display
Type: boolean
Default: yes
@end display

When @emph{set}, Mutt will automatically uncollapse any collapsed thread
that receives a new message. When @emph{unset}, collapsed threads will
remain collapsed. the presence of the new message will still affect
index sorting, though.

@node use_8bitmime, use_domain, uncollapse_new, Configuration Variables
@subsection use_8bitmime

@display
Type: boolean
Default: no
@end display

@strong{Warning:} do not set this variable unless you are using a version
of sendmail which supports the @samp{-B8BITMIME} flag (such as sendmail
8.8.x) or you may not be able to send mail.

When @emph{set}, Mutt will invoke $sendmail (@pxref{sendmail}) with the @samp{-B8BITMIME}
flag when sending 8-bit messages to enable ESMTP negotiation.

@node use_domain, use_envelope_from, use_8bitmime, Configuration Variables
@subsection use_domain

@display
Type: boolean
Default: yes
@end display

When @emph{set}, Mutt will qualify all local addresses (ones without the
‘@@host’ portion) with the value of $hostname (@pxref{hostname}).  If @emph{unset}, no
addresses will be qualified.

@node use_envelope_from, use_from, use_domain, Configuration Variables
@subsection use_envelope_from

@display
Type: boolean
Default: no
@end display

When @emph{set}, mutt will set the @emph{envelope} sender of the message.
If $envelope_from_address (@pxref{envelope_from_address}) is @emph{set}, it will be used as the sender
address. If @emph{unset}, mutt will attempt to derive the sender from the
‘From:’ header.

Note that this information is passed to sendmail command using the
@samp{-f} command line switch. Therefore setting this option is not useful
if the $sendmail (@pxref{sendmail}) variable already contains @samp{-f} or if the
executable pointed to by $sendmail (@pxref{sendmail}) doesn't support the @samp{-f} switch.

@node use_from, use_ipv6, use_envelope_from, Configuration Variables
@subsection use_from

@display
Type: boolean
Default: yes
@end display

When @emph{set}, Mutt will generate the ‘From:’ header field when
sending messages.  If @emph{unset}, no ‘From:’ header field will be
generated unless the user explicitly sets one using the ‘my_hdr (@pxref{User-Defined Headers})’
command.

@node use_ipv6, user_agent, use_from, Configuration Variables
@subsection use_ipv6

@display
Type: boolean
Default: yes
@end display

When @emph{set}, Mutt will look for IPv6 addresses of hosts it tries to
contact.  If this option is @emph{unset}, Mutt will restrict itself to IPv4 addresses.
Normally, the default should work.

@node user_agent, visual, use_ipv6, Configuration Variables
@subsection user_agent

@display
Type: boolean
Default: no
@end display

When @emph{set}, mutt will add a ‘User-Agent:’ header to outgoing
messages, indicating which version of mutt was used for composing
them.

@node visual, wait_key, user_agent, Configuration Variables
@subsection visual

@display
Type: path
Default: (empty)
@end display

Specifies the visual editor to invoke when the ‘@samp{~v}’ command is
given in the built-in editor.

@node wait_key, weed, visual, Configuration Variables
@subsection wait_key

@display
Type: boolean
Default: yes
@end display

Controls whether Mutt will ask you to press a key after an external command
has been invoked by these functions: @samp{<shell-escape>},
@samp{<pipe-message>}, @samp{<pipe-entry>}, @samp{<print-message>},
and @samp{<print-entry>} commands.

It is also used when viewing attachments with ‘auto_view (@pxref{MIME Autoview})’, provided
that the corresponding mailcap entry has a @emph{needsterminal} flag,
and the external program is interactive.

When @emph{set}, Mutt will always ask for a key. When @emph{unset}, Mutt will wait
for a key only if the external command returned a non-zero status.

@node weed, wrap, wait_key, Configuration Variables
@subsection weed

@display
Type: boolean
Default: yes
@end display

When @emph{set}, mutt will weed headers when displaying, forwarding,
or replying to messages.

Also see $copy_decode_weed (@pxref{copy_decode_weed}), $pipe_decode_weed (@pxref{pipe_decode_weed}), $print_decode_weed (@pxref{print_decode_weed}).

@node wrap, wrap_headers, weed, Configuration Variables
@subsection wrap

@display
Type: number
Default: 0
@end display

When set to a positive value, mutt will wrap text at $wrap (@pxref{wrap}) characters.
When set to a negative value, mutt will wrap text so that there are $wrap (@pxref{wrap})
characters of empty space on the right side of the terminal. Setting it
to zero makes mutt wrap at the terminal width.

Also see $reflow_wrap (@pxref{reflow_wrap}).

@node wrap_headers, wrap_search, wrap, Configuration Variables
@subsection wrap_headers

@display
Type: number
Default: 78
@end display

This option specifies the number of characters to use for wrapping
an outgoing message's headers. Allowed values are between 78 and 998
inclusive.

@strong{Note:} This option usually shouldn't be changed. RFC5233
recommends a line length of 78 (the default), so @strong{please only change
this setting when you know what you're doing}.

@node wrap_search, wrapmargin, wrap_headers, Configuration Variables
@subsection wrap_search

@display
Type: boolean
Default: yes
@end display

Controls whether searches wrap around the end.

When @emph{set}, searches will wrap around the first (or last) item. When
@emph{unset}, incremental searches will not wrap.

@node wrapmargin, write_bcc, wrap_search, Configuration Variables
@subsection wrapmargin

@display
Type: number
Default: 0
@end display

(DEPRECATED) Equivalent to setting $wrap (@pxref{wrap}) with a negative value.

@node write_bcc, write_inc, wrapmargin, Configuration Variables
@subsection write_bcc

@display
Type: boolean
Default: no
@end display

Controls whether mutt writes out the ‘Bcc:’ header when
preparing messages to be sent.  Some MTAs, such as Exim and
Courier, do not strip the ‘Bcc:’ header; so it is advisable to
leave this unset unless you have a particular need for the header
to be in the sent message.

If mutt is set to deliver directly via SMTP (see $smtp_url (@pxref{smtp_url})),
this option does nothing: mutt will never write out the ‘Bcc:’
header in this case.

Note this option only affects the sending of messages.  Fcc'ed
copies of a message will always contain the ‘Bcc:’ header if
one exists.

@node write_inc, , write_bcc, Configuration Variables
@subsection write_inc

@display
Type: number
Default: 10
@end display

When writing a mailbox, a message will be printed every
$write_inc (@pxref{write_inc}) messages to indicate progress.  If set to 0, only a
single message will be displayed before writing a mailbox.

Also see the $read_inc (@pxref{read_inc}), $net_inc (@pxref{net_inc}) and $time_inc (@pxref{time_inc}) variables and the
‘tuning (@pxref{Performance Tuning})’ section of the manual for performance considerations.

@node Functions <1>, , Configuration Variables, Reference
@section Functions

The following is the list of available functions listed by the mapping
in which they are available.  The default key setting is given, and an
explanation of what the function does.  The key bindings of these
functions can be changed with the bind (@pxref{Changing the Default Key Bindings})
command.

@menu
* Generic Menu::
* Index Menu::
* Pager Menu::
* Alias Menu: Alias Menu <1>.
* Query Menu::
* Attachment Menu: Attachment Menu <1>.
* Compose Menu: Compose Menu <2>.
* Postpone Menu::
* Browser Menu::
* Pgp Menu::
* Smime Menu::
* Mixmaster Menu::
* Editor Menu::
* Autocrypt Account Menu::
@end menu

@node Generic Menu, Index Menu, , Functions <1>
@subsection Generic Menu

The @emph{generic} menu is not a real menu, but specifies common functions
(such as movement) available in all menus except for @emph{pager} and
@emph{editor}.  Changing settings for this menu will affect the default
bindings for all menus (except as noted).

@noindent
@anchor{Default Generic Menu Bindings}

@strong{Default Generic Menu Bindings}

@multitable @columnfractions 0.333333333333333 0.333333333333333 0.333333333333333
@item
Function@tab Default key@tab Description
@item
@samp{<top-page>}@tab H@tab move to the top of the page
@item
@samp{<next-entry>}@tab j@tab move to the next entry
@item
@samp{<previous-entry>}@tab k@tab move to the previous entry
@item
@samp{<bottom-page>}@tab L@tab move to the bottom of the page
@item
@samp{<refresh>}@tab ^L@tab clear and redraw the screen
@item
@samp{<middle-page>}@tab M@tab move to the middle of the page
@item
@samp{<search-next>}@tab n@tab search for next match
@item
@samp{<exit>}@tab q@tab exit this menu
@item
@samp{<tag-entry>}@tab t@tab tag the current entry
@item
@samp{<next-page>}@tab z@tab move to the next page
@item
@samp{<previous-page>}@tab Z@tab move to the previous page
@item
@samp{<last-entry>}@tab *@tab move to the last entry
@item
@samp{<first-entry>}@tab =@tab move to the first entry
@item
@samp{<enter-command>}@tab :@tab enter a muttrc command
@item
@samp{<next-line>}@tab >@tab scroll down one line
@item
@samp{<previous-line>}@tab <@tab scroll up one line
@item
@samp{<half-up>}@tab [@tab scroll up 1/2 page
@item
@samp{<half-down>}@tab ]@tab scroll down 1/2 page
@item
@samp{<help>}@tab ?@tab this screen
@item
@samp{<tag-prefix>}@tab ;@tab apply next function to tagged messages
@item
@samp{<tag-prefix-cond>}@tab @tab apply next function ONLY to tagged messages
@item
@samp{<end-cond>}@tab @tab end of conditional execution (noop)
@item
@samp{<shell-escape>}@tab !@tab invoke a command in a subshell
@item
@samp{<select-entry>}@tab MUTT_ENTER_S@tab select the current entry
@item
@samp{<search>}@tab /@tab search for a regular expression
@item
@samp{<search-reverse>}@tab Esc /@tab search backwards for a regular expression
@item
@samp{<search-opposite>}@tab @tab search for next match in opposite direction
@item
@samp{<jump>}@tab @tab jump to an index number
@item
@samp{<current-top>}@tab @tab move entry to top of screen
@item
@samp{<current-middle>}@tab @tab move entry to middle of screen
@item
@samp{<current-bottom>}@tab @tab move entry to bottom of screen
@item
@samp{<error-history>}@tab @tab display recent history of error messages
@item
@samp{<what-key>}@tab @tab display the keycode for a key press
@item
@samp{<check-stats>}@tab @tab calculate message statistics for all mailboxes
@end multitable

@node Index Menu, Pager Menu, Generic Menu, Functions <1>
@subsection Index Menu

@noindent
@anchor{Default Index Menu Bindings}

@strong{Default Index Menu Bindings}

@multitable @columnfractions 0.333333333333333 0.333333333333333 0.333333333333333
@item
Function@tab Default key@tab Description
@item
@samp{<create-alias>}@tab a@tab create an alias from a message sender
@item
@samp{<autocrypt-acct-menu>}@tab A@tab manage autocrypt accounts
@item
@samp{<background-compose-menu>}@tab B@tab list and select backgrounded compose sessions
@item
@samp{<bounce-message>}@tab b@tab remail a message to another user
@item
@samp{<break-thread>}@tab #@tab break the thread in two
@item
@samp{<browse-mailboxes>}@tab y@tab select a new mailbox from the browser
@item
@samp{<browse-mailboxes-readonly>}@tab @tab select a new mailbox from the browser in read only mode
@item
@samp{<change-folder>}@tab c@tab open a different folder
@item
@samp{<change-folder-readonly>}@tab Esc c@tab open a different folder in read only mode
@item
@samp{<next-unread-mailbox>}@tab @tab open next mailbox with new mail
@item
@samp{<collapse-thread>}@tab Esc v@tab collapse/uncollapse current thread
@item
@samp{<collapse-all>}@tab Esc V@tab collapse/uncollapse all threads
@item
@samp{<compose-to-sender>}@tab @tab compose new message to the current message sender
@item
@samp{<copy-message>}@tab C@tab copy a message to a file/mailbox
@item
@samp{<decode-copy>}@tab Esc C@tab make decoded (text/plain) copy
@item
@samp{<decode-save>}@tab Esc s@tab make decoded copy (text/plain) and delete
@item
@samp{<delete-message>}@tab d@tab delete the current entry
@item
@samp{<delete-pattern>}@tab D@tab delete messages matching a pattern
@item
@samp{<delete-thread>}@tab ^D@tab delete all messages in thread
@item
@samp{<delete-subthread>}@tab Esc d@tab delete all messages in subthread
@item
@samp{<edit>}@tab e@tab edit the raw message
@item
@samp{<edit-label>}@tab Y@tab add, change, or delete a message's label
@item
@samp{<edit-type>}@tab ^E@tab edit attachment content type
@item
@samp{<forward-message>}@tab f@tab forward a message with comments
@item
@samp{<flag-message>}@tab F@tab toggle a message's 'important' flag
@item
@samp{<group-chat-reply>}@tab @tab reply to all recipients preserving To/Cc
@item
@samp{<group-reply>}@tab g@tab reply to all recipients
@item
@samp{<fetch-mail>}@tab G@tab retrieve mail from POP server
@item
@samp{<imap-fetch-mail>}@tab @tab force retrieval of mail from IMAP server
@item
@samp{<imap-logout-all>}@tab @tab logout from all IMAP servers
@item
@samp{<display-toggle-weed>}@tab h@tab display message and toggle header weeding
@item
@samp{<next-undeleted>}@tab j@tab move to the next undeleted message
@item
@samp{<previous-undeleted>}@tab k@tab move to the previous undeleted message
@item
@samp{<limit>}@tab l@tab show only messages matching a pattern
@item
@samp{<link-threads>}@tab &@tab link tagged message to the current one
@item
@samp{<list-reply>}@tab L@tab reply to specified mailing list
@item
@samp{<mail>}@tab m@tab compose a new mail message
@item
@samp{<toggle-new>}@tab N@tab toggle a message's 'new' flag
@item
@samp{<toggle-write>}@tab %@tab toggle whether the mailbox will be rewritten
@item
@samp{<next-thread>}@tab ^N@tab jump to the next thread
@item
@samp{<next-subthread>}@tab Esc n@tab jump to the next subthread
@item
@samp{<purge-message>}@tab @tab delete the current entry, bypassing the trash folder
@item
@samp{<query>}@tab Q@tab query external program for addresses
@item
@samp{<quit>}@tab q@tab save changes to mailbox and quit
@item
@samp{<reply>}@tab r@tab reply to a message
@item
@samp{<show-limit>}@tab Esc l@tab show currently active limit pattern
@item
@samp{<sort-mailbox>}@tab o@tab sort messages
@item
@samp{<sort-reverse>}@tab O@tab sort messages in reverse order
@item
@samp{<print-message>}@tab p@tab print the current entry
@item
@samp{<previous-thread>}@tab ^P@tab jump to previous thread
@item
@samp{<previous-subthread>}@tab Esc p@tab jump to previous subthread
@item
@samp{<recall-message>}@tab R@tab recall a postponed message
@item
@samp{<read-thread>}@tab ^R@tab mark the current thread as read
@item
@samp{<read-subthread>}@tab Esc r@tab mark the current subthread as read
@item
@samp{<resend-message>}@tab Esc e@tab use the current message as a template for a new one
@item
@samp{<save-message>}@tab s@tab save message/attachment to a mailbox/file
@item
@samp{<tag-pattern>}@tab T@tab tag messages matching a pattern
@item
@samp{<tag-subthread>}@tab @tab tag the current subthread
@item
@samp{<tag-thread>}@tab Esc t@tab tag the current thread
@item
@samp{<untag-pattern>}@tab ^T@tab untag messages matching a pattern
@item
@samp{<undelete-message>}@tab u@tab undelete the current entry
@item
@samp{<undelete-pattern>}@tab U@tab undelete messages matching a pattern
@item
@samp{<undelete-subthread>}@tab Esc u@tab undelete all messages in subthread
@item
@samp{<undelete-thread>}@tab ^U@tab undelete all messages in thread
@item
@samp{<view-attachments>}@tab v@tab show MIME attachments
@item
@samp{<show-version>}@tab V@tab show the Mutt version number and date
@item
@samp{<set-flag>}@tab w@tab set a status flag on a message
@item
@samp{<clear-flag>}@tab W@tab clear a status flag from a message
@item
@samp{<display-message>}@tab MUTT_ENTER_S@tab display a message
@item
@samp{<mark-message>}@tab ~@tab create a hotkey macro for the current message
@item
@samp{<buffy-list>}@tab .@tab list mailboxes with new mail
@item
@samp{<sync-mailbox>}@tab $@tab save changes to mailbox
@item
@samp{<display-address>}@tab @@@tab display full address of sender
@item
@samp{<pipe-message>}@tab |@tab pipe message/attachment to a shell command
@item
@samp{<next-new>}@tab @tab jump to the next new message
@item
@samp{<next-new-then-unread>}@tab <Tab>@tab jump to the next new or unread message
@item
@samp{<previous-new>}@tab @tab jump to the previous new message
@item
@samp{<previous-new-then-unread>}@tab Esc <Tab>@tab jump to the previous new or unread message
@item
@samp{<next-unread>}@tab @tab jump to the next unread message
@item
@samp{<previous-unread>}@tab @tab jump to the previous unread message
@item
@samp{<parent-message>}@tab P@tab jump to parent message in thread
@item
@samp{<root-message>}@tab @tab jump to root message in thread
@item
@samp{<extract-keys>}@tab ^K@tab extract supported public keys
@item
@samp{<forget-passphrase>}@tab ^F@tab wipe passphrase(s) from memory
@item
@samp{<check-traditional-pgp>}@tab Esc P@tab check for classic PGP
@item
@samp{<mail-key>}@tab Esc k@tab mail a PGP public key
@item
@samp{<decrypt-copy>}@tab @tab make decrypted copy
@item
@samp{<decrypt-save>}@tab @tab make decrypted copy and delete
@item
@samp{<sidebar-first>}@tab @tab move the highlight to the first mailbox
@item
@samp{<sidebar-last>}@tab @tab move the highlight to the last mailbox
@item
@samp{<sidebar-next>}@tab @tab move the highlight to next mailbox
@item
@samp{<sidebar-next-new>}@tab @tab move the highlight to next mailbox with new mail
@item
@samp{<sidebar-open>}@tab @tab open highlighted mailbox
@item
@samp{<sidebar-page-down>}@tab @tab scroll the sidebar down 1 page
@item
@samp{<sidebar-page-up>}@tab @tab scroll the sidebar up 1 page
@item
@samp{<sidebar-prev>}@tab @tab move the highlight to previous mailbox
@item
@samp{<sidebar-prev-new>}@tab @tab move the highlight to previous mailbox with new mail
@item
@samp{<sidebar-toggle-visible>}@tab @tab make the sidebar (in)visible
@end multitable

@node Pager Menu, Alias Menu <1>, Index Menu, Functions <1>
@subsection Pager Menu

@noindent
@anchor{Default Pager Menu Bindings}

@strong{Default Pager Menu Bindings}

@multitable @columnfractions 0.333333333333333 0.333333333333333 0.333333333333333
@item
Function@tab Default key@tab Description
@item
@samp{<background-compose-menu>}@tab B@tab list and select backgrounded compose sessions
@item
@samp{<break-thread>}@tab #@tab break the thread in two
@item
@samp{<browse-mailboxes>}@tab y@tab select a new mailbox from the browser
@item
@samp{<browse-mailboxes-readonly>}@tab @tab select a new mailbox from the browser in read only mode
@item
@samp{<create-alias>}@tab a@tab create an alias from a message sender
@item
@samp{<bounce-message>}@tab b@tab remail a message to another user
@item
@samp{<change-folder>}@tab c@tab open a different folder
@item
@samp{<change-folder-readonly>}@tab Esc c@tab open a different folder in read only mode
@item
@samp{<next-unread-mailbox>}@tab @tab open next mailbox with new mail
@item
@samp{<compose-to-sender>}@tab @tab compose new message to the current message sender
@item
@samp{<copy-message>}@tab C@tab copy a message to a file/mailbox
@item
@samp{<decode-copy>}@tab Esc C@tab make decoded (text/plain) copy
@item
@samp{<delete-message>}@tab d@tab delete the current entry
@item
@samp{<delete-thread>}@tab ^D@tab delete all messages in thread
@item
@samp{<delete-subthread>}@tab Esc d@tab delete all messages in subthread
@item
@samp{<set-flag>}@tab w@tab set a status flag on a message
@item
@samp{<clear-flag>}@tab W@tab clear a status flag from a message
@item
@samp{<edit>}@tab e@tab edit the raw message
@item
@samp{<edit-label>}@tab Y@tab add, change, or delete a message's label
@item
@samp{<edit-type>}@tab ^E@tab edit attachment content type
@item
@samp{<forward-message>}@tab f@tab forward a message with comments
@item
@samp{<flag-message>}@tab F@tab toggle a message's 'important' flag
@item
@samp{<group-chat-reply>}@tab @tab reply to all recipients preserving To/Cc
@item
@samp{<group-reply>}@tab g@tab reply to all recipients
@item
@samp{<imap-fetch-mail>}@tab @tab force retrieval of mail from IMAP server
@item
@samp{<imap-logout-all>}@tab @tab logout from all IMAP servers
@item
@samp{<display-toggle-weed>}@tab h@tab display message and toggle header weeding
@item
@samp{<next-undeleted>}@tab j@tab move to the next undeleted message
@item
@samp{<next-entry>}@tab J@tab move to the next entry
@item
@samp{<previous-undeleted>}@tab k@tab move to the previous undeleted message
@item
@samp{<previous-entry>}@tab K@tab move to the previous entry
@item
@samp{<link-threads>}@tab &@tab link tagged message to the current one
@item
@samp{<list-reply>}@tab L@tab reply to specified mailing list
@item
@samp{<redraw-screen>}@tab ^L@tab clear and redraw the screen
@item
@samp{<mail>}@tab m@tab compose a new mail message
@item
@samp{<mark-as-new>}@tab N@tab toggle a message's 'new' flag
@item
@samp{<toggle-write>}@tab %@tab toggle whether the mailbox will be rewritten
@item
@samp{<search-next>}@tab n@tab search for next match
@item
@samp{<next-thread>}@tab ^N@tab jump to the next thread
@item
@samp{<next-subthread>}@tab Esc n@tab jump to the next subthread
@item
@samp{<sort-mailbox>}@tab o@tab sort messages
@item
@samp{<sort-reverse>}@tab O@tab sort messages in reverse order
@item
@samp{<print-message>}@tab p@tab print the current entry
@item
@samp{<previous-thread>}@tab ^P@tab jump to previous thread
@item
@samp{<previous-subthread>}@tab Esc p@tab jump to previous subthread
@item
@samp{<purge-message>}@tab @tab delete the current entry, bypassing the trash folder
@item
@samp{<quit>}@tab Q@tab save changes to mailbox and quit
@item
@samp{<exit>}@tab q@tab exit this menu
@item
@samp{<reply>}@tab r@tab reply to a message
@item
@samp{<recall-message>}@tab R@tab recall a postponed message
@item
@samp{<read-thread>}@tab ^R@tab mark the current thread as read
@item
@samp{<read-subthread>}@tab Esc r@tab mark the current subthread as read
@item
@samp{<resend-message>}@tab Esc e@tab use the current message as a template for a new one
@item
@samp{<save-message>}@tab s@tab save message/attachment to a mailbox/file
@item
@samp{<skip-quoted>}@tab S@tab skip beyond quoted text
@item
@samp{<decode-save>}@tab Esc s@tab make decoded copy (text/plain) and delete
@item
@samp{<tag-message>}@tab t@tab tag the current entry
@item
@samp{<toggle-quoted>}@tab T@tab toggle display of quoted text
@item
@samp{<undelete-message>}@tab u@tab undelete the current entry
@item
@samp{<undelete-subthread>}@tab Esc u@tab undelete all messages in subthread
@item
@samp{<undelete-thread>}@tab ^U@tab undelete all messages in thread
@item
@samp{<view-attachments>}@tab v@tab show MIME attachments
@item
@samp{<show-version>}@tab V@tab show the Mutt version number and date
@item
@samp{<search-toggle>}@tab \\@tab toggle search pattern coloring
@item
@samp{<display-address>}@tab @@@tab display full address of sender
@item
@samp{<next-new>}@tab @tab jump to the next new message
@item
@samp{<pipe-message>}@tab |@tab pipe message/attachment to a shell command
@item
@samp{<help>}@tab ?@tab this screen
@item
@samp{<next-page>}@tab <Space>@tab move to the next page
@item
@samp{<previous-page>}@tab -@tab move to the previous page
@item
@samp{<top>}@tab ^@tab jump to the top of the message
@item
@samp{<sync-mailbox>}@tab $@tab save changes to mailbox
@item
@samp{<shell-escape>}@tab !@tab invoke a command in a subshell
@item
@samp{<enter-command>}@tab :@tab enter a muttrc command
@item
@samp{<buffy-list>}@tab .@tab list mailboxes with new mail
@item
@samp{<search>}@tab /@tab search for a regular expression
@item
@samp{<search-reverse>}@tab Esc /@tab search backwards for a regular expression
@item
@samp{<search-opposite>}@tab @tab search for next match in opposite direction
@item
@samp{<next-line>}@tab MUTT_ENTER_S@tab scroll down one line
@item
@samp{<error-history>}@tab @tab display recent history of error messages
@item
@samp{<jump>}@tab @tab jump to an index number
@item
@samp{<next-unread>}@tab @tab jump to the next unread message
@item
@samp{<previous-new>}@tab @tab jump to the previous new message
@item
@samp{<previous-unread>}@tab @tab jump to the previous unread message
@item
@samp{<half-up>}@tab @tab scroll up 1/2 page
@item
@samp{<half-down>}@tab @tab scroll down 1/2 page
@item
@samp{<previous-line>}@tab @tab scroll up one line
@item
@samp{<bottom>}@tab @tab jump to the bottom of the message
@item
@samp{<parent-message>}@tab P@tab jump to parent message in thread
@item
@samp{<root-message>}@tab @tab jump to root message in thread
@item
@samp{<check-traditional-pgp>}@tab Esc P@tab check for classic PGP
@item
@samp{<mail-key>}@tab Esc k@tab mail a PGP public key
@item
@samp{<extract-keys>}@tab ^K@tab extract supported public keys
@item
@samp{<forget-passphrase>}@tab ^F@tab wipe passphrase(s) from memory
@item
@samp{<decrypt-copy>}@tab @tab make decrypted copy
@item
@samp{<decrypt-save>}@tab @tab make decrypted copy and delete
@item
@samp{<what-key>}@tab @tab display the keycode for a key press
@item
@samp{<check-stats>}@tab @tab calculate message statistics for all mailboxes
@item
@samp{<sidebar-first>}@tab @tab move the highlight to the first mailbox
@item
@samp{<sidebar-last>}@tab @tab move the highlight to the last mailbox
@item
@samp{<sidebar-next>}@tab @tab move the highlight to next mailbox
@item
@samp{<sidebar-next-new>}@tab @tab move the highlight to next mailbox with new mail
@item
@samp{<sidebar-open>}@tab @tab open highlighted mailbox
@item
@samp{<sidebar-page-down>}@tab @tab scroll the sidebar down 1 page
@item
@samp{<sidebar-page-up>}@tab @tab scroll the sidebar up 1 page
@item
@samp{<sidebar-prev>}@tab @tab move the highlight to previous mailbox
@item
@samp{<sidebar-prev-new>}@tab @tab move the highlight to previous mailbox with new mail
@item
@samp{<sidebar-toggle-visible>}@tab @tab make the sidebar (in)visible
@end multitable

@node Alias Menu <1>, Query Menu, Pager Menu, Functions <1>
@subsection Alias Menu

@noindent
@anchor{Default Alias Menu Bindings}

@strong{Default Alias Menu Bindings}

@multitable @columnfractions 0.333333333333333 0.333333333333333 0.333333333333333
@item
Function@tab Default key@tab Description
@item
@samp{<delete-entry>}@tab d@tab delete the current entry
@item
@samp{<undelete-entry>}@tab u@tab undelete the current entry
@end multitable

@node Query Menu, Attachment Menu <1>, Alias Menu <1>, Functions <1>
@subsection Query Menu

@noindent
@anchor{Default Query Menu Bindings}

@strong{Default Query Menu Bindings}

@multitable @columnfractions 0.333333333333333 0.333333333333333 0.333333333333333
@item
Function@tab Default key@tab Description
@item
@samp{<create-alias>}@tab a@tab create an alias from a message sender
@item
@samp{<mail>}@tab m@tab compose a new mail message
@item
@samp{<query>}@tab Q@tab query external program for addresses
@item
@samp{<query-append>}@tab A@tab append new query results to current results
@end multitable

@node Attachment Menu <1>, Compose Menu <2>, Query Menu, Functions <1>
@subsection Attachment Menu

@noindent
@anchor{Default Attachment Menu Bindings}

@strong{Default Attachment Menu Bindings}

@multitable @columnfractions 0.333333333333333 0.333333333333333 0.333333333333333
@item
Function@tab Default key@tab Description
@item
@samp{<bounce-message>}@tab b@tab remail a message to another user
@item
@samp{<display-toggle-weed>}@tab h@tab display message and toggle header weeding
@item
@samp{<compose-to-sender>}@tab @tab compose new message to the current message sender
@item
@samp{<edit-type>}@tab ^E@tab edit attachment content type
@item
@samp{<print-entry>}@tab p@tab print the current entry
@item
@samp{<save-entry>}@tab s@tab save message/attachment to a mailbox/file
@item
@samp{<pipe-entry>}@tab |@tab pipe message/attachment to a shell command
@item
@samp{<view-mailcap>}@tab m@tab force viewing of attachment using mailcap
@item
@samp{<reply>}@tab r@tab reply to a message
@item
@samp{<resend-message>}@tab Esc e@tab use the current message as a template for a new one
@item
@samp{<group-chat-reply>}@tab @tab reply to all recipients preserving To/Cc
@item
@samp{<group-reply>}@tab g@tab reply to all recipients
@item
@samp{<list-reply>}@tab L@tab reply to specified mailing list
@item
@samp{<forward-message>}@tab f@tab forward a message with comments
@item
@samp{<view-text>}@tab T@tab view attachment as text
@item
@samp{<view-attach>}@tab MUTT_ENTER_S@tab view attachment using mailcap entry if necessary
@item
@samp{<delete-entry>}@tab d@tab delete the current entry
@item
@samp{<undelete-entry>}@tab u@tab undelete the current entry
@item
@samp{<collapse-parts>}@tab v@tab Toggle display of subparts
@item
@samp{<check-traditional-pgp>}@tab Esc P@tab check for classic PGP
@item
@samp{<extract-keys>}@tab ^K@tab extract supported public keys
@item
@samp{<forget-passphrase>}@tab ^F@tab wipe passphrase(s) from memory
@end multitable

@node Compose Menu <2>, Postpone Menu, Attachment Menu <1>, Functions <1>
@subsection Compose Menu

@noindent
@anchor{Default Compose Menu Bindings}

@strong{Default Compose Menu Bindings}

@multitable @columnfractions 0.333333333333333 0.333333333333333 0.333333333333333
@item
Function@tab Default key@tab Description
@item
@samp{<attach-file>}@tab a@tab attach file(s) to this message
@item
@samp{<attach-message>}@tab A@tab attach message(s) to this message
@item
@samp{<edit-bcc>}@tab b@tab edit the BCC list
@item
@samp{<edit-cc>}@tab c@tab edit the CC list
@item
@samp{<copy-file>}@tab C@tab save message/attachment to a mailbox/file
@item
@samp{<detach-file>}@tab D@tab delete the current entry
@item
@samp{<toggle-disposition>}@tab ^D@tab toggle disposition between inline/attachment
@item
@samp{<edit-description>}@tab d@tab edit attachment description
@item
@samp{<edit-message>}@tab e@tab edit the message
@item
@samp{<edit-headers>}@tab E@tab edit the message with headers
@item
@samp{<edit-file>}@tab ^X e@tab edit the file to be attached
@item
@samp{<edit-encoding>}@tab ^E@tab edit attachment transfer-encoding
@item
@samp{<edit-from>}@tab Esc f@tab edit the from field
@item
@samp{<edit-fcc>}@tab f@tab enter a file to save a copy of this message in
@item
@samp{<filter-entry>}@tab F@tab filter attachment through a shell command
@item
@samp{<get-attachment>}@tab G@tab get a temporary copy of an attachment
@item
@samp{<display-toggle-weed>}@tab h@tab display message and toggle header weeding
@item
@samp{<ispell>}@tab i@tab run ispell on the message
@item
@samp{<print-entry>}@tab l@tab print the current entry
@item
@samp{<edit-mime>}@tab m@tab edit attachment using mailcap entry
@item
@samp{<new-mime>}@tab n@tab compose new attachment using mailcap entry
@item
@samp{<autocrypt-menu>}@tab o@tab show autocrypt compose menu options
@item
@samp{<postpone-message>}@tab P@tab save this message to send later
@item
@samp{<edit-reply-to>}@tab r@tab edit the Reply-To field
@item
@samp{<rename-attachment>}@tab ^O@tab send attachment with a different name
@item
@samp{<rename-file>}@tab R@tab rename/move an attached file
@item
@samp{<edit-subject>}@tab s@tab edit the subject of this message
@item
@samp{<edit-to>}@tab t@tab edit the TO list
@item
@samp{<edit-type>}@tab ^T@tab edit attachment content type
@item
@samp{<write-fcc>}@tab w@tab write the message to a folder
@item
@samp{<toggle-unlink>}@tab u@tab toggle whether to delete file after sending it
@item
@samp{<toggle-recode>}@tab @tab toggle recoding of this attachment
@item
@samp{<update-encoding>}@tab U@tab update an attachment's encoding info
@item
@samp{<view-attach>}@tab MUTT_ENTER_S@tab view attachment using mailcap entry if necessary
@item
@samp{<view-alt>}@tab v@tab view multipart/alternative
@item
@samp{<view-alt-text>}@tab Esc v@tab view multipart/alternative as text
@item
@samp{<view-alt-mailcap>}@tab V@tab view multipart/alternative using mailcap
@item
@samp{<send-message>}@tab y@tab send the message
@item
@samp{<pipe-entry>}@tab |@tab pipe message/attachment to a shell command
@item
@samp{<move-down>}@tab @tab move attachment down in compose menu list
@item
@samp{<move-up>}@tab @tab move attachment up in compose menu list
@item
@samp{<attach-key>}@tab Esc k@tab attach a PGP public key
@item
@samp{<pgp-menu>}@tab p@tab show PGP options
@item
@samp{<forget-passphrase>}@tab ^F@tab wipe passphrase(s) from memory
@item
@samp{<smime-menu>}@tab S@tab show S/MIME options
@item
@samp{<mix>}@tab M@tab send the message through a mixmaster remailer chain
@end multitable

@node Postpone Menu, Browser Menu, Compose Menu <2>, Functions <1>
@subsection Postpone Menu

@noindent
@anchor{Default Postpone Menu Bindings}

@strong{Default Postpone Menu Bindings}

@multitable @columnfractions 0.333333333333333 0.333333333333333 0.333333333333333
@item
Function@tab Default key@tab Description
@item
@samp{<delete-entry>}@tab d@tab delete the current entry
@item
@samp{<undelete-entry>}@tab u@tab undelete the current entry
@end multitable

@node Browser Menu, Pgp Menu, Postpone Menu, Functions <1>
@subsection Browser Menu

@noindent
@anchor{Default Browser Menu Bindings}

@strong{Default Browser Menu Bindings}

@multitable @columnfractions 0.333333333333333 0.333333333333333 0.333333333333333
@item
Function@tab Default key@tab Description
@item
@samp{<change-dir>}@tab c@tab change directories
@item
@samp{<descend-directory>}@tab @tab descend into a directory
@item
@samp{<display-filename>}@tab @@@tab display the currently selected file's name
@item
@samp{<enter-mask>}@tab m@tab enter a file mask
@item
@samp{<sort>}@tab o@tab sort messages
@item
@samp{<sort-reverse>}@tab O@tab sort messages in reverse order
@item
@samp{<select-new>}@tab N@tab select a new file in this directory
@item
@samp{<check-new>}@tab @tab check mailboxes for new mail
@item
@samp{<toggle-mailboxes>}@tab <Tab>@tab toggle whether to browse mailboxes or all files
@item
@samp{<view-file>}@tab <Space>@tab view file
@item
@samp{<buffy-list>}@tab .@tab list mailboxes with new mail
@item
@samp{<create-mailbox>}@tab C@tab create a new mailbox (IMAP only)
@item
@samp{<delete-mailbox>}@tab d@tab delete the current mailbox (IMAP only)
@item
@samp{<rename-mailbox>}@tab r@tab rename the current mailbox (IMAP only)
@item
@samp{<subscribe>}@tab s@tab subscribe to current mailbox (IMAP only)
@item
@samp{<unsubscribe>}@tab u@tab unsubscribe from current mailbox (IMAP only)
@item
@samp{<toggle-subscribed>}@tab T@tab toggle view all/subscribed mailboxes (IMAP only)
@end multitable

@node Pgp Menu, Smime Menu, Browser Menu, Functions <1>
@subsection Pgp Menu

@noindent
@anchor{Default Pgp Menu Bindings}

@strong{Default Pgp Menu Bindings}

@multitable @columnfractions 0.333333333333333 0.333333333333333 0.333333333333333
@item
Function@tab Default key@tab Description
@item
@samp{<verify-key>}@tab c@tab verify a PGP public key
@item
@samp{<view-name>}@tab %@tab view the key's user id
@end multitable

@node Smime Menu, Mixmaster Menu, Pgp Menu, Functions <1>
@subsection Smime Menu

@noindent
@anchor{Default Smime Menu Bindings}

@strong{Default Smime Menu Bindings}

@multitable @columnfractions 0.333333333333333 0.333333333333333 0.333333333333333
@item
Function@tab Default key@tab Description
@item
@samp{<verify-key>}@tab c@tab verify a PGP public key
@item
@samp{<view-name>}@tab %@tab view the key's user id
@end multitable

@node Mixmaster Menu, Editor Menu, Smime Menu, Functions <1>
@subsection Mixmaster Menu

@noindent
@anchor{Default Mixmaster Menu Bindings}

@strong{Default Mixmaster Menu Bindings}

@multitable @columnfractions 0.333333333333333 0.333333333333333 0.333333333333333
@item
Function@tab Default key@tab Description
@item
@samp{<accept>}@tab MUTT_ENTER_S@tab accept the chain constructed
@item
@samp{<append>}@tab a@tab append a remailer to the chain
@item
@samp{<insert>}@tab i@tab insert a remailer into the chain
@item
@samp{<delete>}@tab d@tab delete a remailer from the chain
@item
@samp{<chain-prev>}@tab <Left>@tab select the previous element of the chain
@item
@samp{<chain-next>}@tab <Right>@tab select the next element of the chain
@end multitable

@node Editor Menu, Autocrypt Account Menu, Mixmaster Menu, Functions <1>
@subsection Editor Menu

@noindent
@anchor{Default Editor Menu Bindings}

@strong{Default Editor Menu Bindings}

@multitable @columnfractions 0.333333333333333 0.333333333333333 0.333333333333333
@item
Function@tab Default key@tab Description
@item
@samp{<bol>}@tab ^A@tab jump to the beginning of the line
@item
@samp{<backward-char>}@tab ^B@tab move the cursor one character to the left
@item
@samp{<backward-word>}@tab Esc b@tab move the cursor to the beginning of the word
@item
@samp{<capitalize-word>}@tab Esc c@tab capitalize the word
@item
@samp{<downcase-word>}@tab Esc l@tab convert the word to lower case
@item
@samp{<upcase-word>}@tab Esc u@tab convert the word to upper case
@item
@samp{<delete-char>}@tab ^D@tab delete the char under the cursor
@item
@samp{<eol>}@tab ^E@tab jump to the end of the line
@item
@samp{<forward-char>}@tab ^F@tab move the cursor one character to the right
@item
@samp{<forward-word>}@tab Esc f@tab move the cursor to the end of the word
@item
@samp{<backspace>}@tab <Backspace>@tab delete the char in front of the cursor
@item
@samp{<kill-eol>}@tab ^K@tab delete chars from cursor to end of line
@item
@samp{<kill-eow>}@tab Esc d@tab delete chars from the cursor to the end of the word
@item
@samp{<kill-line>}@tab ^U@tab delete all chars on the line
@item
@samp{<quote-char>}@tab ^V@tab quote the next typed key
@item
@samp{<kill-word>}@tab ^W@tab delete the word in front of the cursor
@item
@samp{<complete>}@tab <Tab>@tab complete filename or alias
@item
@samp{<complete-query>}@tab ^T@tab complete address with query
@item
@samp{<buffy-cycle>}@tab <Space>@tab cycle among incoming mailboxes
@item
@samp{<history-up>}@tab ^P@tab scroll up through the history list
@item
@samp{<history-down>}@tab ^N@tab scroll down through the history list
@item
@samp{<history-search>}@tab ^R@tab search through the history list
@item
@samp{<transpose-chars>}@tab @tab transpose character under cursor with previous
@end multitable

@node Autocrypt Account Menu, , Editor Menu, Functions <1>
@subsection Autocrypt Account Menu

@noindent
@anchor{Default Autocrypt Account Menu Bindings}

@strong{Default Autocrypt Account Menu Bindings}

@multitable @columnfractions 0.333333333333333 0.333333333333333 0.333333333333333
@item
Function@tab Default key@tab Description
@item
@samp{<create-account>}@tab c@tab create a new autocrypt account
@item
@samp{<delete-account>}@tab D@tab delete the current account
@item
@samp{<toggle-active>}@tab a@tab toggle the current account active/inactive
@item
@samp{<toggle-prefer-encrypt>}@tab p@tab toggle the current account prefer-encrypt flag
@end multitable

@node Miscellany <1>, , Reference, Top
@chapter Miscellany

@menu
* Acknowledgements::
* About This Document::
@end menu

@node Acknowledgements, About This Document, , Miscellany <1>
@section Acknowledgements

Kari Hurtta @email{kari.hurtta@@fmi.fi} co-developed the original
MIME parsing code back in the ELM-ME days.

The following people have been very helpful to the development of Mutt:

@itemize 

@item
Vikas Agnihotri @email{vikasa@@writeme.com}

@item
Francois Berjon @email{Francois.Berjon@@aar.alcatel-alsthom.fr}

@item
Aric Blumer @email{aric@@fore.com}

@item
John Capo @email{jc@@irbs.com}

@item
David Champion @email{dgc@@uchicago.edu}

@item
Brendan Cully @email{brendan@@kublai.com}

@item
Liviu Daia @email{daia@@stoilow.imar.ro}

@item
Thomas E. Dickey @email{dickey@@herndon4.his.com}

@item
David DeSimone @email{fox@@convex.hp.com}

@item
Nickolay N. Dudorov @email{nnd@@wint.itfs.nsk.su}

@item
Ruslan Ermilov @email{ru@@freebsd.org}

@item
Edmund Grimley Evans @email{edmundo@@rano.org}

@item
Michael Finken @email{finken@@conware.de}

@item
Sven Guckes @email{guckes@@math.fu-berlin.de}

@item
Lars Hecking @email{lhecking@@nmrc.ie}

@item
Mark Holloman @email{holloman@@nando.net}

@item
Andreas Holzmann @email{holzmann@@fmi.uni-passau.de}

@item
Marco d'Itri @email{md@@linux.it}

@item
Björn Jacke @email{bjacke@@suse.com}

@item
Byrial Jensen @email{byrial@@image.dk}

@item
David Jeske @email{jeske@@igcom.net}

@item
Christophe Kalt @email{kalt@@hugo.int-evry.fr}

@item
Tommi Komulainen @email{Tommi.Komulainen@@iki.fi}

@item
Felix von Leitner (a.k.a ‘Fefe’) @email{leitner@@math.fu-berlin.de}

@item
Brandon Long @email{blong@@fiction.net}

@item
Jimmy Mäkelä @email{jmy@@flashback.net}

@item
Lars Marowsky-Bree @email{lmb@@pointer.in-minden.de}

@item
Kevin J. McCarthy @email{kevin@@8t8.us}

@item
Thomas ‘Mike’ Michlmayr @email{mike@@cosy.sbg.ac.at}

@item
Andrew W. Nosenko @email{awn@@bcs.zp.ua}

@item
David O'Brien @email{obrien@@Nuxi.cs.ucdavis.edu}

@item
Clint Olsen @email{olsenc@@ichips.intel.com}

@item
Park Myeong Seok @email{pms@@romance.kaist.ac.kr}

@item
Thomas Parmelan @email{tom@@ankh.fr.eu.org}

@item
Ollivier Robert @email{roberto@@keltia.freenix.fr}

@item
Thomas Roessler @email{roessler@@does-not-exist.org}

@item
Roland Rosenfeld @email{roland@@spinnaker.de}

@item
Rocco Rutte @email{pdmef@@gmx.net}

@item
TAKIZAWA Takashi @email{taki@@luna.email.ne.jp}

@item
Allain Thivillon @email{Allain.Thivillon@@alma.fr}

@item
Gero Treuner @email{gero@@70t.de}

@item
Vsevolod Volkov @email{vvv@@lucky.net}

@item
Ken Weinert @email{kenw@@ihs.com}
@end itemize

@node About This Document, , Acknowledgements, Miscellany <1>
@section About This Document

This document was written in @uref{http://docbook.sourceforge.net,DocBook}, and then rendered
using the @uref{http://xmlsoft.org/XSLT/,Gnome XSLT toolkit}.

@bye
